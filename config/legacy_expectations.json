{"expect_column_values_confidence_for_data_label_to_be_greater_than_or_equal_to_threshold": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-03-21 11:49:59 -0500 1 year, 8 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_column_values_confidence_for_data_label_to_be_greater_than_or_equal_to_threshold.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler"], "contributors": ["@taylorfturner"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesConfidenceForDataLabelToBeGreaterThanOrEqualToThreshold", "snake_name": "expect_column_values_confidence_for_data_label_to_be_greater_than_or_equal_to_threshold", "short_description": "Expect the column values to have a DataProfiler confidence threshold greater than or equal to the specified threshold for the data label.", "docstring": "Expect the column values to have a DataProfiler confidence threshold greater than or equal to the specified threshold for the data label.\n\nThis function builds upon the custom column map expectations of Great Expectations. This function asks the question a yes/no question of each row in the user-specified column; namely, does the confidence threshold provided by the DataProfiler model exceed the user-specified threshold.\n\n#### Args:\n- column (str): The column name that you want to check.\n- data_label(str): The data label for which you want to check confidences against the threshold value\n- threshold (float): The value, usually as a decimal (e.g. .32), you want to use to flag low confidence predictions\n\ndf.expect_column_values_confidence_for_data_label_to_be_greater_than_or_equal_to_threshold(\ncolumn,\ndata_label=<>,\nthreshold=float(0<=1)\n)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.prediction_confidence_for_data_label_greater_than_or_equal_to_threshold.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.prediction_confidence_for_data_label_greater_than_or_equal_to_threshold.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column values to have a DataProfiler confidence threshold greater than or equal to the specified threshold for the data label.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_confidence_for_data_label_to_be_less_than_or_equal_to_threshold": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-06-28 15:43:31 -0400 1 year, 5 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_column_values_confidence_for_data_label_to_be_less_than_or_equal_to_threshold.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler"], "contributors": ["@taylorfturner", "@stevensecreti"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesConfidenceForDataLabelToBeLessThanOrEqualToThreshold", "snake_name": "expect_column_values_confidence_for_data_label_to_be_less_than_or_equal_to_threshold", "short_description": "Expect the column values to have a DataProfiler confidence threshold less than or equal to the specified threshold for the data label.", "docstring": "Expect the column values to have a DataProfiler confidence threshold less than or equal to the specified threshold for the data label.\n\nThis function builds upon the custom column map expectations of Great Expectations. This function asks the question a yes/no question of each row in the user-specified column; namely, is the confidence threshold provided by the DataProfiler model upper bounded by the user-specified threshold.\n\n#### Args:\n- column (str): The column name that you want to check.\n- data_label(str): The data label for which you want to check confidences against the threshold value\n- threshold (float): The value, usually as a decimal (e.g. .32), you want to use to flag low confidence predictions\n\ndf.expect_column_values_confidence_for_data_label_to_be_greater_than_or_equal_to_threshold(\ncolumn,\ndata_label=<>,\nthreshold=float(0<=1)\n)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.prediction_confidence_for_data_label_less_than_or_equal_to_threshold.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.prediction_confidence_for_data_label_less_than_or_equal_to_threshold.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column values to have a DataProfiler confidence threshold less than or equal to the specified threshold for the data label.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_equal_to_or_greater_than_profile_min": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-06-24 15:27:06 -0400 1 year, 5 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_column_values_to_be_equal_to_or_greater_than_profile_min.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler"], "contributors": ["@stevensecreti"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeEqualToOrGreaterThanProfileMin", "snake_name": "expect_column_values_to_be_equal_to_or_greater_than_profile_min", "short_description": "Expect the column values to be greater than or equal to the minimum value of the respective column within the DataProfiler report.", "docstring": "Expect the column values to be greater than or equal to the minimum value of the respective column within the DataProfiler report.\n\nThis function builds upon the custom column map expectations of Great Expectations. This function asks a yes/no question of each row in the user-specified column;\nnamely, is the value greater than or equal to the minimum value of the respective column within the provided profile report generated from the DataProfiler.\n\n#### Args:\n- column(str): The column that you want to check.\n- profile(dict(str, Any)): The report, which is assumed to contain a column of the same name, previously generated using the DataProfiler.\n\ndf.expect_column_values_to_be_equal_to_or_greater_than_profile_min(\ncolumn,\nprofile\n)\n\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.greater_than_or_equal_to_profile_min.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.greater_than_or_equal_to_profile_min.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column values to be greater than or equal to the minimum value of the respective column within the DataProfiler report.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_equal_to_or_less_than_profile_max": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-06-24 15:29:32 -0400 1 year, 5 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_column_values_to_be_equal_to_or_less_than_profile_max.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler"], "contributors": ["@stevensecreti"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeEqualToOrLessThanProfileMax", "snake_name": "expect_column_values_to_be_equal_to_or_less_than_profile_max", "short_description": "Expect the column values to be less than or equal to the maximum value of the respective column within the DataProfiler report.", "docstring": "Expect the column values to be less than or equal to the maximum value of the respective column within the DataProfiler report.\n\nThis function builds upon the custom column map expectations of Great Expectations. This function asks a yes/no question of each row in the user-specified column;\nnamely, is the value less than or equal to the maximum value of the respective column within the provided profile report generated from the DataProfiler.\n\n#### Args:\n- column(str): The column that you want to check.\n- profile(dict(str, Any)): The report, which is assumed to contain a column of the same name, previously generated using the DataProfiler.\n\ndf.expect_column_values_to_be_equal_to_or_less_than_profile_max(\ncolumn,\nprofile\n)\n\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.less_than_or_equal_to_profile_max.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.less_than_or_equal_to_profile_max.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column values to be less than or equal to the maximum value of the respective column within the DataProfiler report.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_probabilistically_greater_than_or_equal_to_threshold": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-03-21 11:49:59 -0500 1 year, 8 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_column_values_to_be_probabilistically_greater_than_or_equal_to_threshold.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler"], "contributors": ["@taylorfturner"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeProbabilisticallyGreaterThanOrEqualToThreshold", "snake_name": "expect_column_values_to_be_probabilistically_greater_than_or_equal_to_threshold", "short_description": "Expect the column values to be probabilistically greater than or equal to the specified threshold.", "docstring": "Expect the column values to be probabilistically greater than or equal to the specified threshold.\n\nThis function builds upon the custom column map expectations of Great Expectations. This function asks a yes/no question of each row in the user-specified column; namely, does the confidence threshold provided by the DataProfiler model exceed the user-specified threshold.\n\n#### Args:\n- column (str): The column name that you want to check.\n- threshold (float): The value, usually as a decimal (e.g. .32), you want to use to flag low confidence predictions\n\ndf.expect_column_values_to_be_probabilistically_greater_than_or_equal_to_threshold(\ncolumn,\nthreshold=float(0<=1)\n)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.prediction_confidence_greater_than_or_equal_to_threshold.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.prediction_confidence_greater_than_or_equal_to_threshold.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column values to be probabilistically greater than or equal to the specified threshold.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_profile_numeric_columns_diff_between_exclusive_threshold_range": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-07-15 13:06:18 -0400 1 year, 4 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_profile_numeric_columns_diff_between_exclusive_threshold_range.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ProfileNumericColumnsDiffExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler", "dataassistance"], "contributors": ["@stevensecreti"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectProfileNumericColumnsDiffBetweenExclusiveThresholdRange", "snake_name": "expect_profile_numeric_columns_diff_between_exclusive_threshold_range", "short_description": "Expect a statistic's value for a given column of a DataProfiler difference report to be within the specified threshold, exclusive.", "docstring": "Expect a statistic's value for a given column of a DataProfiler difference report to be within the specified threshold, exclusive.\n\nThis expectation takes the difference report between the data it is called on and a DataProfiler profile of the same schema loaded from a provided path.\nThis function builds upon the custom ProfileNumericColumnsDiff Expectation of Capital One's DataProfiler Expectations.\nEach numerical column will be checked against a user provided dictionary of columns paired with dictionaries of statistics containing lower and upper bounds.\nIt is expected that a statistics value for a given column is within the specified threshold.\n\n#### Args:\n- profile_path (str): A path to a saved DataProfiler profile object on the local filesystem.\n\n#### limit_check_report_keys (dict): A dict, containing column names as keys and dicts as values that contain statistics as keys and dicts as values containing two keys:\n\"lower\" denoting the lower bound for the threshold range, and \"upper\" denoting the upper bound for the threshold range.\n- mostly (float - optional): a value indicating the lower bound percentage of successful values that must be present to evaluate to success=True.\nvalidator.expect_profile_numerical_columns_diff_between_threshold_range(\n- profile_path = \"C:/path_to/my_profile.pkl\",\nlimit_check_report_keys = {\n- \"column_one\": {\n- \"min\": {\"lower\": 2.0, \"upper\": 10.0},\n},\n- \"*\": {\n- \"*\": {\"lower\": 0, \"upper\": 100},\n},\n}\n)\n- Note: In limit_check_report_keys, \"*\" in place of a column denotes a general operator in which the value it stores will be applied to every column in the data that has no explicit key.\n\"*\" in place of a statistic denotes a general operator in which the bounds it stores will be applied to every statistic for the given column that has no explicit key.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "data_profiler.profile_numeric_columns_diff_between_threshold_range", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a statistic's value for a given column of a DataProfiler difference report to be within the specified threshold, exclusive.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_profile_numeric_columns_diff_between_inclusive_threshold_range": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-07-15 13:06:18 -0400 1 year, 4 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_profile_numeric_columns_diff_between_inclusive_threshold_range.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ProfileNumericColumnsDiffExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler", "dataassistance"], "contributors": ["@stevensecreti"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectProfileNumericColumnsDiffBetweenInclusiveThresholdRange", "snake_name": "expect_profile_numeric_columns_diff_between_inclusive_threshold_range", "short_description": "Expect a statistic's value for a given column of a DataProfiler difference report to be within the specified threshold, inclusive.", "docstring": "Expect a statistic's value for a given column of a DataProfiler difference report to be within the specified threshold, inclusive.\n\nThis expectation takes the difference report between the data it is called on and a DataProfiler profile of the same schema loaded from a provided path.\nThis function builds upon the custom ProfileNumericColumnsDiff Expectation of Capital One's DataProfiler Expectations.\nEach numerical column will be checked against a user provided dictionary of columns paired with dictionaries of statistics containing lower and upper bounds.\nIt is expected that a statistics value for a given column is within the specified threshold, inclusive.\n\n#### Args:\n- profile_path (str): A path to a saved DataProfiler profile object on the local filesystem.\n\n#### limit_check_report_keys (dict): A dict, containing column names as keys and dicts as values that contain statistics as keys and dicts as values containing two keys:\n\"lower\" denoting the lower bound for the threshold range, and \"upper\" denoting the upper bound for the threshold range.\n- mostly (float - optional): a value indicating the lower bound percentage of successful values that must be present to evaluate to success=True.\nvalidator.expect_profile_numerical_columns_diff_between_threshold_range(\n- profile_path = \"C:/path_to/my_profile.pkl\",\nlimit_check_report_keys = {\n- \"column_one\": {\n- \"min\": {\"lower\": 2.0, \"upper\": 10.0},\n},\n- \"*\": {\n- \"*\": {\"lower\": 0, \"upper\": 100},\n},\n}\n)\n- Note: In limit_check_report_keys, \"*\" in place of a column denotes a general operator in which the value it stores will be applied to every column in the data that has no explicit key.\n\"*\" in place of a statistic denotes a general operator in which the bounds it stores will be applied to every statistic for the given column that has no explicit key.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "data_profiler.profile_numeric_columns_diff_between_inclusive_threshold_range", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a statistic's value for a given column of a DataProfiler difference report to be within the specified threshold, inclusive.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_profile_numeric_columns_diff_greater_than_or_equal_to_threshold": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-07-18 10:28:24 -0400 1 year, 4 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_profile_numeric_columns_diff_greater_than_or_equal_to_threshold.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ProfileNumericColumnsDiffExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler", "dataassistance"], "contributors": ["@stevensecreti"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectProfileNumericColumnsDiffGreaterThanOrEqualToThreshold", "snake_name": "expect_profile_numeric_columns_diff_greater_than_or_equal_to_threshold", "short_description": "Expect a statistic's value for a given column of a DataProfiler difference report to be greater than or equal to the specified threshold.", "docstring": "Expect a statistic's value for a given column of a DataProfiler difference report to be greater than or equal to the specified threshold.\n\nThis expectation takes the difference report between the data it is called on and a DataProfiler profile of the same schema loaded from a provided path.\nThis function builds upon the custom ProfileNumericColumnsDiff Expectation of Capital One's DataProfiler Expectations.\nEach numerical column will be checked against a user provided dictionary of columns paired with dictionaries of statistics containing a threshold value.\nIt is expected that a statistics value for a given column is greater than or equal to the specified threshold.\n\n#### Args:\n- profile_path (str): A path to a saved DataProfiler profile object on the local filesystem.\n- limit_check_report_keys (dict): A dict, containing column names as keys and dicts as values that contain statistics as keys and ints or floats as values\ndenoting the threshold that the statistic delta is expectated to exceed.\n- mostly (float - optional): a value indicating the lower bound percentage of successful values that must be present to evaluate to success=True.\nvalidator.expect_profile_numerical_columns_diff_greater_than_threshold(\n- profile_path = \"C:/path_to/my_profile.pkl\",\nlimit_check_report_keys = {\n- \"column_one\": {\n- \"min\": 0\n},\n- \"*\": {\n- \"*\": 1\n},\n}\n)\n- Note: In limit_check_report_keys, \"*\" in place of a column denotes a general operator in which the value it stores will be applied to every column in the data that has no explicit key.\n\"*\" in place of a statistic denotes a general operator in which the bounds it stores will be applied to every statistic for the given column that has no explicit key.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "data_profiler.profile_numeric_columns_diff_greater_than_or_equal_to_threshold", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 6, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a statistic's value for a given column of a DataProfiler difference report to be greater than or equal to the specified threshold.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 6 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 6 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 8.0}, "expect_profile_numeric_columns_diff_greater_than_threshold": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-07-15 13:06:18 -0400 1 year, 4 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_profile_numeric_columns_diff_greater_than_threshold.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ProfileNumericColumnsDiffExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler", "dataassistance"], "contributors": ["@stevensecreti"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectProfileNumericColumnsDiffGreaterThanThreshold", "snake_name": "expect_profile_numeric_columns_diff_greater_than_threshold", "short_description": "Expect a statistic's value for a given column of a DataProfiler difference report to be greater than the specified threshold.", "docstring": "Expect a statistic's value for a given column of a DataProfiler difference report to be greater than the specified threshold.\n\nThis expectation takes the difference report between the data it is called on and a DataProfiler profile of the same schema loaded from a provided path.\nThis function builds upon the custom ProfileNumericColumnsDiff Expectation of Capital One's DataProfiler Expectations.\nEach numerical column will be checked against a user provided dictionary of columns paired with dictionaries of statistics containing a threshold value.\nIt is expected that a statistics value for a given column is greater than the specified threshold.\n\n#### Args:\n- profile_path (str): A path to a saved DataProfiler profile object on the local filesystem.\n- limit_check_report_keys (dict): A dict, containing column names as keys and dicts as values that contain statistics as keys and ints or floats as values\ndenoting the threshold that the statistic delta is expectated to exceed.\n- mostly (float - optional): a value indicating the lower bound percentage of successful values that must be present to evaluate to success=True.\nvalidator.expect_profile_numerical_columns_diff_greater_than_threshold(\n- profile_path = \"C:/path_to/my_profile.pkl\",\nlimit_check_report_keys = {\n- \"column_one\": {\n- \"min\": 0\n},\n- \"*\": {\n- \"*\": 1\n},\n}\n)\n- Note: In limit_check_report_keys, \"*\" in place of a column denotes a general operator in which the value it stores will be applied to every column in the data that has no explicit key.\n\"*\" in place of a statistic denotes a general operator in which the bounds it stores will be applied to every statistic for the given column that has no explicit key.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "data_profiler.profile_numeric_columns_diff_greater_than_threshold", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a statistic's value for a given column of a DataProfiler difference report to be greater than the specified threshold.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_profile_numeric_columns_diff_less_than_or_equal_to_threshold": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-07-18 10:28:24 -0400 1 year, 4 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_profile_numeric_columns_diff_less_than_or_equal_to_threshold.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ProfileNumericColumnsDiffExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler", "dataassistance"], "contributors": ["@stevensecreti"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectProfileNumericColumnsDiffLessThanOrEqualToThreshold", "snake_name": "expect_profile_numeric_columns_diff_less_than_or_equal_to_threshold", "short_description": "Expect a statistic's value for a given column of a DataProfiler difference report to be less than or equal to the specified threshold.", "docstring": "Expect a statistic's value for a given column of a DataProfiler difference report to be less than or equal to the specified threshold.\n\nThis expectation takes the difference report between the data it is called on and a DataProfiler profile of the same schema loaded from a provided path.\nThis function builds upon the custom ProfileNumericColumnsDiff Expectation of Capital One's DataProfiler Expectations.\nEach numerical column will be checked against a user provided dictionary of columns paired with dictionaries of statistics containing a threshold value.\nIt is expected that a statistics value for a given column is less than or equal to the specified threshold.\n\n#### Args:\n- profile_path (str): A path to a saved DataProfiler profile object on the local filesystem.\n- limit_check_report_keys (dict): A dict, containing column names as keys and dicts as values that contain statistics as keys and ints or floats as values\ndenoting the threshold that the statistic delta is expectated to be below.\n- mostly (float - optional): a value indicating the lower bound percentage of successful values that must be present to evaluate to success=True.\nvalidator.expect_profile_numerical_columns_diff_less_than_threshold(\n- profile_path = \"C:/path_to/my_profile.pkl\",\nlimit_check_report_keys = {\n- \"column_one\": {\n- \"min\": 0\n},\n- \"*\": {\n- \"*\": 1\n},\n}\n)\n- Note: In limit_check_report_keys, \"*\" in place of a column denotes a general operator in which the value it stores will be applied to every column in the data that has no explicit key.\n\"*\" in place of a statistic denotes a general operator in which the bounds it stores will be applied to every statistic for the given column that has no explicit key.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "data_profiler.profile_numeric_columns_diff_less_than_or_equal_to_threshold", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a statistic's value for a given column of a DataProfiler difference report to be less than or equal to the specified threshold.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 7.0}, "expect_profile_numeric_columns_diff_less_than_threshold": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-07-15 13:06:18 -0400 1 year, 4 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_profile_numeric_columns_diff_less_than_threshold.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ProfileNumericColumnsDiffExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler", "dataassistance"], "contributors": ["@stevensecreti"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectProfileNumericColumnsDiffLessThanThreshold", "snake_name": "expect_profile_numeric_columns_diff_less_than_threshold", "short_description": "Expect a statistic's value for a given column of a DataProfiler difference report to be less than the specified threshold.", "docstring": "Expect a statistic's value for a given column of a DataProfiler difference report to be less than the specified threshold.\n\nThis expectation takes the difference report between the data it is called on and a DataProfiler profile of the same schema loaded from a provided path.\nThis function builds upon the custom ProfileNumericColumnsDiff Expectation of Capital One's DataProfiler Expectations.\nEach numerical column will be checked against a user provided dictionary of columns paired with dictionaries of statistics containing a threshold value.\nIt is expected that a statistics value for a given column is less than the specified threshold.\n\n#### Args:\n- profile_path (str): A path to a saved DataProfiler profile object on the local filesystem.\n- limit_check_report_keys (dict): A dict, containing column names as keys and dicts as values that contain statistics as keys and ints or floats as values\ndenoting the threshold that the statistic delta is expectated to exceed.\n- mostly (float - optional): a value indicating the lower bound percentage of successful values that must be present to evaluate to success=True.\nvalidator.expect_profile_numerical_columns_diff_less_than_threshold(\n- profile_path = \"C:/path_to/my_profile.pkl\",\nlimit_check_report_keys = {\n- \"column_one\": {\n- \"min\": 0\n},\n- \"*\": {\n- \"*\": 1\n},\n}\n)\n- Note: In limit_check_report_keys, \"*\" in place of a column denotes a general operator in which the value it stores will be applied to every column in the data that has no explicit key.\n\"*\" in place of a statistic denotes a general operator in which the bounds it stores will be applied to every statistic for the given column that has no explicit key.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "data_profiler.profile_numeric_columns_diff_less_than_threshold", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a statistic's value for a given column of a DataProfiler difference report to be less than the specified threshold.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_profile_numeric_columns_percent_diff_between_exclusive_threshold_range": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-07-21 14:41:44 -0400 1 year, 4 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_profile_numeric_columns_percent_diff_between_exclusive_threshold_range.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ProfileNumericColumnsDiffExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler", "dataassistance"], "contributors": ["@stevensecreti"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectProfileNumericColumnsPercentDiffBetweenExclusiveThresholdRange", "snake_name": "expect_profile_numeric_columns_percent_diff_between_exclusive_threshold_range", "short_description": "Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be within the specified threshold, exclusive.", "docstring": "Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be within the specified threshold, exclusive.\n\nThis expectation takes the percent difference report between the data it is called on and a DataProfiler profile of the same schema loaded from a provided path.\nEach numerical column percent delta will be checked against a user provided dictionary of columns paired with dictionaries of statistics containing lower and upper bounds.\nThis function builds upon the custom ProfileNumericColumnsDiff Expectation of Capital One's DataProfiler Expectations.\nIt is expected that a statistic's percent delta for a given column is within the specified threshold, exclusive.\n\n#### Args:\n- profile_path (str): A path to a saved DataProfiler profile object on the local filesystem.\n\n#### limit_check_report_keys (dict): A dict, containing column names as keys and dicts as values that contain statistics as keys and dicts as values containing two keys:\n\"lower\" denoting the lower bound for the threshold range, and \"upper\" denoting the upper bound for the threshold range.\n- mostly (float - optional): a value indicating the lower bound percentage of successful values that must be present to evaluate to success=True.\nvalidator.expect_profile_numerical_columns_percent_diff_between_exclusive_threshold_range(\n- profile_path = \"C:/path_to/my_profile.pkl\",\nlimit_check_report_keys = {\n- \"column_one\": {\n- \"min\": {\"lower\": 0.5, \"upper\": 1.5}, #Indicating 50% lower bound and 150% upper bound\n},\n- \"*\": {\n- \"*\": {\"lower\": 0.0, \"upper\": 2.0}, #Indicating 0% lower bound and 200% upper bound\n},\n}\n)\n- Note: In limit_check_report_keys, \"*\" in place of a column denotes a general operator in which the value it stores will be applied to every column in the data that has no explicit key.\n\"*\" in place of a statistic denotes a general operator in which the bounds it stores will be applied to every statistic for the given column that has no explicit key.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "data_profiler.profile_numeric_columns_percent_diff_between_threshold_range", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be within the specified threshold, exclusive.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_profile_numeric_columns_percent_diff_between_inclusive_threshold_range": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-07-27 12:02:02 -0400 1 year, 4 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_profile_numeric_columns_percent_diff_between_inclusive_threshold_range.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ProfileNumericColumnsDiffExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler", "dataassistance"], "contributors": ["@stevensecreti"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectProfileNumericColumnsPercentDiffBetweenInclusiveThresholdRange", "snake_name": "expect_profile_numeric_columns_percent_diff_between_inclusive_threshold_range", "short_description": "Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be within the specified threshold, inclusive.", "docstring": "Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be within the specified threshold, inclusive.\n\nThis expectation takes the percent difference report between the data it is called on and a DataProfiler profile of the same schema loaded from a provided path.\nEach numerical column percent delta will be checked against a user provided dictionary of columns paired with dictionaries of statistics containing lower and upper bounds.\nThis function builds upon the custom ProfileNumericColumnsDiff Expectation of Capital One's DataProfiler Expectations.\nIt is expected that a statistic's percent delta for a given column is within the specified threshold, inclusive.\n\n#### Args:\n- profile_path (str): A path to a saved DataProfiler profile object on the local filesystem.\n\n#### limit_check_report_keys (dict): A dict, containing column names as keys and dicts as values that contain statistics as keys and dicts as values containing two keys:\n\"lower\" denoting the lower bound for the threshold range, and \"upper\" denoting the upper bound for the threshold range.\n- mostly (float - optional): a value indicating the lower bound percentage of successful values that must be present to evaluate to success=True.\nvalidator.expect_profile_numeric_columns_percent_diff_between_inclusive_threshold_range(\n- profile_path = \"C:/path_to/my_profile.pkl\",\nlimit_check_report_keys = {\n- \"column_one\": {\n- \"min\": {\"lower\": 0.5, \"upper\": 1.5}, #Indicating 50% lower bound and 150% upper bound\n},\n- \"*\": {\n- \"*\": {\"lower\": 0.0, \"upper\": 2.0}, #Indicating 0% lower bound and 200% upper bound\n},\n}\n)\n- Note: In limit_check_report_keys, \"*\" in place of a column denotes a general operator in which the value it stores will be applied to every column in the data that has no explicit key.\n\"*\" in place of a statistic denotes a general operator in which the bounds it stores will be applied to every statistic for the given column that has no explicit key.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "data_profiler.profile_numeric_columns_percent_diff_between_inclusive_threshold_range", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be within the specified threshold, inclusive.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_profile_numeric_columns_percent_diff_greater_than_or_equal_to_threshold": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-07-27 12:02:02 -0400 1 year, 4 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_profile_numeric_columns_percent_diff_greater_than_or_equal_to_threshold.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ProfileNumericColumnsDiffExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler", "dataassistance"], "contributors": ["@stevensecreti"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectProfileNumericColumnsPercentDiffGreaterThanOrEqualToThreshold", "snake_name": "expect_profile_numeric_columns_percent_diff_greater_than_or_equal_to_threshold", "short_description": "Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be greater than or equal to the specified threshold.", "docstring": "Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be greater than or equal to the specified threshold.\n\nThis expectation takes the percent difference report between the data it is called on and a DataProfiler profile of the same schema loaded from a provided path.\nEach numerical column percent delta will be checked against a user provided dictionary of columns paired with dictionaries of statistics containing a threshold.\nThis function builds upon the custom ProfileNumericColumnsDiff Expectation of Capital One's DataProfiler Expectations.\nIt is expected that a statistic's percent delta for a given column is greater than or equal to the specified threshold.\n\n#### Args:\n- profile_path (str): A path to a saved DataProfiler profile object on the local filesystem.\n- limit_check_report_keys (dict[str, dict[str, float]]): A dict, containing column names as keys and dicts as values that contain statistics as keys and thresholds as values\n- mostly (float - optional): a value indicating the lower bound percentage of successful values that must be present to evaluate to success=True.\nvalidator.expect_profile_numeric_columns_percent_diff_greater_than_or_equal_to_threshold(\n- profile_path = \"C:/path_to/my_profile.pkl\",\nlimit_check_report_keys = {\n- \"column_one\": {\n- \"min\": 0.5, #Indicating the threshold for the 'min' statistic in 'column_one' is 50%\n},\n- \"*\": {\n- \"*\": .25, #Indicating the threshold for every statistic in every column is 25%\n},\n}\n)\n- Note: In limit_check_report_keys, \"*\" in place of a column denotes a general operator in which the value it stores will be applied to every column in the data that has no explicit key.\n\"*\" in place of a statistic denotes a general operator in which the bounds it stores will be applied to every statistic for the given column that has no explicit key.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "data_profiler.profile_numeric_columns_percent_diff_greater_than_or_equal_to_threshold", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be greater than or equal to the specified threshold.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_profile_numeric_columns_percent_diff_greater_than_threshold": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-07-25 11:46:19 -0400 1 year, 4 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_profile_numeric_columns_percent_diff_greater_than_threshold.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ProfileNumericColumnsDiffExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler", "dataassistance"], "contributors": ["@stevensecreti"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectProfileNumericColumnsPercentDiffGreaterThanThreshold", "snake_name": "expect_profile_numeric_columns_percent_diff_greater_than_threshold", "short_description": "Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be greater than the specified threshold.", "docstring": "Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be greater than the specified threshold.\n\nThis expectation takes the percent difference report between the data it is called on and a DataProfiler profile of the same schema loaded from a provided path.\nEach numerical column percent delta will be checked against a user provided dictionary of columns paired with dictionaries of statistics containing a threshold.\nThis function builds upon the custom ProfileNumericColumnsDiff Expectation of Capital One's DataProfiler Expectations.\nIt is expected that a statistic's percent delta for a given column is greater than the specified threshold.\n\n#### Args:\n- profile_path (str): A path to a saved DataProfiler profile object on the local filesystem.\n- limit_check_report_keys (dict[str, dict[str, float]]): A dict, containing column names as keys and dicts as values that contain statistics as keys and thresholds as values\n- mostly (float - optional): a value indicating the lower bound percentage of successful values that must be present to evaluate to success=True.\nvalidator.expect_profile_numerical_columns_percent_diff_greater_than_threshold(\n- profile_path = \"C:/path_to/my_profile.pkl\",\nlimit_check_report_keys = {\n- \"column_one\": {\n- \"min\": 0.5, #Indicating the threshold for the 'min' statistic in 'column_one' is 50%\n},\n- \"*\": {\n- \"*\": .25, #Indicating the threshold for every statistic in every column is 25%\n},\n}\n)\n- Note: In limit_check_report_keys, \"*\" in place of a column denotes a general operator in which the value it stores will be applied to every column in the data that has no explicit key.\n\"*\" in place of a statistic denotes a general operator in which the bounds it stores will be applied to every statistic for the given column that has no explicit key.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "data_profiler.profile_numeric_columns_percent_diff_greater_than_threshold", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be greater than the specified threshold.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_profile_numeric_columns_percent_diff_less_than_or_equal_to_threshold": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-07-27 12:02:02 -0400 1 year, 4 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_profile_numeric_columns_percent_diff_less_than_or_equal_to_threshold.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ProfileNumericColumnsDiffExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler", "dataassistance"], "contributors": ["@stevensecreti"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectProfileNumericColumnsPercentDiffLessThanOrEqualToThreshold", "snake_name": "expect_profile_numeric_columns_percent_diff_less_than_or_equal_to_threshold", "short_description": "Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be less than or equal to the specified threshold.", "docstring": "Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be less than or equal to the specified threshold.\n\nThis expectation takes the percent difference report between the data it is called on and a DataProfiler profile of the same schema loaded from a provided path.\nEach numerical column percent delta will be checked against a user provided dictionary of columns paired with dictionaries of statistics containing a threshold.\nThis function builds upon the custom ProfileNumericColumnsDiff Expectation of Capital One's DataProfiler Expectations.\nIt is expected that a statistic's percent delta for a given column is less than or equal to the specified threshold.\n\n#### Args:\n- profile_path (str): A path to a saved DataProfiler profile object on the local filesystem.\n- limit_check_report_keys (dict[str, dict[str, float]]): A dict, containing column names as keys and dicts as values that contain statistics as keys and thresholds as values\n- mostly (float - optional): a value indicating the lower bound percentage of successful values that must be present to evaluate to success=True.\nvalidator.expect_profile_numeric_columns_percent_diff_less_than_or_equal_to_threshold(\n- profile_path = \"C:/path_to/my_profile.pkl\",\nlimit_check_report_keys = {\n- \"column_one\": {\n- \"min\": 0.5, #Indicating the threshold for the 'min' statistic in 'column_one' is 50%\n},\n- \"*\": {\n- \"*\": .25, #Indicating the threshold for every statistic in every column is 25%\n},\n}\n)\n- Note: In limit_check_report_keys, \"*\" in place of a column denotes a general operator in which the value it stores will be applied to every column in the data that has no explicit key.\n\"*\" in place of a statistic denotes a general operator in which the bounds it stores will be applied to every statistic for the given column that has no explicit key.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "data_profiler.profile_numeric_columns_percent_diff_less_than_or_equal_to_threshold", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be less than or equal to the specified threshold.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_profile_numeric_columns_percent_diff_less_than_threshold": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-07-25 11:46:19 -0400 1 year, 4 months ago", "path": "contrib/capitalone_dataprofiler_expectations/capitalone_dataprofiler_expectations/expectations/expect_profile_numeric_columns_percent_diff_less_than_threshold.py", "package": "capitalone_dataprofiler_expectations", "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "import_module_args": ["capitalone_dataprofiler_expectations.expectations"], "sys_path": "../../contrib/capitalone_dataprofiler_expectations", "exp_type": "Contrib ProfileNumericColumnsDiffExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["dataprofiler", "dataassistance"], "contributors": ["@stevensecreti"], "requirements": ["dataprofiler", "tensorflow", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectProfileNumericColumnsPercentDiffLessThanThreshold", "snake_name": "expect_profile_numeric_columns_percent_diff_less_than_threshold", "short_description": "Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be less than the specified threshold.", "docstring": "Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be less than the specified threshold.\n\nThis expectation takes the percent difference report between the data it is called on and a DataProfiler profile of the same schema loaded from a provided path.\nEach numerical column percent delta will be checked against a user provided dictionary of columns paired with dictionaries of statistics containing a threshold.\nThis function builds upon the custom ProfileNumericColumnsDiff Expectation of Capital One's DataProfiler Expectations.\nIt is expected that a statistic's percent delta for a given column is less than the specified threshold.\n\n#### Args:\n- profile_path (str): A path to a saved DataProfiler profile object on the local filesystem.\n- limit_check_report_keys (dict[str, dict[str, float]]): A dict, containing column names as keys and dicts as values that contain statistics as keys and thresholds as values\n- mostly (float - optional): a value indicating the lower bound percentage of successful values that must be present to evaluate to success=True.\nvalidator.expect_profile_numeric_columns_percent_diff_less_than_threshold(\n- profile_path = \"C:/path_to/my_profile.pkl\",\nlimit_check_report_keys = {\n- \"column_one\": {\n- \"min\": 0.5, #Indicating the threshold for the 'min' statistic in 'column_one' is 50%\n},\n- \"*\": {\n- \"*\": .25, #Indicating the threshold for every statistic in every column is 25%\n},\n}\n)\n- Note: In limit_check_report_keys, \"*\" in place of a column denotes a general operator in which the value it stores will be applied to every column in the data that has no explicit key.\n\"*\" in place of a statistic denotes a general operator in which the bounds it stores will be applied to every statistic for the given column that has no explicit key.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "data_profiler.profile_numeric_columns_percent_diff_less_than_threshold", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a statistic's percent delta for a given column of a DataProfiler percent difference report to be less than the specified threshold.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_column_chisquare_simple_test_p_value_to_be_greater_than": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2023-07-20 13:06:00 -0500 4 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_chisquare_simple_test_p_value_to_be_greater_than.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_chisquare_simple_test_p_value_to_be_greater_than", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib BatchExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["statistical", "test", "testing"], "contributors": ["@HaebichanGX"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnChisquareSimpleTestPValueToBeGreaterThan", "snake_name": "expect_column_chisquare_simple_test_p_value_to_be_greater_than", "short_description": "Expect the chi-squared of 2 columns to have a p-value greater than the provided threshold.", "docstring": "Expect the chi-squared of 2 columns to have a p-value greater than the provided threshold."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column.p_value_greater_than_threshold", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 0, "num_failed": 2, "failing_names": ["basic_positive_test", "basic_negative_test"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the chi-squared of 2 columns to have a p-value greater than the provided threshold.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "Only 0 / 2 tests for pandas are passing", "passed": false}, {"message": "  - Failing: basic_positive_test, basic_negative_test", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": -1.0}, "expect_column_discrete_entropy_to_be_between": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2021-08-18 13:26:02 -0400 2 years, 3 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_discrete_entropy_to_be_between.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_discrete_entropy_to_be_between", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental"], "contributors": ["@edjoesu"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnDiscreteEntropyToBeBetween", "snake_name": "expect_column_discrete_entropy_to_be_between", "short_description": "Expect the column discrete entropy to be between a minimum value and a maximum value.", "docstring": "Expect the column discrete entropy to be between a minimum value and a maximum value.\nThe Shannon entropy of a discrete probability distribution is given by\n- \\sum_{i=1}^{n} P(x_i) * \\log(P(x_i))\nwhere P(x_i) is the probability of occurrence of value x_i.\nFor observed data the P(x_i) are replaced by the empirical frequencies n_{x_i}/N\n\nexpect_column_discrete_entropy_to_be_between is a :func:`column_aggregate_expectation\n<great_expectations.execution_engine.MetaExecutionEngine.column_aggregate_expectation>`.\n\n#### Args:\n- column (str): The column name.\n- min_value (float or None): The minimum value for the column standard deviation.\n- max_value (float or None): The maximum value for the column standard deviation.\n\n#### strict_min (boolean):\nIf True, the column standard deviation must be strictly larger than min_value, default=False\n\n#### strict_max (boolean):\nIf True, the column standard deviation must be strictly smaller than max_value, default=False\n\n#### base (float):\nThe base of the logarithm, default=2\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: `BOOLEAN_ONLY`, `BASIC`, `COMPLETE`, or `SUMMARY`. For more detail, see :ref:`result_format <result_format>`.\n- include_config (boolean): If True, then include the expectation config as part of the result object. For more detail, see :ref:`include_config`.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see :ref:`catch_exceptions`.\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see :ref:`meta`.\n\n#### Returns:\nAn ExpectationSuiteValidationResult\nExact fields vary depending on the values passed to :ref:`result_format <result_format>` and\n:ref:`include_config`, :ref:`catch_exceptions`, and :ref:`meta`.\n\n#### Notes:\n* min_value and max_value are both inclusive unless strict_min or strict_max are set to True.\n* If min_value is None, then max_value is treated as an upper bound\n* If max_value is None, then min_value is treated as a lower bound\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.discrete.entropy", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 3, "num_failed": 1, "failing_names": ["test_empty_column_should_be_zero"]}, {"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column discrete entropy to be between a minimum value and a maximum value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}, {"message": "Only 3 / 4 tests for spark are passing", "passed": false}, {"message": "  - Failing: test_empty_column_should_be_zero", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 9.5}, "expect_column_distribution_to_match_benfords_law": {"updated_at": "2023-04-12 09:23:16 -0600 7 months ago", "created_at": "2022-03-21 11:49:59 -0500 1 year, 8 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_distribution_to_match_benfords_law.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_distribution_to_match_benfords_law", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental"], "contributors": ["@shekark642", "@vinodkri1"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnDistributionToMatchBenfordsLaw", "snake_name": "expect_column_distribution_to_match_benfords_law", "short_description": "Expect column distribution to match Benford's Law.", "docstring": "Expect column distribution to match Benford's Law.\n\nTests whether data matches Benford's Law Fraud Detection Algorithm. Uses a Chi-Square Goodness of Fit test with an 80@ p-value.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column.custom.DistributionMatchesBenfordsLaw", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column distribution to match Benford's Law.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_kurtosis_to_be_between": {"updated_at": "2023-06-02 19:15:21 -0400 6 months ago", "created_at": "2021-02-22 12:26:56 -0700 2 years, 9 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_kurtosis_to_be_between.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_kurtosis_to_be_between", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": [], "contributors": ["@lodeous", "@bragleg", "@rexboyce", "@mkopec87"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnKurtosisToBeBetween", "snake_name": "expect_column_kurtosis_to_be_between", "short_description": "Expect column Kurtosis to be between. Test values are drawn from various distributions (uniform, normal, gamma, student-t).", "docstring": "Expect column Kurtosis to be between. Test values are drawn from various distributions (uniform, normal, gamma, student-t)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.custom.kurtosis", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column Kurtosis to be between. Test values are drawn from various distributions (uniform, normal, gamma, student-t).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 12.0}, "expect_column_pair_values_to_have_difference_of_custom_percentage": {"updated_at": "2023-04-19 09:29:12 -0700 7 months ago", "created_at": "2022-08-05 23:40:04 +0200 1 year, 3 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_pair_values_to_have_difference_of_custom_percentage.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_pair_values_to_have_difference_of_custom_percentage", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnPairMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["basic math", "multi-column expectation"], "contributors": ["@jorgicol", "@exteli"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnPairValuesToHaveDifferenceOfCustomPercentage", "snake_name": "expect_column_pair_values_to_have_difference_of_custom_percentage", "short_description": "Expect two columns to have a row-wise difference of three.", "docstring": "Expect two columns to have a row-wise difference of three."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_pair_values.diff_custom_percentage.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_pair_values.diff_custom_percentage.filtered_row_count", "has_question_renderer": false}, {"name": "column_pair_values.diff_custom_percentage.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect two columns to have a row-wise difference of three.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 8.0}, "expect_column_skew_to_be_between": {"updated_at": "2023-08-29 15:27:34 -0400 3 months ago", "created_at": "2021-02-22 12:26:56 -0700 2 years, 9 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_skew_to_be_between.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_skew_to_be_between", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": [], "contributors": ["@lodeous", "@rexboyce", "@bragleg", "@mkopec87"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnSkewToBeBetween", "snake_name": "expect_column_skew_to_be_between", "short_description": "Expect column skew to be between. Currently tests against Gamma and Beta distributions.", "docstring": "Expect column skew to be between. Currently tests against Gamma and Beta distributions."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.custom.skew", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column skew to be between. Currently tests against Gamma and Beta distributions.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 51.0}, "expect_column_sum_to_be": {"updated_at": "2023-04-12 09:23:16 -0600 7 months ago", "created_at": "2022-03-08 18:52:36 -0500 1 year, 8 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_sum_to_be.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_sum_to_be", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["column aggregate expectation"], "contributors": ["@joshua-stauffer"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnSumToBe", "snake_name": "expect_column_sum_to_be", "short_description": "Expect the sum of a column to be exactly a value.", "docstring": "Expect the sum of a column to be exactly a value."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.sum", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the sum of a column to be exactly a value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for trino are passing", "passed": true}, {"message": "All 2 tests for mssql are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for trino are passing", "passed": true}, {"message": "All 2 tests for mssql are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 33.0}, "expect_column_to_have_no_days_missing": {"updated_at": "2023-05-31 15:51:20 -0400 6 months ago", "created_at": "2022-11-29 20:37:01 +0200 12 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_to_have_no_days_missing.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_to_have_no_days_missing", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["date-column"], "contributors": ["@itaise"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnToHaveNoDaysMissing", "snake_name": "expect_column_to_have_no_days_missing", "short_description": "Expect No missing days in date column.", "docstring": "Expect No missing days in date column."}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column.distinct_dates", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect No missing days in date column.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for redshift are passing", "passed": true}, {"message": "All 3 tests for sqlite are passing", "passed": true}, {"message": "All 3 tests for snowflake are passing", "passed": true}, {"message": "All 3 tests for mysql are passing", "passed": true}, {"message": "All 3 tests for trino are passing", "passed": true}, {"message": "All 3 tests for bigquery are passing", "passed": true}, {"message": "All 3 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for redshift are passing", "passed": true}, {"message": "All 3 tests for sqlite are passing", "passed": true}, {"message": "All 3 tests for snowflake are passing", "passed": true}, {"message": "All 3 tests for mysql are passing", "passed": true}, {"message": "All 3 tests for trino are passing", "passed": true}, {"message": "All 3 tests for bigquery are passing", "passed": true}, {"message": "All 3 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 29.0}, "expect_column_to_have_no_months_missing": {"updated_at": "2023-08-31 01:29:18 +0300 3 months ago", "created_at": "2023-07-21 00:15:56 +0300 4 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_to_have_no_months_missing.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_to_have_no_months_missing", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["date-column"], "contributors": ["@hadasm"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnToHaveNoMonthsMissing", "snake_name": "expect_column_to_have_no_months_missing", "short_description": "    This metric expects data to include dates from consecutive months, with no months missing in", "docstring": "\nThis metric expects data to include dates from consecutive months, with no months missing in\nbetween (relative to the maximal and minimal month existing in the data).\nUser can define a threshold which allows for some months to be missing (equal or lower than the threshold).\nExpectation fails if the number of missing months is over the threshold.\n\n#### Keyword args:\n- threshold (int)\n "}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column.distinct_months", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 0, "num_failed": 4, "failing_names": ["negative_missing_two_months", "positive_missing_two_months", "negative_missing_one_month", "positive_none_missing"]}, {"backend": "sqlite", "num_passed": 0, "num_failed": 4, "failing_names": ["negative_missing_two_months", "positive_missing_two_months", "negative_missing_one_month", "positive_none_missing"]}, {"backend": "snowflake", "num_passed": 0, "num_failed": 4, "failing_names": ["negative_missing_two_months", "positive_missing_two_months", "negative_missing_one_month", "positive_none_missing"]}, {"backend": "mysql", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 0, "num_failed": 4, "failing_names": ["negative_missing_two_months", "positive_missing_two_months", "negative_missing_one_month", "positive_none_missing"]}, {"backend": "postgresql", "num_passed": 0, "num_failed": 4, "failing_names": ["negative_missing_two_months", "positive_missing_two_months", "negative_missing_one_month", "positive_none_missing"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"    This metric expects data to include dates from consecutive months, with no months missing in\"", "passed": false}], "passed": false, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for mysql are passing", "passed": true}, {"message": "All 4 tests for trino are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for mysql are passing", "passed": true}, {"message": "All 4 tests for trino are passing", "passed": true}, {"message": "Only 0 / 4 tests for redshift are passing", "passed": false}, {"message": "  - Failing: negative_missing_two_months, positive_missing_two_months, negative_missing_one_month, positive_none_missing", "passed": false}, {"message": "Only 0 / 4 tests for sqlite are passing", "passed": false}, {"message": "  - Failing: negative_missing_two_months, positive_missing_two_months, negative_missing_one_month, positive_none_missing", "passed": false}, {"message": "Only 0 / 4 tests for snowflake are passing", "passed": false}, {"message": "  - Failing: negative_missing_two_months, positive_missing_two_months, negative_missing_one_month, positive_none_missing", "passed": false}, {"message": "Only 0 / 4 tests for bigquery are passing", "passed": false}, {"message": "  - Failing: negative_missing_two_months, positive_missing_two_months, negative_missing_one_month, positive_none_missing", "passed": false}, {"message": "Only 0 / 4 tests for postgresql are passing", "passed": false}, {"message": "  - Failing: negative_missing_two_months, positive_missing_two_months, negative_missing_one_month, positive_none_missing", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": -14.0}, "expect_column_values_after_split_to_be_in_set": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2023-02-14 03:50:37 +0800 9 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_after_split_to_be_in_set.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_after_split_to_be_in_set", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["pandas"], "contributors": ["@ace-racer"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesAfterSplitToBeInSet", "snake_name": "expect_column_values_after_split_to_be_in_set", "short_description": "Expect values in the column after splitting on a delimiter to be in a pre-defined set.", "docstring": "Expect values in the column after splitting on a delimiter to be in a pre-defined set."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.values_after_split_in_set.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.values_after_split_in_set.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in the column after splitting on a delimiter to be in a pre-defined set.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 5.0}, "expect_column_values_after_split_to_be_unique": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2023-02-14 03:50:37 +0800 9 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_after_split_to_be_unique.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_after_split_to_be_unique", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["pandas"], "contributors": ["@ace-racer"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesAfterSplitToBeUnique", "snake_name": "expect_column_values_after_split_to_be_unique", "short_description": "Expect values in the column after splitting on a delimiter to be unique", "docstring": "Expect values in the column after splitting on a delimiter to be unique"}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.values_after_split_are_unique.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.values_after_split_are_unique.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in the column after splitting on a delimiter to be unique\"", "passed": false}], "passed": false, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 5.0}, "expect_column_values_not_to_be_future_date": {"updated_at": "2023-11-15 11:15:09 -0800 2 days ago", "created_at": "2023-02-16 04:45:19 +0530 9 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_not_to_be_future_date.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_not_to_be_future_date", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental", "typed-entities"], "contributors": ["@prachijain136", "@mcornew", "@m-Chetan", "@Pritampyaare"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesNotToBeFutureDate", "snake_name": "expect_column_values_not_to_be_future_date", "short_description": "Expect column values not to be the future date.", "docstring": "Expect column values not to be the future date."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_date.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_date.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 2, "num_failed": 1, "failing_names": ["basic_negative_test"]}, {"backend": "bigquery", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values not to be the future date.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for redshift are passing", "passed": true}, {"message": "All 3 tests for sqlite are passing", "passed": true}, {"message": "All 3 tests for snowflake are passing", "passed": true}, {"message": "All 3 tests for mysql are passing", "passed": true}, {"message": "All 3 tests for trino are passing", "passed": true}, {"message": "All 3 tests for mssql are passing", "passed": true}, {"message": "All 3 tests for bigquery are passing", "passed": true}, {"message": "All 3 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for redshift are passing", "passed": true}, {"message": "All 3 tests for sqlite are passing", "passed": true}, {"message": "All 3 tests for snowflake are passing", "passed": true}, {"message": "All 3 tests for mysql are passing", "passed": true}, {"message": "All 3 tests for trino are passing", "passed": true}, {"message": "All 3 tests for mssql are passing", "passed": true}, {"message": "All 3 tests for bigquery are passing", "passed": true}, {"message": "All 3 tests for postgresql are passing", "passed": true}, {"message": "Only 2 / 3 tests for pandas are passing", "passed": false}, {"message": "  - Failing: basic_negative_test", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 35.5}, "expect_column_values_number_of_decimal_places_to_equal": {"updated_at": "2023-02-02 21:45:27 -0500 10 months ago", "created_at": "2021-01-28 15:09:39 -0600 2 years, 10 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_number_of_decimal_places_to_equal.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_number_of_decimal_places_to_equal", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental", "precision", "formatting", "floating_point", "hackathon-20200123"], "contributors": ["@samsonq", "@spbail", "@Lord-of-Bugs", "@BladderBoy", "@Rim921"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesNumberOfDecimalPlacesToEqual", "snake_name": "expect_column_values_number_of_decimal_places_to_equal", "short_description": "Expect all values in a numeric column to have the same number of specified decimal places.", "docstring": "Expect all values in a numeric column to have the same number of specified decimal places.\n\nThis expectation tests if all the values in a column has the same number of decimal places as the\ninputted number of decimal places. In the case where the decimal places are all 0s (an integer),\nthe value automatically passes. Currently have not figured out how to preserve 0s in decimal to string conversion.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.decimal_places_equal.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.decimal_places_equal.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect all values in a numeric column to have the same number of specified decimal places.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 5.0}, "expect_column_values_to_be_alphabetical": {"updated_at": "2023-10-03 15:00:33 -0400 6 weeks ago", "created_at": "2021-02-12 15:20:18 -0600 2 years, 9 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_be_alphabetical.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_be_alphabetical", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental"], "contributors": ["@sethdmay", "@maximetokman", "@Harriee02"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeAlphabetical", "snake_name": "expect_column_values_to_be_alphabetical", "short_description": "Expect values to be alphabetical.", "docstring": "Expect values to be alphabetical.\n\nGiven a list of string values, check if the list is alphabetical, either forwards or backwards (specified with the\n`reverse` parameter). Comparison is case-insensitive. Using `mostly` will give you how many items are alphabetical\nrelative to the immediately previous item in the list.\n\n#### Args:\n- column (str): The column name\n\n#### Keyword Args:\n- reverse (boolean): Checks for Z to A alphabetical if True, otherwise checks A to Z\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.are_alphabetical.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.are_alphabetical.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values to be alphabetical.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 7.0}, "expect_column_values_to_be_edtf_parseable": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2021-02-19 04:52:20 +0100 2 years, 9 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_be_edtf_parseable.py", "package": "great_expectations_experimental", "requirements": ["edtf_validate"], "import_module_args": ["expectations.expect_column_values_to_be_edtf_parseable", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["edtf", "datetime", "glam"], "contributors": ["@mielvds"], "requirements": ["edtf_validate"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeEdtfParseable", "snake_name": "expect_column_values_to_be_edtf_parseable", "short_description": "Expect column entries to be parsable using the [Extended Date/Time Format (EDTF) specification](https://www.loc.gov/standards/datetime/).", "docstring": "Expect column entries to be parsable using the [Extended Date/Time Format (EDTF) specification](https://www.loc.gov/standards/datetime/).\n\nexpect_column_values_to_be_edtf_parseable is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n- level (int or None): The EDTF level to comply to.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.edtf_parseable.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.edtf_parseable.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 1, "failing_names": ["positive_test_with_mostly"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column entries to be parsable using the [Extended Date/Time Format (EDTF) specification](https://www.loc.gov/standards/datetime/).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "Only 4 / 5 tests for pandas are passing", "passed": false}, {"message": "  - Failing: positive_test_with_mostly", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.5}, "expect_column_values_to_be_hexadecimal": {"updated_at": "2023-01-12 14:13:11 -0600 10 months ago", "created_at": "2022-06-03 16:43:12 -0400 1 year, 5 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_be_hexadecimal.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_be_hexadecimal", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib RegexBasedColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental"], "contributors": ["@andrewsx", "@mkopec87"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeHexadecimal", "snake_name": "expect_column_values_to_be_hexadecimal", "short_description": "Expect column values to be valid hexadecimals.", "docstring": "Expect column values to be valid hexadecimals."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_hexadecimal_number_regex.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_hexadecimal_number_regex.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 6, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid hexadecimals.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 6 tests for redshift are passing", "passed": true}, {"message": "All 6 tests for spark are passing", "passed": true}, {"message": "All 6 tests for sqlite are passing", "passed": true}, {"message": "All 6 tests for mysql are passing", "passed": true}, {"message": "All 6 tests for trino are passing", "passed": true}, {"message": "All 6 tests for pandas are passing", "passed": true}, {"message": "All 6 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 6 tests for redshift are passing", "passed": true}, {"message": "All 6 tests for spark are passing", "passed": true}, {"message": "All 6 tests for sqlite are passing", "passed": true}, {"message": "All 6 tests for mysql are passing", "passed": true}, {"message": "All 6 tests for trino are passing", "passed": true}, {"message": "All 6 tests for pandas are passing", "passed": true}, {"message": "All 6 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 52.0}, "expect_column_values_to_be_in_set_spark_optimized": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-08-05 15:29:43 -0600 1 year, 3 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_be_in_set_spark_optimized.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_be_in_set_spark_optimized", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["column values in set", "experimental", "spark optimized"], "contributors": ["@austiezr", "@derek-hk"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeInSetSparkOptimized", "snake_name": "expect_column_values_to_be_in_set_spark_optimized", "short_description": "Expect each column value to be in a given set; optimized using **join** for spark backends.", "docstring": "Expect each column value to be in a given set; optimized using **join** for spark backends.\n\n#### Args:\n- column (str): The column name.\n- value_set (set-like): A set of objects used for comparison.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n- strict (boolean or None) : If True, percentage of values in set must exceed mostly.\n "}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.in_set.spark_optimized", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect each column value to be in a given set; optimized using **join** for spark backends.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for spark are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for spark are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 5.0}, "expect_column_values_to_be_normally_distributed": {"updated_at": "2023-06-02 19:15:21 -0400 6 months ago", "created_at": "2021-02-01 10:57:39 -0500 2 years, 10 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_be_normally_distributed.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_be_normally_distributed", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental"], "contributors": ["@ljohnston931", "@rexboyce", "@lodeous", "@sophiarawlings", "@vtdangg"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeNormallyDistributed", "snake_name": "expect_column_values_to_be_normally_distributed", "short_description": "Expect column values to be normally distributed. NaN values are omitted.", "docstring": "Expect column values to be normally distributed. NaN values are omitted."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column.custom.normally_distributed", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be normally distributed. NaN values are omitted.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_string_integers_increasing": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2021-11-16 15:04:04 -0700 2 years ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_be_string_integers_increasing.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_be_string_integers_increasing", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "column map expectation"], "contributors": ["@austiezr"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeStringIntegersIncreasing", "snake_name": "expect_column_values_to_be_string_integers_increasing", "short_description": "Expect a column to contain string-typed integers to be increasing.", "docstring": "Expect a column to contain string-typed integers to be increasing.\n\nexpect_column_values_to_be_string_integers_increasing is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n\n#### Keyword Args:\n- strictly (Boolean or None): If True, values must be strictly greater than previous values\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_be_decreasing](https://greatexpectations.io/expectations/expect_column_values_to_be_decreasing)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.string_integers.increasing.map", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a column to contain string-typed integers to be increasing.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 12.0}, "expect_column_values_to_be_valid_arn": {"updated_at": "2023-01-12 14:13:11 -0600 10 months ago", "created_at": "2022-06-14 10:00:45 -0400 1 year, 5 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_be_valid_arn.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_be_valid_arn", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib RegexBasedColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["amazon", "arn", "expectation"], "contributors": ["@rdodev", "@mkopec87"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidArn", "snake_name": "expect_column_values_to_be_valid_arn", "short_description": "Expect values in this column to be a valid amazon arn.", "docstring": "Expect values in this column to be a valid amazon arn."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_amazon_resource_name_regex.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_amazon_resource_name_regex.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 3, "num_failed": 1, "failing_names": ["basic_positive_test"]}, {"backend": "spark", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be a valid amazon arn.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for sqlite are passing", "passed": true}, {"message": "All 4 tests for mysql are passing", "passed": true}, {"message": "All 4 tests for trino are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}, {"message": "All 4 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for sqlite are passing", "passed": true}, {"message": "All 4 tests for mysql are passing", "passed": true}, {"message": "All 4 tests for trino are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}, {"message": "All 4 tests for postgresql are passing", "passed": true}, {"message": "Only 3 / 4 tests for redshift are passing", "passed": false}, {"message": "  - Failing: basic_positive_test", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 35.5}, "expect_column_values_to_be_valid_crc32": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-08-03 17:40:35 +0300 1 year, 3 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_be_valid_crc32.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_be_valid_crc32", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "typed-entities"], "contributors": ["@sp1thas"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidCrc32", "snake_name": "expect_column_values_to_be_valid_crc32", "short_description": "Expect column values to be hashes that match valid CRC32 format.", "docstring": "Expect column values to be hashes that match valid CRC32 format."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_crc32.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_crc32.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be hashes that match valid CRC32 format.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_github_username": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-06-14 09:45:13 -0400 1 year, 5 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_be_valid_github_username.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_be_valid_github_username", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "expectation", "validation"], "contributors": ["@rdodev"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidGithubUsername", "snake_name": "expect_column_values_to_be_valid_github_username", "short_description": "Expect column values to be valid github users.", "docstring": "Expect column values to be valid github users."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_github_username.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_github_username.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid github users.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_iata_code": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-06-14 09:56:52 -0400 1 year, 5 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_be_valid_iata_code.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_be_valid_iata_code", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "expectation", "validation"], "contributors": ["@rdodev"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidIataCode", "snake_name": "expect_column_values_to_be_valid_iata_code", "short_description": "Expect column values to be valid IATA airport codes.", "docstring": "Expect column values to be valid IATA airport codes."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_iata_code.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_iata_code.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid IATA airport codes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_json": {"updated_at": "2023-01-04 20:52:17 -0500 11 months ago", "created_at": "2022-06-15 12:01:48 -0400 1 year, 5 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_be_valid_json.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_be_valid_json", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "expectation", "json"], "contributors": ["@rdodev"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidJson", "snake_name": "expect_column_values_to_be_valid_json", "short_description": "Expect column values to be valid json.", "docstring": "Expect column values to be valid json."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.is_valid_json.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.is_valid_json.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid json.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_scientific_notation": {"updated_at": "2023-01-12 14:13:11 -0600 10 months ago", "created_at": "2022-06-14 11:31:13 -0400 1 year, 5 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_be_valid_scientific_notation.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_be_valid_scientific_notation", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib RegexBasedColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["scientific_notation", "expectation"], "contributors": ["@rdodev", "@mkopec87"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidScientificNotation", "snake_name": "expect_column_values_to_be_valid_scientific_notation", "short_description": "Expect values in this column to be a valid scientific notation string.", "docstring": "Expect values in this column to be a valid scientific notation string."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_scientific_notation_regex.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_scientific_notation_regex.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be a valid scientific notation string.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for spark are passing", "passed": true}, {"message": "All 3 tests for sqlite are passing", "passed": true}, {"message": "All 3 tests for mysql are passing", "passed": true}, {"message": "All 3 tests for trino are passing", "passed": true}, {"message": "All 3 tests for pandas are passing", "passed": true}, {"message": "All 3 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for spark are passing", "passed": true}, {"message": "All 3 tests for sqlite are passing", "passed": true}, {"message": "All 3 tests for mysql are passing", "passed": true}, {"message": "All 3 tests for trino are passing", "passed": true}, {"message": "All 3 tests for pandas are passing", "passed": true}, {"message": "All 3 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 27.0}, "expect_column_values_to_change_between": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2021-05-11 02:13:20 +1200 2 years, 6 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_change_between.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_change_between", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental"], "contributors": ["@maikelpenz"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToChangeBetween", "snake_name": "expect_column_values_to_change_between", "short_description": "Expect the numeric difference between current and previous row is within expected range.", "docstring": "Expect the numeric difference between current and previous row is within expected range.\n\n#### E.g:\ninput = [1,2,5]\nexpected difference range = between 1 and 2\nresult = false because the difference between 2 and 5 is not between 1 and 2\n\n#### Args:\n- column (str): The column name\n\n#### Keyword Args:\n- from_value (float): low range value\n- to_value (float): high range value\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.change_between.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.change_between.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the numeric difference between current and previous row is within expected range.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 5.0}, "expect_column_values_to_follow_rule": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2021-02-18 11:14:33 -0800 2 years, 9 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_follow_rule.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_follow_rule", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental", "hackathon-20210206"], "contributors": ["@firenoo", "@rldejournett", "@talagluck"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToFollowRule", "snake_name": "expect_column_values_to_follow_rule", "short_description": "Expect that all rows of a column satisfy a given input rule that specifies ranges and expressions.", "docstring": "Expect that all rows of a column satisfy a given input rule that specifies ranges and expressions.\n\n#### Args:\n- column (str): The column name\n\n#### Keyword Args:\n- rule (dict): Dict with keys \"ranges\" and \"expr\". ranges is a dict whos keys are variables in the expression (expr) and whos values are an empty list or two-item list of indicies. expr is a string in the form of a Python expression that uses the variable names in the ranges dict and will be parsed with exec(); each variable is passed in as a string\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.expect_column_values_to_follow_rule.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.expect_column_values_to_follow_rule.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect that all rows of a column satisfy a given input rule that specifies ranges and expressions.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 5.0}, "expect_column_values_to_match_powers_of_base": {"updated_at": "2023-01-04 20:52:17 -0500 11 months ago", "created_at": "2022-06-02 12:59:38 -0400 1 year, 6 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_match_powers_of_base.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_match_powers_of_base", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["beta"], "contributors": ["@rifatKomodoDragon"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToMatchPowersOfBase", "snake_name": "expect_column_values_to_match_powers_of_base", "short_description": "Expect column values to match powers of Base (Base ** power == column value).", "docstring": "Expect column values to match powers of Base (Base ** power == column value)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_powers_of_base.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_powers_of_base.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to match powers of Base (Base ** power == column value).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 7.0}, "expect_column_values_to_match_thai": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2023-03-02 22:50:09 +0700 9 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_match_thai.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_match_thai", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib RegexBasedColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["regex", "thai"], "contributors": ["@swittchawa"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToMatchThai", "snake_name": "expect_column_values_to_match_thai", "short_description": "Expect column values to contain Thai Language.", "docstring": "Expect column values to contain Thai Language.\n\n#### Args:\n- column (str): A integer column that consist of Thai language.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_regex_name_regex.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_regex_name_regex.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to contain Thai Language.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 9.0}, "expect_column_values_to_not_be_null_and_column_to_not_be_empty": {"updated_at": "2023-06-13 12:48:19 -0400 5 months ago", "created_at": "2023-03-27 12:14:30 -0300 8 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_not_be_null_and_column_to_not_be_empty.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_not_be_null_and_column_to_not_be_empty", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental", "column map expectation"], "contributors": ["@tmilitino"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToNotBeNullAndColumnToNotBeEmpty", "snake_name": "expect_column_values_to_not_be_null_and_column_to_not_be_empty", "short_description": "Expect column values to not be null and column to not be empty.", "docstring": "Expect column values to not be null and column to not be empty.\n\nTo be counted as an exception, values must be explicitly null or missing, such as a NULL in PostgreSQL or an\nnp.NaN in pandas. Empty strings don't count as null unless they have been coerced to a null type.\n\nexpect_column_values_to_not_be_null_and_column_to_not_be_empty is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_be_null](https://greatexpectations.io/expectations/expect_column_values_to_be_null)\n- [expect_column_values_not_to_be_null](https://greatexpectations.io/expectations/expect_column_values_not_to_be_null)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.nonnull.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 2, "num_failed": 1, "failing_names": ["has_null"]}, {"backend": "sqlite", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to not be null and column to not be empty.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for redshift are passing", "passed": true}, {"message": "All 3 tests for sqlite are passing", "passed": true}, {"message": "All 3 tests for snowflake are passing", "passed": true}, {"message": "All 3 tests for mysql are passing", "passed": true}, {"message": "All 3 tests for trino are passing", "passed": true}, {"message": "All 3 tests for mssql are passing", "passed": true}, {"message": "All 3 tests for pandas are passing", "passed": true}, {"message": "All 3 tests for bigquery are passing", "passed": true}, {"message": "All 3 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for redshift are passing", "passed": true}, {"message": "All 3 tests for sqlite are passing", "passed": true}, {"message": "All 3 tests for snowflake are passing", "passed": true}, {"message": "All 3 tests for mysql are passing", "passed": true}, {"message": "All 3 tests for trino are passing", "passed": true}, {"message": "All 3 tests for mssql are passing", "passed": true}, {"message": "All 3 tests for pandas are passing", "passed": true}, {"message": "All 3 tests for bigquery are passing", "passed": true}, {"message": "All 3 tests for postgresql are passing", "passed": true}, {"message": "Only 2 / 3 tests for spark are passing", "passed": false}, {"message": "  - Failing: has_null", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 40.5}, "expect_column_values_to_not_be_outliers": {"updated_at": "2023-02-02 21:45:27 -0500 10 months ago", "created_at": "2021-02-22 12:26:56 -0700 2 years, 9 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_not_be_outliers.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_not_be_outliers", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": [], "contributors": ["@rexboyce", "@lodeous", "@bragleg"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToNotBeOutliers", "snake_name": "expect_column_values_to_not_be_outliers", "short_description": "Expect Column Values to not be outliers.", "docstring": "Expect Column Values to not be outliers.\n\n#### Args:\n- column (str): The column name\n\n#### Keyword Args:\n- method (str): Either \"std\" (standard deviation) or \"iqr\" (inter-quantile range)\n- multiplier (float): multiplier\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.not_outliers.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.not_outliers.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 6, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect Column Values to not be outliers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 6 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 6 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 8.0}, "expect_column_values_to_not_contain_character": {"updated_at": "2023-02-02 21:45:27 -0500 10 months ago", "created_at": "2021-01-29 09:40:37 -0800 2 years, 10 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_not_contain_character.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_not_contain_character", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental", "hackathon-20200123"], "contributors": ["@jsteinberg4", "@vraimondi04", "@talagluck"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToNotContainCharacter", "snake_name": "expect_column_values_to_not_contain_character", "short_description": "Expect the set of column values to not contain a given character.", "docstring": "Expect the set of column values to not contain a given character.\n\nexpect_column_values_to_not_contain_character is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The provided column name\n- character (str): A character to test for the nonexistence of\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.not_contain_character.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.not_contain_character.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 3, "num_failed": 1, "failing_names": ["test_for_at_symbol"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the set of column values to not contain a given character.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "Only 3 / 4 tests for pandas are passing", "passed": false}, {"message": "  - Failing: test_for_at_symbol", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 3.5}, "expect_column_values_to_not_contain_special_characters": {"updated_at": "2023-08-12 13:17:16 -0400 3 months ago", "created_at": "2021-12-01 11:14:18 +1300 2 years ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_values_to_not_contain_special_characters.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_values_to_not_contain_special_characters", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental expectation", "column map expectation", "special characters"], "contributors": ["@jaibirsingh", "@calvingdu"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToNotContainSpecialCharacters", "snake_name": "expect_column_values_to_not_contain_special_characters", "short_description": "Expect column entries to not contain special characters.", "docstring": "Expect column entries to not contain special characters.\n\n#### Args:\n- column (str): The column name\n\n#### Keyword Args:\n- allowed_characters (list): A list of characters that will be ignored when validating that a column doesn't have special characters\n\nmostly (None or a float value between 0 and 1): Successful if at least mostly fraction of values match the expectation For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.not_contain_special_character.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.not_contain_special_character.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 6, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column entries to not contain special characters.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 6 tests for spark are passing", "passed": true}, {"message": "All 6 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 6 tests for spark are passing", "passed": true}, {"message": "All 6 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 16.0}, "expect_column_wasserstein_distance_to_be_less_than": {"updated_at": "2023-06-02 19:15:21 -0400 6 months ago", "created_at": "2021-01-22 20:03:05 -0700 2 years, 10 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_column_wasserstein_distance_to_be_less_than.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_column_wasserstein_distance_to_be_less_than", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": [], "contributors": ["rexboyce", "abegong", "lodeous"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnWassersteinDistanceToBeLessThan", "snake_name": "expect_column_wasserstein_distance_to_be_less_than", "short_description": "Expect that the Wasserstein Distance of the specified column with respect to an optional partition object to be lower than the provided value.", "docstring": "Expect that the Wasserstein Distance of the specified column with respect to an optional partition object to be lower than the provided value.\n\n#### See Also:\n- [partition objects for distributional Expectations](https://docs.greatexpectations.io/docs/reference/expectations/distributional_expectations/#partition-objects)\n- [Wasserstein Metric on Wikipedia](https://en.wikipedia.org/wiki/Wasserstein_metric)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column.custom.wasserstein", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect that the Wasserstein Distance of the specified column with respect to an optional partition object to be lower than the provided value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 5.0}, "expect_day_sum_to_be_close_to_equivalent_week_day_mean": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-12-30 19:45:22 +0200 11 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_day_sum_to_be_close_to_equivalent_week_day_mean.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_day_sum_to_be_close_to_equivalent_week_day_mean", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib QueryExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["query-based"], "contributors": ["@itaise", "@hadasm"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectDaySumToBeCloseToEquivalentWeekDayMean", "snake_name": "expect_day_sum_to_be_close_to_equivalent_week_day_mean", "short_description": "Expect the daily sums of the given column to be close to the average sums calculated 4 weeks back.", "docstring": "Expect the daily sums of the given column to be close to the average sums calculated 4 weeks back.\n\nThis metric expects daily sums of the given column, to be close to the average sums calculated 4 weeks back,\nrespective to the specific day of the week.\nThe expectation fails if the difference in percentage ((current_sum - average_sum) / average_sum) is more than the\nthreshold given by user (default value is 25%).\nThe threshold parameter should be given in fraction and not percent, i.e. for 25% define threshold = 0.25.\n\n#### Keyword args:\n- - threshold (float; default = 0.25): threshold of difference between current and past weeks over which expectation fails\n- - weeks_back (int; default = 4): how many weeks back to compare the current metric with\n "}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "query.template_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the daily sums of the given column to be close to the average sums calculated 4 weeks back.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 50.0}, "expect_foreign_keys_in_column_a_to_exist_in_column_b": {"updated_at": "2023-09-19 18:42:35 -0400 8 weeks ago", "created_at": "2022-03-21 11:49:59 -0500 1 year, 8 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_foreign_keys_in_column_a_to_exist_in_column_b.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_foreign_keys_in_column_a_to_exist_in_column_b", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental", "help_wanted"], "contributors": ["@robertparker"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectForeignKeysInColumnAToExistInColumnB", "snake_name": "expect_foreign_keys_in_column_a_to_exist_in_column_b", "short_description": "Expect foreign keys in a column to exist in another specified column.", "docstring": "Expect foreign keys in a column to exist in another specified column.\n\nEnsure that values in the column of interest (ColumnA) are in a valueset provided as a dataframe (df parameter) + column (column_B parameter) or as a list of elements supported by pandas.DataFrame() (e.g. list of dicts [{\"col_name\": value},], list of tuples [(value, value), (value, value)]. This is a very experimental implementation to describe the functionality, but this expectation should be revisited once cross-table expectation templates are available.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.foreign_key_in_other_col.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.foreign_key_in_other_col.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect foreign keys in a column to exist in another specified column.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_multicolumn_datetime_difference_in_months": {"updated_at": "2023-11-03 01:25:31 +1100 2 weeks ago", "created_at": "2023-04-08 00:23:51 +1000 7 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_multicolumn_datetime_difference_in_months.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_multicolumn_datetime_difference_in_months", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib MulticolumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["multi-column expectation", "multi-column column datetime difference in months"], "contributors": ["@tb102122"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectMulticolumnDatetimeDifferenceInMonths", "snake_name": "expect_multicolumn_datetime_difference_in_months", "short_description": "Expect the difference of 2 datetime columns is equal to another column in month.", "docstring": "Expect the difference of 2 datetime columns is equal to another column in month.\n\nThis means that for each row, we expect end_datetime - start_datetime = gap (in months)\n\n#### Args:\n\nstart_datetime (datetime): The first datetime column to compare.\nend_datetime (datetime): The second datetime column to compare.\ngap (int): The number of months that the difference between start_datetime and end_datetime should be.\nthreshold (int): (Optional) to adjust sensitivity of check e.g. dates are at the beginning and end of the months.\n\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "multicolumn_values.column_datetime_difference_in_months.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "multicolumn_values.column_datetime_difference_in_months.filtered_row_count", "has_question_renderer": false}, {"name": "multicolumn_values.column_datetime_difference_in_months.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the difference of 2 datetime columns is equal to another column in month.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_multicolumn_datetime_difference_to_be_less_than_two_months": {"updated_at": "2023-11-16 15:09:44 -0800 10 hours ago", "created_at": "2023-11-16 15:09:44 -0800 10 hours ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_multicolumn_datetime_difference_to_be_less_than_two_months.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_multicolumn_datetime_difference_to_be_less_than_two_months", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib MulticolumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["multi-column expectation", "multi-column column datetime difference to be less than two months"], "contributors": ["@kcs-rohankolappa"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectMulticolumnDatetimeDifferenceToBeLessThanTwoMonths", "snake_name": "expect_multicolumn_datetime_difference_to_be_less_than_two_months", "short_description": "Expect the difference of 2 datetime columns to be less than or equal to 2 months.", "docstring": "Expect the difference of 2 datetime columns to be less than or equal to 2 months.\n\nThis means that for each row, we expect end_datetime - start_datetime <= 2 (in months)\n\n#### Args:\n\nstart_datetime (datetime): The first datetime column to compare.\nend_datetime (datetime): The second datetime column to compare.\n\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "multicolumn_values.column_datetime_difference_to_be_less_than_two_months.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "multicolumn_values.column_datetime_difference_to_be_less_than_two_months.filtered_row_count", "has_question_renderer": false}, {"name": "multicolumn_values.column_datetime_difference_to_be_less_than_two_months.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the difference of 2 datetime columns to be less than or equal to 2 months.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 5.0}, "expect_multicolumn_sum_values_to_be_between": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2023-03-01 21:44:55 +0700 9 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_multicolumn_sum_values_to_be_between.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_multicolumn_sum_values_to_be_between", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib MulticolumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["multi-column sum to be between min and maxmulti-column expectation"], "contributors": ["@swittchawa"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectMulticolumnSumValuesToBeBetween", "snake_name": "expect_multicolumn_sum_values_to_be_between", "short_description": "Expect a sum of values over the columns to be between max and min values.", "docstring": "Expect a sum of values over the columns to be between max and min values.\n\nmin_value <= SUM(col_a, cob_b, cob_c, ...) <= max_value\n\n#### Args:\n- column_list (list of str): A list of 2 or more integer columns\n- min_value (int): A value that the sum of values over the column must be equal to or more than the given value\n- max_value (int): A value that the sum of values over the column must be equal to or less than the given value\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "multicolumn_values.sum_values_to_be_between_max_and_min.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "multicolumn_values.sum_values_to_be_between_max_and_min.filtered_row_count", "has_question_renderer": false}, {"name": "multicolumn_values.sum_values_to_be_between_max_and_min.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a sum of values over the columns to be between max and min values.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 12.0}, "expect_multicolumn_sum_values_to_be_equal_to_single_column": {"updated_at": "2023-10-06 07:33:38 -0700 6 weeks ago", "created_at": "2022-12-01 00:06:05 +0200 12 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_multicolumn_sum_values_to_be_equal_to_single_column.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_multicolumn_sum_values_to_be_equal_to_single_column", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib MulticolumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["multi-column expectation", "multi-column sum values to be equal to single column"], "contributors": ["@calvingdu", "@AsaFLachisch", "@mkopec87"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectMulticolumnSumValuesToBeEqualToSingleColumn", "snake_name": "expect_multicolumn_sum_values_to_be_equal_to_single_column", "short_description": "Expect a sum of columns to be equal to other column (in a row perspective).", "docstring": "Expect a sum of columns to be equal to other column (in a row perspective).\n\nThis means that for each row, we expect col_a + col_b + ... + col_n-1 == col_n\n\n#### Args:\n- column_list (list of str): A list of 2 or more int or float columns, in which we expect the sum of the first n-1th columns to be equal to the nth column. This means that if one wants to compare between the sum of n-1 columns and the nth column, it needs to put the nth column at the end of the list.\n- additional_value (optional): A numeric value that is included in the calculation to equal the nth column. The calculation becomes col_a + col_b + ... + col_n-1 + additional_value == col_n\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "multicolumn_values.sum_values_equal_to_single_column.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "multicolumn_values.sum_values_equal_to_single_column.filtered_row_count", "has_question_renderer": false}, {"name": "multicolumn_values.sum_values_equal_to_single_column.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 10, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a sum of columns to be equal to other column (in a row perspective).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 10 tests for redshift are passing", "passed": true}, {"message": "All 10 tests for spark are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 10 tests for snowflake are passing", "passed": true}, {"message": "All 10 tests for mysql are passing", "passed": true}, {"message": "All 10 tests for trino are passing", "passed": true}, {"message": "All 10 tests for mssql are passing", "passed": true}, {"message": "All 10 tests for pandas are passing", "passed": true}, {"message": "All 10 tests for bigquery are passing", "passed": true}, {"message": "All 10 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 10 tests for redshift are passing", "passed": true}, {"message": "All 10 tests for spark are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 10 tests for snowflake are passing", "passed": true}, {"message": "All 10 tests for mysql are passing", "passed": true}, {"message": "All 10 tests for trino are passing", "passed": true}, {"message": "All 10 tests for mssql are passing", "passed": true}, {"message": "All 10 tests for pandas are passing", "passed": true}, {"message": "All 10 tests for bigquery are passing", "passed": true}, {"message": "All 10 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 113.0}, "expect_multicolumn_values_not_to_be_all_null": {"updated_at": "2023-11-15 21:53:46 +0200 2 days ago", "created_at": "2023-01-30 13:42:21 -0500 10 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_multicolumn_values_not_to_be_all_null.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_multicolumn_values_not_to_be_all_null", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib MulticolumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["null_check"], "contributors": ["@liyusa", "@itaise"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectMulticolumnValuesNotToBeAllNull", "snake_name": "expect_multicolumn_values_not_to_be_all_null", "short_description": "Expect the certain set of columns not to be null at the same time.", "docstring": "Expect the certain set of columns not to be null at the same time."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "multicolumn_values.not_all_null.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "multicolumn_values.not_all_null.filtered_row_count", "has_question_renderer": false}, {"name": "multicolumn_values.not_all_null.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "sqlite", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the certain set of columns not to be null at the same time.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for sqlite are passing", "passed": true}, {"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for sqlite are passing", "passed": true}, {"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 11.0}, "expect_multicolumn_values_to_be_equal": {"updated_at": "2023-09-02 05:30:13 +0530 3 months ago", "created_at": "2023-08-17 03:08:33 +0530 3 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_multicolumn_values_to_be_equal.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_multicolumn_values_to_be_equal", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib MulticolumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["multicolumn-map-expectation", "experimental"], "contributors": ["@karthigaiselvanm", "@jayamnatraj"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectMulticolumnValuesToBeEqual", "snake_name": "expect_multicolumn_values_to_be_equal", "short_description": "Expect the list of multicolumn values to be equal.", "docstring": "Expect the list of multicolumn values to be equal.\n\nTo be counted as an exception if any one column in the given column list is not equal to any other column in the list\n\nexpect_multicolumn_values_to_be_equal is a [Multicolumn Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_multicolumn_map_expectations).\n\n#### Args:\n- column_list (List): The list of column names.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions] (https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format , include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_pair_values_to_be_equal](https://greatexpectations.io/expectations/expect_column_pair_values_to_be_equal)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "multicolumn_values_to_be_equal.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "multicolumn_values_to_be_equal.filtered_row_count", "has_question_renderer": false}, {"name": "multicolumn_values_to_be_equal.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 0, "num_failed": 2, "failing_names": ["basic_positive_test", "basic_negative_test"]}, {"backend": "spark", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 0, "num_failed": 2, "failing_names": ["basic_positive_test", "basic_negative_test"]}, {"backend": "mssql", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the list of multicolumn values to be equal.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for mssql are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for mssql are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}, {"message": "Only 0 / 2 tests for redshift are passing", "passed": false}, {"message": "  - Failing: basic_positive_test, basic_negative_test", "passed": false}, {"message": "Only 0 / 2 tests for trino are passing", "passed": false}, {"message": "  - Failing: basic_positive_test, basic_negative_test", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 23.0}, "expect_queried_column_list_to_be_unique": {"updated_at": "2023-04-12 08:43:18 -0500 7 months ago", "created_at": "2022-12-02 17:40:18 +0200 12 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_queried_column_list_to_be_unique.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_queried_column_list_to_be_unique", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib QueryExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["query-based"], "contributors": ["@itaise", "@maayaniti"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectQueriedColumnListToBeUnique", "snake_name": "expect_queried_column_list_to_be_unique", "short_description": "Expect multiple columns (such as a compound key) to be unique.", "docstring": "Expect multiple columns (such as a compound key) to be unique.\n\n#### Args:\n- template_dict: dict with the following keys: column_list (columns to check uniqueness on separated by comma)\n "}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "query.template_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect multiple columns (such as a compound key) to be unique.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for redshift are passing", "passed": true}, {"message": "All 3 tests for spark are passing", "passed": true}, {"message": "All 3 tests for sqlite are passing", "passed": true}, {"message": "All 3 tests for trino are passing", "passed": true}, {"message": "All 3 tests for bigquery are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for redshift are passing", "passed": true}, {"message": "All 3 tests for spark are passing", "passed": true}, {"message": "All 3 tests for sqlite are passing", "passed": true}, {"message": "All 3 tests for trino are passing", "passed": true}, {"message": "All 3 tests for bigquery are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 22.0}, "expect_queried_column_pair_values_to_be_both_filled_or_null": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2023-06-21 02:13:29 +0300 5 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_queried_column_pair_values_to_be_both_filled_or_null.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_queried_column_pair_values_to_be_both_filled_or_null", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib QueryExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["query-based"], "contributors": ["@eden-o"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectQueriedColumnPairValuesToBeBothFilledOrNull", "snake_name": "expect_queried_column_pair_values_to_be_both_filled_or_null", "short_description": "Expect the values of a pair of columns to be either both filled or empty simultaneously.", "docstring": "Expect the values of a pair of columns to be either both filled or empty simultaneously.\n\nIt checks if 2 columns are aligned - the values of each row need to either be both empty or filled.\nThe expectation will fail if there's at least one row where one column is filled and the other isn't.\n\n#### Args:\n- template_dict: dict with the following keys: column_a (str): first column name, to compare values against column_b\n- column_b (str): second column name, to compare values against column_a\n\n#### Returns:\nNone\n "}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "query.template_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "sqlite", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the values of a pair of columns to be either both filled or empty simultaneously.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for sqlite are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for sqlite are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 7.0}, "expect_queried_column_pair_values_to_have_diff": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-08-21 17:20:32 -0600 1 year, 3 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_queried_column_pair_values_to_have_diff.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_queried_column_pair_values_to_have_diff", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib QueryExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["query-based"], "contributors": ["@austiezr"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectQueriedColumnPairValuesToHaveDiff", "snake_name": "expect_queried_column_pair_values_to_have_diff", "short_description": "Expect the frequency of occurrences of a specified value in a queried column to be at least <mostly> percent of values in that column.", "docstring": "Expect the frequency of occurrences of a specified value in a queried column to be at least <mostly> percent of values in that column."}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "query.column_pair", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the frequency of occurrences of a specified value in a queried column to be at least <mostly> percent of values in that column.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 4 tests for sqlite are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 4 tests for sqlite are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 10.0}, "expect_queried_column_to_be_unique_with_condition": {"updated_at": "2023-04-12 08:43:18 -0500 7 months ago", "created_at": "2022-11-22 19:23:12 +0200 12 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_queried_column_to_be_unique_with_condition.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_queried_column_to_be_unique_with_condition", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib QueryExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["query-based"], "contributors": ["@itaise"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectQueriedColumnToBeUniqueWithCondition", "snake_name": "expect_queried_column_to_be_unique_with_condition", "short_description": "Expect column values to be unique, with an filter.", "docstring": "Expect column values to be unique, with an filter.\n\n#### Args:\n- template_dict: dict with the following keys: column_to_check (column to check uniqueness on. can be multiple column names separated by comma), condition (the filter for boolean column, you can provide just the column name evaluated to True)\n "}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "query.template_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be unique, with an filter.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 8.0}, "expect_queried_column_to_have_n_distinct_values_with_condition": {"updated_at": "2023-04-12 08:43:18 -0500 7 months ago", "created_at": "2022-11-29 20:21:06 +0200 12 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_queried_column_to_have_n_distinct_values_with_condition.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_queried_column_to_have_n_distinct_values_with_condition", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib QueryExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["query-based"], "contributors": ["@itaise"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectQueriedColumnToHaveNDistinctValuesWithCondition", "snake_name": "expect_queried_column_to_have_n_distinct_values_with_condition", "short_description": "Expect a column to have N distinct values, with an filter.", "docstring": "Expect a column to have N distinct values, with an filter.\n\n#### Args:\n- template_dict: dict with the following keys: column_to_check (column to check uniqueness on. can be multiple column names separated by comma), condition (the filter for boolean column, you can provide just the column name, evaluated to True), num_of_distinct_values (number of distinct values the column is supposed ot have)\n "}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "query.template_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a column to have N distinct values, with an filter.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 8.0}, "expect_queried_column_value_frequency_to_meet_threshold": {"updated_at": "2023-04-24 13:49:26 -0400 7 months ago", "created_at": "2022-07-08 11:28:04 -0600 1 year, 4 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_queried_column_value_frequency_to_meet_threshold.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_queried_column_value_frequency_to_meet_threshold", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib QueryExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["query-based"], "contributors": ["@austiezr", "@mkopec87"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectQueriedColumnValueFrequencyToMeetThreshold", "snake_name": "expect_queried_column_value_frequency_to_meet_threshold", "short_description": "Expect the frequency of occurrences of a specified value in a queried column to be at least <threshold> percent of values in that column.", "docstring": "Expect the frequency of occurrences of a specified value in a queried column to be at least <threshold> percent of values in that column."}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "query.column", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 4, "num_failed": 1, "failing_names": ["multi_value_positive_test_static_data_asset"]}, {"backend": "sqlite", "num_passed": 4, "num_failed": 1, "failing_names": ["multi_value_positive_test_static_data_asset"]}, {"backend": "mysql", "num_passed": 4, "num_failed": 1, "failing_names": ["multi_value_positive_test_static_data_asset"]}, {"backend": "mssql", "num_passed": 4, "num_failed": 1, "failing_names": ["multi_value_positive_test_static_data_asset"]}, {"backend": "postgresql", "num_passed": 4, "num_failed": 1, "failing_names": ["multi_value_positive_test_static_data_asset"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the frequency of occurrences of a specified value in a queried column to be at least <threshold> percent of values in that column.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "Only 4 / 5 tests for spark are passing", "passed": false}, {"message": "  - Failing: multi_value_positive_test_static_data_asset", "passed": false}, {"message": "Only 4 / 5 tests for sqlite are passing", "passed": false}, {"message": "  - Failing: multi_value_positive_test_static_data_asset", "passed": false}, {"message": "Only 4 / 5 tests for mysql are passing", "passed": false}, {"message": "  - Failing: multi_value_positive_test_static_data_asset", "passed": false}, {"message": "Only 4 / 5 tests for mssql are passing", "passed": false}, {"message": "  - Failing: multi_value_positive_test_static_data_asset", "passed": false}, {"message": "Only 4 / 5 tests for postgresql are passing", "passed": false}, {"message": "  - Failing: multi_value_positive_test_static_data_asset", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 19.5}, "expect_queried_column_values_to_exist_in_second_table_column": {"updated_at": "2023-04-12 08:43:18 -0500 7 months ago", "created_at": "2022-11-29 20:30:04 +0200 12 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_queried_column_values_to_exist_in_second_table_column.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_queried_column_values_to_exist_in_second_table_column", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib QueryExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["query-based"], "contributors": ["@itaise"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectQueriedColumnValuesToExistInSecondTableColumn", "snake_name": "expect_queried_column_values_to_exist_in_second_table_column", "short_description": "Expect all values in a specific column to exist in another table's column.", "docstring": "Expect all values in a specific column to exist in another table's column.\n\n#### Args:\n- template_dict: dict containing the following keys: first_table_column (name of the main table column), second_table_column (name of the column to compare to in the second table), second_table_full_name, condition (additional condition added in the where clause, provide \"1=1\" if not needed)\n "}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "query.template_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 0, "num_failed": 2, "failing_names": ["basic_negative_test", "basic_positive_test"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect all values in a specific column to exist in another table's column.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "Only 0 / 2 tests for sqlite are passing", "passed": false}, {"message": "  - Failing: basic_negative_test, basic_positive_test", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 3.0}, "expect_queried_custom_query_to_return_num_rows": {"updated_at": "2023-04-12 08:43:18 -0500 7 months ago", "created_at": "2023-03-23 10:28:07 +0200 8 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_queried_custom_query_to_return_num_rows.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_queried_custom_query_to_return_num_rows", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib QueryExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["query-based"], "contributors": ["@mantasmy", "@itaise"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectQueriedCustomQueryToReturnNumRows", "snake_name": "expect_queried_custom_query_to_return_num_rows", "short_description": "Expect the number of rows returned from custom query to be equal to specified value.", "docstring": "Expect the number of rows returned from custom query to be equal to specified value.\n\n#### Args:\n- template_dict: dict containing the following key: user_query (user query. It must contain active_batch e.g. \"select * from {active_batch}\")\n "}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "query.template_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 0, "num_failed": 2, "failing_names": ["basic_positive_test", "basic_negative_test"]}, {"backend": "snowflake", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 0, "num_failed": 2, "failing_names": ["basic_positive_test", "basic_negative_test"]}, {"backend": "bigquery", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 0, "num_failed": 2, "failing_names": ["basic_positive_test", "basic_negative_test"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the number of rows returned from custom query to be equal to specified value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}, {"message": "Only 0 / 2 tests for sqlite are passing", "passed": false}, {"message": "  - Failing: basic_positive_test, basic_negative_test", "passed": false}, {"message": "Only 0 / 2 tests for trino are passing", "passed": false}, {"message": "  - Failing: basic_positive_test, basic_negative_test", "passed": false}, {"message": "Only 0 / 2 tests for postgresql are passing", "passed": false}, {"message": "  - Failing: basic_positive_test, basic_negative_test", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 5.0}, "expect_queried_slowly_changing_table_to_have_no_gaps": {"updated_at": "2023-04-12 08:43:18 -0500 7 months ago", "created_at": "2022-11-29 20:50:18 +0200 12 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_queried_slowly_changing_table_to_have_no_gaps.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_queried_slowly_changing_table_to_have_no_gaps", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib QueryExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["query-based"], "contributors": ["@itaise"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectQueriedSlowlyChangingTableToHaveNoGaps", "snake_name": "expect_queried_slowly_changing_table_to_have_no_gaps", "short_description": "Expect Slowly changing table type II to have no gaps between the 'end date' of each row, and the next 'start date' in the next row.", "docstring": "Expect Slowly changing table type II to have no gaps between the 'end date' of each row, and the next 'start date' in the next row.\n\n#### Args:\n- template_dict: dict with the following keys: primary_key (primary key column name or multiple columns, comma separated), open_date_column (name of the column representing open date), close_date_column (name of the column representing clode date)\n- threshold: an optional parameter - default is zero. if the ratio of \"gaps\" to total table rows is higher than threshold - error will be raised.\n "}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "query.template_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect Slowly changing table type II to have no gaps between the 'end date' of each row, and the next 'start date' in the next row.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for trino are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for trino are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 14.0}, "expect_queried_table_row_count_to_be": {"updated_at": "2023-04-12 08:43:18 -0500 7 months ago", "created_at": "2022-07-08 11:28:04 -0600 1 year, 4 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_queried_table_row_count_to_be.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_queried_table_row_count_to_be", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib QueryExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["query-based"], "contributors": ["@austiezr"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectQueriedTableRowCountToBe", "snake_name": "expect_queried_table_row_count_to_be", "short_description": "Expect the expect the number of rows returned from a queried table to equal a specified value.", "docstring": "Expect the expect the number of rows returned from a queried table to equal a specified value."}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "query.table", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 3, "num_failed": 1, "failing_names": ["positive_test_static_data_asset"]}, {"backend": "spark", "num_passed": 3, "num_failed": 1, "failing_names": ["positive_test_static_data_asset"]}, {"backend": "sqlite", "num_passed": 3, "num_failed": 1, "failing_names": ["positive_test_static_data_asset"]}, {"backend": "mysql", "num_passed": 3, "num_failed": 1, "failing_names": ["positive_test_static_data_asset"]}, {"backend": "trino", "num_passed": 3, "num_failed": 1, "failing_names": ["positive_test_static_data_asset"]}, {"backend": "mssql", "num_passed": 3, "num_failed": 1, "failing_names": ["positive_test_static_data_asset"]}, {"backend": "bigquery", "num_passed": 3, "num_failed": 1, "failing_names": ["positive_test_static_data_asset"]}, {"backend": "postgresql", "num_passed": 3, "num_failed": 1, "failing_names": ["positive_test_static_data_asset"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the expect the number of rows returned from a queried table to equal a specified value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "Only 3 / 4 tests for redshift are passing", "passed": false}, {"message": "  - Failing: positive_test_static_data_asset", "passed": false}, {"message": "Only 3 / 4 tests for spark are passing", "passed": false}, {"message": "  - Failing: positive_test_static_data_asset", "passed": false}, {"message": "Only 3 / 4 tests for sqlite are passing", "passed": false}, {"message": "  - Failing: positive_test_static_data_asset", "passed": false}, {"message": "Only 3 / 4 tests for mysql are passing", "passed": false}, {"message": "  - Failing: positive_test_static_data_asset", "passed": false}, {"message": "Only 3 / 4 tests for trino are passing", "passed": false}, {"message": "  - Failing: positive_test_static_data_asset", "passed": false}, {"message": "Only 3 / 4 tests for mssql are passing", "passed": false}, {"message": "  - Failing: positive_test_static_data_asset", "passed": false}, {"message": "Only 3 / 4 tests for bigquery are passing", "passed": false}, {"message": "  - Failing: positive_test_static_data_asset", "passed": false}, {"message": "Only 3 / 4 tests for postgresql are passing", "passed": false}, {"message": "  - Failing: positive_test_static_data_asset", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 22.0}, "expect_query_count_with_filter_to_meet_threshold": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-11-29 22:48:18 +0100 12 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_query_count_with_filter_to_meet_threshold.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_query_count_with_filter_to_meet_threshold", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib QueryExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["query-based"], "contributors": ["@CarstenFrommhold", "@mkopec87"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectQueryCountWithFilterToMeetThreshold", "snake_name": "expect_query_count_with_filter_to_meet_threshold", "short_description": "Expect Query given filter to contain at least as many entries as a given threshold.", "docstring": "Expect Query given filter to contain at least as many entries as a given threshold."}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "query.template_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect Query given filter to contain at least as many entries as a given threshold.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for trino are passing", "passed": true}, {"message": "All 2 tests for mssql are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for trino are passing", "passed": true}, {"message": "All 2 tests for mssql are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 26.0}, "expect_query_to_have_no_duplicate_value_combinations": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-11-23 18:39:38 +0100 12 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_query_to_have_no_duplicate_value_combinations.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_query_to_have_no_duplicate_value_combinations", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib QueryExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["query-based"], "contributors": ["@CarstenFrommhold"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectQueryToHaveNoDuplicateValueCombinations", "snake_name": "expect_query_to_have_no_duplicate_value_combinations", "short_description": "Expect the data points given primary keys via columns to be unique.", "docstring": "Expect the data points given primary keys via columns to be unique."}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "query.multiple_columns", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the data points given primary keys via columns to be unique.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 8.0}, "expect_table_checksum_to_equal_other_table": {"updated_at": "2023-07-25 15:50:41 -0500 4 months ago", "created_at": "2022-04-23 00:40:52 +0530 1 year, 7 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_table_checksum_to_equal_other_table.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_table_checksum_to_equal_other_table", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib BatchExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["table expectation", "multi-table expectation", "checksum"], "contributors": ["Yashavant Dudhe", "@yashgithub"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectTableChecksumToEqualOtherTable", "snake_name": "expect_table_checksum_to_equal_other_table", "short_description": "Expect the checksum for one batch table to equal the checksum of another table.", "docstring": "Expect the checksum for one batch table to equal the checksum of another table.\n\nexpect_table_checksum_to_equal_other_table is a [Batch Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_batch_expectations).\n\n#### Args:\n- other_table_name (str): The name of the other table.\n- ignore_columns (str): optional: Comma seperated list of columns which should be ignored from checksum calculation. e.g. \"created_date, userid\"\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_table_row_count_to_equal_other_table](https://greatexpectations.io/expectations/xpect_table_row_count_to_equal_other_table)\n "}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "table.checksum.values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "sqlite", "num_passed": 1, "num_failed": 3, "failing_names": ["for sqlite - positive_test_with_checksum_equal_with_ignore_columns", "for sqlite - negative_test_with_checksum_not_equal_with_ignore_columns", "for sqlite - negative_test_with_checksum_not_equal_without_ignore_columns"]}, {"backend": "bigquery", "num_passed": 0, "num_failed": 2, "failing_names": ["for bigquery - positive_test_with_checksum_equal", "for bigquery - negative_test_with_checksum_not_equal"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the checksum for one batch table to equal the checksum of another table.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "Only 1 / 4 tests for sqlite are passing", "passed": false}, {"message": "  - Failing: for sqlite - positive_test_with_checksum_equal_with_ignore_columns, for sqlite - negative_test_with_checksum_not_equal_with_ignore_columns, for sqlite - negative_test_with_checksum_not_equal_without_ignore_columns", "passed": false}, {"message": "Only 0 / 2 tests for bigquery are passing", "passed": false}, {"message": "  - Failing: for bigquery - positive_test_with_checksum_equal, for bigquery - negative_test_with_checksum_not_equal", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": -3.5}, "expect_value_at_index": {"updated_at": "2023-02-02 21:45:27 -0500 10 months ago", "created_at": "2021-02-04 11:37:20 -0800 2 years, 9 months ago", "path": "contrib/experimental/great_expectations_experimental/expectations/expect_value_at_index.py", "package": "great_expectations_experimental", "requirements": [], "import_module_args": ["expectations.expect_value_at_index", "great_expectations_experimental"], "sys_path": "../../contrib/experimental/great_expectations_experimental", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": [], "contributors": ["@prem1835213", "@YaosenLin"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectValueAtIndex", "snake_name": "expect_value_at_index", "short_description": "Expect a specific value at a given index location within each element of the column.", "docstring": "Expect a specific value at a given index location within each element of the column."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.has_value_at_index.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.has_value_at_index.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a specific value at a given index location within each element of the column.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_table_binary_label_model_bias": {"updated_at": "2023-07-25 15:50:41 -0500 4 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_ethical_ai_expectations/great_expectations_ethical_ai_expectations/expectations/expect_table_binary_label_model_bias.py", "package": "great_expectations_ethical_ai_expectations", "requirements": ["aequitas"], "import_module_args": ["great_expectations_ethical_ai_expectations.expectations"], "sys_path": "../../contrib/great_expectations_ethical_ai_expectations", "exp_type": "Contrib BatchExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["ai/ml", "fair-ai", "hackathon-22"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["aequitas"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectTableBinaryLabelModelBias", "snake_name": "expect_table_binary_label_model_bias", "short_description": "Expect fairness in a model by calculating disparities among features, score (binary or continuous), and a label (binary) in a table using Aequitas.", "docstring": "Expect fairness in a model by calculating disparities among features, score (binary or continuous), and a label (binary) in a table using Aequitas.\n\nUsing Aeqitas we evaluate predicted and true values to evaluate certain metrics on how a classider model imposes bias on a given attribute group. Requires columns score (binary or continuous) and label_value (binary). For more information go to https://dssg.github.io/aequitas/examples/compas_demo.html\n\nexpect_table_binary_label_model_bias is a [Batch Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_batch_expectations).\n\n#### Args:\n- y_true (str): The column name of the actual y vlaue. Must be binary\n- y_pred (str): The column name of the modeled y value. Must be binary or continuous\n\n#### Keyword Args:\n- partial_success (boolean): If True, expectations will pass if supervised or supervised fairness are observed even if overall fairness was false.\n- reference_group (dict): A JSON-serializable dictionary (nesting allowed) that will be used to compare in reference to the group specified. Ex: {'race':'Caucasian', 'sex':'Male', 'age_cat':'25 - 45'}.\n- alpha (float): A float between 0 and 1 that determines statistical significance level to use in significance determination. Default is .05\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "table.modeling.binary.model_bias", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect fairness in a model by calculating disparities among features, score (binary or continuous), and a label (binary) in a table using Aequitas.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_table_linear_feature_importances_to_be": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_ethical_ai_expectations/great_expectations_ethical_ai_expectations/expectations/expect_table_linear_feature_importances_to_be.py", "package": "great_expectations_ethical_ai_expectations", "requirements": ["scikit-learn"], "import_module_args": ["great_expectations_ethical_ai_expectations.expectations"], "sys_path": "../../contrib/great_expectations_ethical_ai_expectations", "exp_type": "Contrib BatchExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["ai/ml", "fair-ai", "hackathon-22"], "contributors": ["@austiezr"], "requirements": ["scikit-learn"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectTableLinearFeatureImportancesToBe", "snake_name": "expect_table_linear_feature_importances_to_be", "short_description": "Expect Feature Importances of specified columns in table for Linear Regression to meet threshold.", "docstring": "Expect Feature Importances of specified columns in table for Linear Regression to meet threshold."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "table.modeling.linear.feature_importances", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect Feature Importances of specified columns in table for Linear Regression to meet threshold.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_average_lat_lon_pairwise_distance_to_be_less_than": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_average_lat_lon_pairwise_distance_to_be_less_than.py", "package": "great_expectations_geospatial_expectations", "requirements": ["scipy", "scikit-learn", "numpy"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["geospatial", "hackathon-22"], "contributors": ["@mmi333"], "requirements": ["scipy", "scikit-learn", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnAverageLatLonPairwiseDistanceToBeLessThan", "snake_name": "expect_column_average_lat_lon_pairwise_distance_to_be_less_than", "short_description": "Expect the average pairwise haversine distance between lat/lon points in a column is less than some value in km.", "docstring": "Expect the average pairwise haversine distance between lat/lon points in a column is less than some value in km.\n\nThis expectation will compute the pairwise haversine distance between each (latitude, longitude) pair and test that the average is less than some value in km.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column.average_lat_lon_pairwise_distance", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the average pairwise haversine distance between lat/lon points in a column is less than some value in km.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_column_average_to_be_within_range_of_given_point": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_average_to_be_within_range_of_given_point.py", "package": "great_expectations_geospatial_expectations", "requirements": [], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["geospatial", "hackathon-22"], "contributors": ["@austiezr", "@mmi333"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnAverageToBeWithinRangeOfGivenPoint", "snake_name": "expect_column_average_to_be_within_range_of_given_point", "short_description": "Expect the average of a column of degree-decimal, lat/lon coordinates to be in range of a given point.", "docstring": "Expect the average of a column of degree-decimal, lat/lon coordinates to be in range of a given point."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column.coordinates.distance", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the average of a column of degree-decimal, lat/lon coordinates to be in range of a given point.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_minimum_bounding_radius_to_be_between": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_minimum_bounding_radius_to_be_between.py", "package": "great_expectations_geospatial_expectations", "requirements": ["pygeos"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-2022"], "contributors": ["@pjdobson"], "requirements": ["pygeos"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnMinimumBoundingRadiusToBeBetween", "snake_name": "expect_column_minimum_bounding_radius_to_be_between", "short_description": "Expect that column values as geometry points to be contained within a bounding circle with a given radius (or diameter).", "docstring": "Expect that column values as geometry points to be contained within a bounding circle with a given radius (or diameter).\n\nexpect_column_values_minimum_bounding_radius_to_be_between is a :func:`column_expectation <great_expectations.dataset.dataset.MetaDataset.column_expectation>`.\n\n#### Args:\n- column (str): The column name.\nColumn values must be provided in WKT or WKB format, which are commom formats for GIS Database formats.\nWKT can be accessed thhrough the ST_AsText() or ST_AsBinary() functions in queries for PostGIS and MSSQL.\nColumn values can alternately be given in x,y tuple or list pairs.\nThe user is responsible for the coordinate reference system and the units. e.g. values may be given in easting-northing pairs.\n- min_value (float or None): The minimum radius (or diameter) that bounds all geometries in the column\n- max_value (float or None): The maximum radius (or diameter) that bounds all geometries in the column\n- strict_min (boolean): If True, the minimal radius must be strictly larger than min_value,\n- Default: False\n- strict_max (boolean): If True, the maximal radius must be strictly smaller than max_value,\n- Default: False\n\n#### Keyword Args:\n- column_shape_format: str\nGeometry format for 'column' (wkt, wkb, xy). Column values can be provided in WKT or WKB format, which are commom formats for GIS Database formats.\nxy also supports tuple pairs or list pairs for points only\nWKT can be accessed thhrough the ST_AsText() or ST_AsBinary() functions in queries for PostGIS and MSSQL.\n- Must be one of: [wkt, wkb, xy]\n- Default: wkt\n- diameter_flag (boolean): If True, the user can specify a diameter as opposed to a radius,\n- Default: False\n\n#### Returns:\nAn ExpectationSuiteValidationResult\n\n#### Notes:\n\n#### These fields in the result object are customized for this expectation:\n```\n{\n    \"observed_value\": (list) The actual bounding radius (or diameter)\n}\n```\n\n\n* min_value and max_value are both inclusive unless strict_min or strict_max are set to True.\n* If min_value is None, then max_value is treated as an upper bound\n* If max_value is None, then min_value is treated as a lower bound\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column.geometry.minimum_bounding_radius", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect that column values as geometry points to be contained within a bounding circle with a given radius (or diameter).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 5.0}, "expect_column_pair_values_lat_lng_matches_geohash": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_pair_values_lat_lng_matches_geohash.py", "package": "great_expectations_geospatial_expectations", "requirements": ["python-geohash", "pandas"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnPairMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["geospatial", "hackathon-22", "multi-column expectation"], "contributors": ["@chrisarnold91"], "requirements": ["python-geohash", "pandas"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnPairValuesLatLngMatchesGeohash", "snake_name": "expect_column_pair_values_lat_lng_matches_geohash", "short_description": "Expect latlngs in column A to match with geohashes in column B.", "docstring": "Expect latlngs in column A to match with geohashes in column B.\n\nThe more digits a geohash has, the smaller and more precise of an area it represents. When converting a latlng to a geohash, we are only asserting that it falls somewhere within the other geohash we're comparing it with. To verify this, we only need to make sure that they share their left-most digits. For example, dpz8 contains dpz80 (in addition to any other geohash that begins with \"dpz8\".\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_pair_values.lat_lng_matches_geohash.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_pair_values.lat_lng_matches_geohash.filtered_row_count", "has_question_renderer": false}, {"name": "column_pair_values.lat_lng_matches_geohash.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect latlngs in column A to match with geohashes in column B.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 5.0}, "expect_column_values_geometry_centroids_to_be_within_shape": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_geometry_centroids_to_be_within_shape.py", "package": "great_expectations_geospatial_expectations", "requirements": ["pygeos"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["geospatial", "hackathon-2022"], "contributors": ["@pjdobson"], "requirements": ["pygeos"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesGeometryCentroidsToBeWithinShape", "snake_name": "expect_column_values_geometry_centroids_to_be_within_shape", "short_description": "Expect that column values as geometries each have a centroid that are within a given reference shape.", "docstring": "Expect that column values as geometries each have a centroid that are within a given reference shape.\n\nexpect_column_values_geometry_centroids_to_be_within_shape is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name. Column values must be provided in WKT or WKB format, which are commom formats for GIS Database formats. WKT can be accessed thhrough the ST_AsText() or ST_AsBinary() functions in queries for PostGIS and MSSQL.\n\n#### Keyword Args:\n- shape (str or list of str): The reference geometry\n- shape_format (str): Geometry format for 'shape' string(s). Can be provided as 'Well Known Text' (WKT), 'Well Known Binary' (WKB), or as GeoJSON. Must be one of: [wkt, wkb, geojson]. Default: wkt\n- column_shape_format (str): Geometry format for 'column'. Column values must be provided in WKT or WKB format, which are commom formats for GIS Database formats. WKT can be accessed thhrough the ST_AsText() or ST_AsBinary() functions in queries for PostGIS and MSSQL.\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\n#### Notes:\n* Convention is (X Y Z) for points, which would map to (Longitude Latitude Elevation) for geospatial cases.\n* Any convention can be followed as long as the test and reference shapes are consistent.\n* The reference shape allows for an array, but will union (merge) all the shapes into 1 and check the contains condition.\n* MultiLinestrings and Multipolygons area weighted by their length and areas, respectively. See the pygeos docs for reference.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.geometry.centroids_within_shape.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.geometry.centroids_within_shape.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect that column values as geometries each have a centroid that are within a given reference shape.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_geometry_distance_to_address_to_be_between": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_geometry_distance_to_address_to_be_between.py", "package": "great_expectations_geospatial_expectations", "requirements": ["pygeos", "geopy"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["geospatial", "hackathon-2022"], "contributors": ["@pjdobson"], "requirements": ["pygeos", "geopy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesGeometryDistanceToAddressToBeBetween", "snake_name": "expect_column_values_geometry_distance_to_address_to_be_between", "short_description": "Expect that column values as geometry points to be between a certain distance from a geocoded object.", "docstring": "Expect that column values as geometry points to be between a certain distance from a geocoded object.\n\nexpect_column_values_geometry_distance_to_address_to_be_between is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name. Column values must be provided in lon-lat or lat-long tuples/lists, WKT or WKB format, which are commom formats for GIS Database formats. WKT can be accessed thhrough the ST_AsText() or ST_AsBinary() functions in queries for PostGIS and MSSQL. Values must be in longitude - latitude coordinates for this method to work with geocoding.\n\n#### Keyword Args:\n- place (str): The country, place, address, etc. to query. Expect to return a point from geocoder (Default: OpenStreetMaps (Nominatim)). Note that this method uses the Latitude - Longitude Point returned by the geocoder, and not the shape(geometry)\n- column_shape_format (str): Geometry format for 'column' (wkt, wkb, lonlat, latlon). Column values can be provided in WKT or WKB format, which are commom formats for GIS Database formats. latlon or lonlat also supports tuple pairs or list pairs in either Longtitude or Latitude first formats. WKT can be accessed thhrough the ST_AsText() or ST_AsBinary() functions in queries for PostGIS and MSSQL.\n- geocoder (str): Geocoder from GeoPy to use to return the shape. While this is generic, the api is required to be available from GeoPy and must return a geometry.\n- geocoder_config (dict str): arguments to initialize the GeoPy geocoder. e.g. for paid services, an API_key is usually required. See GeoPy for reference.\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\n#### Notes:\n* The user is responsible to transform the column to a WKT or WKB format that is in the WGS84 coordianate system for earth.\n* Any geometry can be provided in the column value, but if it is not a POINT, the centroid will be evaluated.\n* Invalid geometries import as None and fail the test.\n* Other Coordinate Reference Systems are not yet supported.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.geometry.distance_to_address.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.geometry.distance_to_address.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect that column values as geometry points to be between a certain distance from a geocoded object.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_geometry_not_to_overlap": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_geometry_not_to_overlap.py", "package": "great_expectations_geospatial_expectations", "requirements": ["rtree", "geopandas", "shapely", "numpy"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "geospatial"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["rtree", "geopandas", "shapely", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesGeometryNotToOverlap", "snake_name": "expect_column_values_geometry_not_to_overlap", "short_description": "Expect geometries in this column Not to overlap with each other. If any two geometries do overlap, expectation will return False.", "docstring": "Expect geometries in this column Not to overlap with each other. If any two geometries do overlap, expectation will return False.\n\nFor more information look here https://stackoverflow.com/questions/64042379/shapely-is-valid-returns-true-to-invalid-overlap-polygons\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.geometry_not_overlap", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect geometries in this column Not to overlap with each other. If any two geometries do overlap, expectation will return False.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_geometry_to_be_near_shape": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_geometry_to_be_near_shape.py", "package": "great_expectations_geospatial_expectations", "requirements": ["pygeos"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["geospatial", "hackathon-2022"], "contributors": ["@pjdobson"], "requirements": ["pygeos"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesGeometryToBeNearShape", "snake_name": "expect_column_values_geometry_to_be_near_shape", "short_description": "Expect that column values as geometries are near (within a given distance) of a given reference shape in the units of the provided geometries.", "docstring": "Expect that column values as geometries are near (within a given distance) of a given reference shape in the units of the provided geometries.\n\nexpect_column_values_geometry_to_be_near_shape is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name. Column values must be provided in WKT or WKB format, which are commom formats for GIS Database formats. WKT can be accessed thhrough the ST_AsText() or ST_AsBinary() functions in queries for PostGIS and MSSQL.\n\n#### Keyword Args:\n- shape (str or list of str): The reference geometry\n- shape_format (str): Geometry format for 'shape' string(s). Can be provided as 'Well Known Text' (WKT), 'Well Known Binary' (WKB), or as GeoJSON. Must be one of: [wkt, wkb, geojson]. Default: wkt\n- column_shape_format (str): Geometry format for 'column'. Column values must be provided in WKT or WKB format, which are commom formats for GIS Database formats. WKT can be accessed thhrough the ST_AsText() or ST_AsBinary() functions in queries for PostGIS and MSSQL.\n- distance_tol (float): Distance tolerance for the column value geometries to the reference shape. Note that 0 evaluates to expect_column_values_to_be_within_shape. Distance values are always positive. Negative tolerances will always evaluate to False. Default: 0\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\n#### Notes:\n* The distance returned and specified is based on the coordinate system of the points, not Latitude and Longitude.\n* The user is responsible for the projection method and units (e.g. UTM in m).\n* The distance calculation is based on a cartesian coordinate system.\n* Convention is (X Y Z) for points, which would map to (Longitude Latitude Elevation) for geospatial cases.\n* Any convention can be followed as long as the test and reference shapes are consistent.\n* The reference shape allows for an array, but will union (merge) all the shapes into 1 and check the contains condition.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.geometry.near_shape.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.geometry.near_shape.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect that column values as geometries are near (within a given distance) of a given reference shape in the units of the provided geometries.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 7.0}, "expect_column_values_geometry_to_be_of_type": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_geometry_to_be_of_type.py", "package": "great_expectations_geospatial_expectations", "requirements": ["shapely"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["geospatial", "hackathon-2022"], "contributors": ["@mmi333"], "requirements": ["shapely"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesGeometryToBeOfType", "snake_name": "expect_column_values_geometry_to_be_of_type", "short_description": "Expect values in a column to belong to one of the specified geometry types.", "docstring": "Expect values in a column to belong to one of the specified geometry types.\n\n#### Args:\n- column (str): The column name.\n- geom_types_list (str): List of shapely geometry types to match against. e.g: Point, Polygon, LineString, MultiPoint, MultiPolygon, MultiLineString\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.geometry_of_type.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.geometry_of_type.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in a column to belong to one of the specified geometry types.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_column_values_geometry_to_be_within_place": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_geometry_to_be_within_place.py", "package": "great_expectations_geospatial_expectations", "requirements": ["pygeos", "geopy"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["geospatial", "hackathon-2022"], "contributors": ["@pjdobson"], "requirements": ["pygeos", "geopy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesGeometryToBeWithinPlace", "snake_name": "expect_column_values_geometry_to_be_within_place", "short_description": "Expect that column values as geometries are within a place that can be returned through geocoding (as a shape).", "docstring": "Expect that column values as geometries are within a place that can be returned through geocoding (as a shape).\n\nexpect_column_values_geometry_to_be_near_shape is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name. Column values must be provided in WKT or WKB format, which are commom formats for GIS Database formats. WKT can be accessed thhrough the ST_AsText() or ST_AsBinary() functions in queries for PostGIS and MSSQL. Values must be in longitude - latitude format for this method to work.\n\n#### Keyword Args:\n- place (str): The country, place, address, etc. to query. Expect to return a geometry from OpenStreetMaps (Nominatim)\n- column_shape_format (str): Geometry format for 'column'. Column values must be provided in WKT or WKB format, which are commom formats for GIS Database formats. WKT can be accessed thhrough the ST_AsText() or ST_AsBinary() functions in queries for PostGIS and MSSQL.\n- geocoder (str): Geocoder from GeoPy to use to return the shape. While this is generic, the api is required to be available from GeoPy and must return a geometry.\n- geocoder_config (dict str): arguments to initialize the GeoPy geocoder. e.g. for paid services, an API_key is usually required. See GeoPy for reference.\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\n#### Notes:\n* The user is responsible to transform the column to a WKT or WKB format that is in the WGS84 coordianate system for earth.\n* Other Coordinate Reference Systems are not yet supported.\n* See Nominatim for appropriate use of the service as open-source. Requests are subject to timeout and blocking.\n* Frequent queries should be cached locally and use (expect_column_value_geometries_to_be_within_shape)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.geometry.within_place.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.geometry.within_place.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect that column values as geometries are within a place that can be returned through geocoding (as a shape).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_geometry_to_be_within_shape": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_geometry_to_be_within_shape.py", "package": "great_expectations_geospatial_expectations", "requirements": ["pygeos"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["geospatial", "hackathon-2022"], "contributors": ["@pjdobson"], "requirements": ["pygeos"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesGeometryToBeWithinShape", "snake_name": "expect_column_values_geometry_to_be_within_shape", "short_description": "Expect that column values as geometries are within a given reference shape.", "docstring": "Expect that column values as geometries are within a given reference shape.\n\nexpect_column_values_geometry_to_be_within_shape is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name. Column values must be provided in WKT or WKB format, which are commom formats for GIS Database formats. WKT can be accessed thhrough the ST_AsText() or ST_AsBinary() functions in queries for PostGIS and MSSQL.\n\n#### Keyword Args:\n- shape (str or list of str): The reference geometry\n- shape_format (str): Geometry format for 'shape' string(s). Can be provided as 'Well Known Text' (WKT), 'Well Known Binary' (WKB), or as GeoJSON. Must be one of: [wkt, wkb, geojson]. Default: wkt\n- column_shape_format (str): Geometry format for 'column'. Column values must be provided in WKT or WKB format, which are commom formats for GIS Database formats. WKT can be accessed thhrough the ST_AsText() or ST_AsBinary() functions in queries for PostGIS and MSSQL.\n- properly (boolean): Whether the 'column' values should be properly within in the reference 'shape'. The method allows for shapes to be 'properly contained' within the reference, meaning no points of a given geometry can touch the boundary of the reference. See the pygeos docs for reference. Default: False\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\n#### Notes:\n* Convention is (X Y Z) for points, which would map to (Longitude Latitude Elevation) for geospatial cases.\n* Any convention can be followed as long as the test and reference shapes are consistent.\n* The reference shape allows for an array, but will union (merge) all the shapes into 1 and check the contains condition.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.geometry.within_shape.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.geometry.within_shape.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 6, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect that column values as geometries are within a given reference shape.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 6 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 6 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 8.0}, "expect_column_values_geometry_to_intersect_shape": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_geometry_to_intersect_shape.py", "package": "great_expectations_geospatial_expectations", "requirements": ["pygeos"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["geospatial", "hackathon-22"], "contributors": ["@pjdobson"], "requirements": ["pygeos"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesGeometryToIntersectShape", "snake_name": "expect_column_values_geometry_to_intersect_shape", "short_description": "Expect that column values as geometries intersect a given reference shape.", "docstring": "Expect that column values as geometries intersect a given reference shape.\n\nexpect_column_values_geometry_to_intersect_shape is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name. Column values must be provided in WKT or WKB format, which are commom formats for GIS Database formats. WKT can be accessed thhrough the ST_AsText() or ST_AsBinary() functions in queries for PostGIS and MSSQL.\n\n#### Keyword Args:\n- shape (str or list of str): The reference geometry\n- shape_format (str): Geometry format for 'shape' string(s). Can be provided as 'Well Known Text' (WKT), 'Well Known Binary' (WKB), or as GeoJSON. Must be one of: [wkt, wkb, geojson]. Default: wkt\n- column_shape_format (str): Geometry format for 'column'. Column values must be provided in WKT or WKB format, which are commom formats for GIS Database formats.\nWKT can be accessed thhrough the ST_AsText() or ST_AsBinary() functions in queries for PostGIS and MSSQL.\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\n#### Notes:\n* Convention is (X Y Z) for points, which would map to (Longitude Latitude Elevation) for geospatial cases.\n* Any convention can be followed as long as the test and reference shapes are consistent.\n* The reference shape allows for an array, but will union (merge) all the shapes into 1 and check the contains condition.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.geometry.intersects_shape.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.geometry.intersects_shape.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 6, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect that column values as geometries intersect a given reference shape.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 6 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 6 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 8.0}, "expect_column_values_geometry_to_overlap": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_geometry_to_overlap.py", "package": "great_expectations_geospatial_expectations", "requirements": ["rtree", "geopandas", "shapely", "numpy", "rtree", "geopandas", "shapely", "numpy"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "geospatial"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["rtree", "geopandas", "shapely", "numpy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesGeometryToOverlap", "snake_name": "expect_column_values_geometry_to_overlap", "short_description": "Expect geometries in this column to overlap with each other. If any two geometries do overlap, expectation will return True.", "docstring": "Expect geometries in this column to overlap with each other. If any two geometries do overlap, expectation will return True.\n\nFor more information look here https://stackoverflow.com/questions/64042379/shapely-is-valid-returns-true-to-invalid-overlap-polygons\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.geometry_overlap", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect geometries in this column to overlap with each other. If any two geometries do overlap, expectation will return True.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_lat_lon_to_be_land_or_ocean": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_lat_lon_to_be_land_or_ocean.py", "package": "great_expectations_geospatial_expectations", "requirements": ["global-land-mask"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["geospatial", "hackathon-2022"], "contributors": ["@mmi333"], "requirements": ["global-land-mask"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesLatLonToBeLandOrOcean", "snake_name": "expect_column_values_lat_lon_to_be_land_or_ocean", "short_description": "Expect values in a column to be lat lon pairs that represent a point on land or in an ocean.", "docstring": "Expect values in a column to be lat lon pairs that represent a point on land or in an ocean.\n\n#### Args:\n- column (str): The column name.\n\nland_or_ocean (str): Either 'land' or 'ocean'. represents whether to check if each point is on land or in an ocean.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.lat_lon_land_or_ocean.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.lat_lon_land_or_ocean.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in a column to be lat lon pairs that represent a point on land or in an ocean.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_column_values_point_within_geo_region": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_point_within_geo_region.py", "package": "great_expectations_geospatial_expectations", "requirements": ["geopandas", "shapely"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental"], "contributors": ["@DXcarlos", "@Rxmeez", "@ryanlindeborg", "@mmi333"], "requirements": ["geopandas", "shapely"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesPointWithinGeoRegion", "snake_name": "expect_column_values_point_within_geo_region", "short_description": "Expect column values to be lat/lon points within a geographic region.", "docstring": "Expect column values to be lat/lon points within a geographic region.\n\nThis expectation will check a (longitude, latitude) tuple to see if it falls within a country input by the user or a polygon specified by user input points. To do this geo calculation, it leverages the Geopandas library. So for now it only supports the countries that are in the Geopandas world database. Importantly, countries are defined by their iso_a3 country code, not their full name.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.point_within_geo_region.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.point_within_geo_region.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be lat/lon points within a geographic region.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 7.0}, "expect_column_values_reverse_geocoded_lat_lon_to_contain": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_reverse_geocoded_lat_lon_to_contain.py", "package": "great_expectations_geospatial_expectations", "requirements": ["geopandas"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["geospatial", "hackathon-2022"], "contributors": ["@mmi333"], "requirements": ["geopandas"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesReverseGeocodedLatLonToContain", "snake_name": "expect_column_values_reverse_geocoded_lat_lon_to_contain", "short_description": "Expect values in a column to be tuples of degree-decimal (latitude, longitude) which contain a specific word when reverse geocoded.", "docstring": "Expect values in a column to be tuples of degree-decimal (latitude, longitude) which contain a specific word when reverse geocoded.\n\n#### Args:\n- column (str): The column name.\n\n#### Keyword Args:\n- word (str) : The word to check if it's contained in the reverse geocoded string. Must be a lowercase string.\n\nprovider (str or geopy.geocoder): The reverse geocoding service provider. Default: photon. More info here: https://geopandas.org/en/stable/docs/reference/api/geopandas.tools.reverse_geocode.html\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.reverse_geocoded_lat_lon_contain.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.reverse_geocoded_lat_lon_contain.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in a column to be tuples of degree-decimal (latitude, longitude) which contain a specific word when reverse geocoded.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_lat_lon_coordinates_in_range_of_given_point": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_to_be_lat_lon_coordinates_in_range_of_given_point.py", "package": "great_expectations_geospatial_expectations", "requirements": [], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["geospatial", "hackathon-2022", "distance projection"], "contributors": ["@austiezr", "@mmi333"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeLatLonCoordinatesInRangeOfGivenPoint", "snake_name": "expect_column_values_to_be_lat_lon_coordinates_in_range_of_given_point", "short_description": "Expect values in a column to be tuples of degree-decimal (latitude, longitude) within a specified range of a given degree-decimal (latitude, longitude) point.", "docstring": "Expect values in a column to be tuples of degree-decimal (latitude, longitude) within a specified range of a given degree-decimal (latitude, longitude) point.\n\nexpect_column_values_to_be_lat_lon_coordinates_in_range_of_given_point is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n\n#### Keyword Args:\n- center_point (tuple(float, float) or list(float, float)): The point from which to measure to the column points. Must be a tuple or list of exactly two (2) floats.\n- unit (str or None): The unit of distance with which to measure. Must be one of: [miles, kilometers]. Default: kilometers\n\nrange (int or float): The range in [miles, kilometers] from your specified center_point to measure.\n\nprojection (str or None): The method by which to calculate distance between points. Must be one of: [fcc, pythagorean]. Default: pythagorean\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n- * fcc projection: Calculates the distance in kilometers between two lat/lon points on an ellipsoidal earth projected to a plane. Prescribed by the FCC for distances up to and not exceeding 475km/295mi.\n- * pythagorean projection: Calculates the distance in kilometers between two lat/lon points on a spherical earth projected to a plane. Very fast but error increases rapidly as distances increase.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.coordinates.in_range.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.coordinates.in_range.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 1, "num_failed": 2, "failing_names": ["basic_positive_test", "basic_negative_test"]}, {"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in a column to be tuples of degree-decimal (latitude, longitude) within a specified range of a given degree-decimal (latitude, longitude) point.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}, {"message": "Only 1 / 3 tests for spark are passing", "passed": false}, {"message": "  - Failing: basic_positive_test, basic_negative_test", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_column_values_to_be_lat_lon_in_timezone": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_to_be_lat_lon_in_timezone.py", "package": "great_expectations_geospatial_expectations", "requirements": ["timezonefinder"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["geospatial", "hackathon-22", "timezone"], "contributors": ["@mmi333"], "requirements": ["timezonefinder"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeLatLonInTimezone", "snake_name": "expect_column_values_to_be_lat_lon_in_timezone", "short_description": "Expect each lat lon pair in this column to be a point inside a given timezone.", "docstring": "Expect each lat lon pair in this column to be a point inside a given timezone.\n\nTimezone names can be found in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones under 'TZ database name'. This works offline, so it isn't 100% accurate as timezones change but it should be enough for most purposes.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.lat_lon_in_timezone.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.lat_lon_in_timezone.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect each lat lon pair in this column to be a point inside a given timezone.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 8.0}, "expect_column_values_to_be_line_km_distance_between": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_to_be_line_km_distance_between.py", "package": "great_expectations_geospatial_expectations", "requirements": ["geopandas", "shapely"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["geospatial", "hackathon-22"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["geopandas", "shapely"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeLineKMDistanceBetween", "snake_name": "expect_column_values_to_be_line_km_distance_between", "short_description": "Expect linestrings in column to be between selected distances in kilometers.", "docstring": "Expect linestrings in column to be between selected distances in kilometers."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.linestring_distance_km.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.linestring_distance_km.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect linestrings in column to be between selected distances in kilometers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_line_miles_distance_between": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_to_be_line_miles_distance_between.py", "package": "great_expectations_geospatial_expectations", "requirements": ["geopandas", "shapely"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["geospatial", "hackathon-22"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["geopandas", "shapely"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeLineMilesDistanceBetween", "snake_name": "expect_column_values_to_be_line_miles_distance_between", "short_description": "Expect the distance of each Linestring in the column to be between two values in miles.", "docstring": "Expect the distance of each Linestring in the column to be between two values in miles."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.linestring_distance_miles.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.linestring_distance_miles.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the distance of each Linestring in the column to be between two values in miles.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_nonempty_geometries": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_to_be_nonempty_geometries.py", "package": "great_expectations_geospatial_expectations", "requirements": ["shapely"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["geospatial", "hackathon-2022"], "contributors": ["@mmi333"], "requirements": ["shapely"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeNonemptyGeometries", "snake_name": "expect_column_values_to_be_nonempty_geometries", "short_description": "Expect values in a column to be shapely geometries that aren't empty (however, they can be null).", "docstring": "Expect values in a column to be shapely geometries that aren't empty (however, they can be null).\n\n#### Args:\n- column (str): The column name.\n\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.nonempty_geometries.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.nonempty_geometries.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in a column to be shapely geometries that aren't empty (however, they can be null).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_polygon_area_between": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_to_be_polygon_area_between.py", "package": "great_expectations_geospatial_expectations", "requirements": ["geopandas", "pyogrio", "shapely"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["geospatial", "hackathon-22"], "contributors": ["@mmi333"], "requirements": ["geopandas", "pyogrio", "shapely"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBePolygonAreaBetween", "snake_name": "expect_column_values_to_be_polygon_area_between", "short_description": "Expect the area of polygons in the column are between two specified values.", "docstring": "Expect the area of polygons in the column are between two specified values.\n\nThis expectation will compute the area of each polygon/multipolygon in square kilometers and check if it's between two values.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.polygon_area.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.polygon_area.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 3, "num_failed": 1, "failing_names": ["positive_test_with_between_500000_and_600000_km2"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the area of polygons in the column are between two specified values.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "Only 3 / 4 tests for pandas are passing", "passed": false}, {"message": "  - Failing: positive_test_with_between_500000_and_600000_km2", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 3.5}, "expect_column_values_to_be_valid_degree_decimal_coordinates": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_to_be_valid_degree_decimal_coordinates.py", "package": "great_expectations_geospatial_expectations", "requirements": ["shapely"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["geospatial", "hackathon-22"], "contributors": ["@austiezr", "@mmi333"], "requirements": ["shapely"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidDegreeDecimalCoordinates", "snake_name": "expect_column_values_to_be_valid_degree_decimal_coordinates", "short_description": "Expect column values to contain degree-decimal, lat/lon coordinates.", "docstring": "Expect column values to contain degree-decimal, lat/lon coordinates."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.coordinates.degree_decimal.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.coordinates.degree_decimal.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to contain degree-decimal, lat/lon coordinates.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_geohash": {"updated_at": "2023-02-02 21:45:27 -0500 10 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_to_be_valid_geohash.py", "package": "great_expectations_geospatial_expectations", "requirements": [], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib RegexBasedColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["geospatial", "hackathon-22"], "contributors": ["@chrisarnold91"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidGeohash", "snake_name": "expect_column_values_to_be_valid_geohash", "short_description": "Expect values in this column to be a valid geohash.", "docstring": "Expect values in this column to be a valid geohash."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_geohash_regex.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_geohash_regex.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be a valid geohash.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for redshift are passing", "passed": true}, {"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for sqlite are passing", "passed": true}, {"message": "All 4 tests for mysql are passing", "passed": true}, {"message": "All 4 tests for trino are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}, {"message": "All 4 tests for bigquery are passing", "passed": true}, {"message": "All 4 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for redshift are passing", "passed": true}, {"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for sqlite are passing", "passed": true}, {"message": "All 4 tests for mysql are passing", "passed": true}, {"message": "All 4 tests for trino are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}, {"message": "All 4 tests for bigquery are passing", "passed": true}, {"message": "All 4 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 43.0}, "expect_column_values_to_be_valid_geojson": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_to_be_valid_geojson.py", "package": "great_expectations_geospatial_expectations", "requirements": ["pygeos"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["geospatial", "hackathon-2022"], "contributors": ["@mmi333"], "requirements": ["pygeos"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidGeojson", "snake_name": "expect_column_values_to_be_valid_geojson", "short_description": "Expect values in a column to be valid geojson strings as defined in https://geojson.org/.", "docstring": "Expect values in a column to be valid geojson strings as defined in https://geojson.org/.\n\nNote that this makes use of https://pygeos.readthedocs.io/en/stable/io.html#pygeos.io.from_geojson which has some limitations.\n\n#### Args:\n- column (str): The column name.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_geojson.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_geojson.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in a column to be valid geojson strings as defined in https://geojson.org/.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_geometry": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_to_be_valid_geometry.py", "package": "great_expectations_geospatial_expectations", "requirements": ["geopandas", "shapely"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["hackathon-22", "geospatial"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["geopandas", "shapely"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidGeometry", "snake_name": "expect_column_values_to_be_valid_geometry", "short_description": "Expect values in this column to be valid geometry types (Polygon, LineString, etc.).", "docstring": "Expect values in this column to be valid geometry types (Polygon, LineString, etc.).\n\nSee https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoSeries.is_valid.html for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.check_valid_geometry.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.check_valid_geometry.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 1, "num_failed": 1, "failing_names": ["basic_negative_test"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid geometry types (Polygon, LineString, etc.).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "Only 1 / 2 tests for pandas are passing", "passed": false}, {"message": "  - Failing: basic_negative_test", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 1.5}, "expect_column_values_to_have_elevation": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_geospatial_expectations/great_expectations_geospatial_expectations/expectations/expect_column_values_to_have_elevation.py", "package": "great_expectations_geospatial_expectations", "requirements": ["geopandas", "shapely"], "import_module_args": ["great_expectations_geospatial_expectations.expectations"], "sys_path": "../../contrib/great_expectations_geospatial_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["geospatial", "hackathon-22"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["geopandas", "shapely"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToHaveElevation", "snake_name": "expect_column_values_to_have_elevation", "short_description": "Expect the column values to be points that have elevation.", "docstring": "Expect the column values to be points that have elevation."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.elevated.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.elevated.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column values to be points that have elevation.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_are_in_language": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_are_in_language.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["langid>=1.1.6"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["nlp", "hackathon"], "contributors": ["@victorwyee"], "requirements": ["langid>=1.1.6"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesAreInLanguage", "snake_name": "expect_column_values_are_in_language", "short_description": "Expect the column to be in a specified language.", "docstring": "Expect the column to be in a specified language.\n\n#### Args:\n- column (str): The column name\n- language (str): One of 97 ISO 639-1 language codes, e.g. af, am, an, ar, as, az, be, bg, bn, br, bs, ca, cs, cy, da, de, dz, el, en, eo, es, et, eu, fa, fi, fo, fr, ga, gl, gu, he, hi, hr, ht, hu, hy, id, is, it, ja, jv, ka, kk, km, kn, ko, ku, ky, la, lb, lo, lt, lv, mg, mk, ml, mn, mr, ms, mt, nb, ne, nl, nn, no, oc, or, pa, pl, ps, pt, qu, ro, ru, rw, se, si, sk, sl, sq, sr, sv, sw, ta, te, th, tl, tr, ug, uk, ur, vi, vo, wa, xh, zh, zu\n\n#### Notes:\n- * Language identification uses the [langid package](https://github.com/saffsd/langid.py).\n- * langid uses a custom, permissive [LICENSE](https://github.com/saffsd/langid.py/blob/master/LICENSE), suitable for commercial purposes.\n* Results may be inaccurate for strings shorter than 50 characters.\n* No confidence threshold has been set, so language with the highest confidence will be selected, even if confidence is low.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.are_in_language.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.are_in_language.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column to be in a specified language.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 5.0}, "expect_column_values_bic_belong_to_country": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_bic_belong_to_country.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["schwifty"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip", "@mkopec87"], "requirements": ["schwifty"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesBicBelongToCountry", "snake_name": "expect_column_values_bic_belong_to_country", "short_description": "Expect the provided BIC (Business Identifier Code) in the country which code (alpha-2) passed in the parameters.", "docstring": "Expect the provided BIC (Business Identifier Code) in the country which code (alpha-2) passed in the parameters."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.bic_belong_to_country.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.bic_belong_to_country.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the provided BIC (Business Identifier Code) in the country which code (alpha-2) passed in the parameters.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_bitcoin_address_positive_balance": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_bitcoin_address_positive_balance.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["coinaddrvalidator", "blockcypher"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["coinaddrvalidator", "blockcypher"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesBitcoinAddressPositiveBalance", "snake_name": "expect_column_values_bitcoin_address_positive_balance", "short_description": "Expect column values Bitcoin address has got positive balance (>0).", "docstring": "Expect column values Bitcoin address has got positive balance (>0)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_bitcoin_address_positive_balance.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_bitcoin_address_positive_balance.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values Bitcoin address has got positive balance (>0).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_bitcoin_tx_is_confirmed": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_bitcoin_tx_is_confirmed.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["blockcypher"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["blockcypher"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesBitcoinTxIsConfirmed", "snake_name": "expect_column_values_bitcoin_tx_is_confirmed", "short_description": "Expect column values Bitcoin transaction hash is confirmed.", "docstring": "Expect column values Bitcoin transaction hash is confirmed."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.bitcoin_tx_is_confirmed.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.bitcoin_tx_is_confirmed.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values Bitcoin transaction hash is confirmed.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_email_domain_is_not_disposable": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_email_domain_is_not_disposable.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["disposable_email_domains"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["disposable_email_domains"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesEmailDomainIsNotDisposable", "snake_name": "expect_column_values_email_domain_is_not_disposable", "short_description": "Expect column values email's domain is not disposable.", "docstring": "Expect column values email's domain is not disposable."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.email_domain_is_not_disposable.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.email_domain_is_not_disposable.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values email's domain is not disposable.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_eth_address_positive_balance": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_eth_address_positive_balance.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["coinaddrvalidator", "blockcypher"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["coinaddrvalidator", "blockcypher"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesEthAddressPositiveBalance", "snake_name": "expect_column_values_eth_address_positive_balance", "short_description": "Expect column values Ethereum address has got positive balance (>0).", "docstring": "Expect column values Ethereum address has got positive balance (>0)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_eth_address_positive_balance.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_eth_address_positive_balance.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 1, "num_failed": 1, "failing_names": ["basic_positive_test"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values Ethereum address has got positive balance (>0).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "Only 1 / 2 tests for pandas are passing", "passed": false}, {"message": "  - Failing: basic_positive_test", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 1.5}, "expect_column_values_imsi_belong_to_country_code": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_imsi_belong_to_country_code.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["python-stdnum"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["python-stdnum"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesImsiBelongToCountryCode", "snake_name": "expect_column_values_imsi_belong_to_country_code", "short_description": "Expect the provided IMSI belong to country which code passed in the parameters.", "docstring": "Expect the provided IMSI belong to country which code passed in the parameters."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.imsi_belong_to_country_code.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.imsi_belong_to_country_code.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the provided IMSI belong to country which code passed in the parameters.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_ip_address_in_network": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_ip_address_in_network.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesIpAddressInNetwork", "snake_name": "expect_column_values_ip_address_in_network", "short_description": "Expect column values to be IP addresses in the specified network ranges.", "docstring": "Expect column values to be IP addresses in the specified network ranges."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.ip_address_in_network.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.ip_address_in_network.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be IP addresses in the specified network ranges.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_ip_asn_country_code_in_set": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_ip_asn_country_code_in_set.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["dnspython", "ipwhois"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["dnspython", "ipwhois"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesIpAsnCountryCodeInSet", "snake_name": "expect_column_values_ip_asn_country_code_in_set", "short_description": "Expect the provided IP address ASN country code in set.", "docstring": "Expect the provided IP address ASN country code in set."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.ip_asn_country_code_in_set.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.ip_asn_country_code_in_set.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the provided IP address ASN country code in set.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_ip_is_not_blacklisted": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_ip_is_not_blacklisted.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["pydnsbl"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["pydnsbl"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesIpIsNotBlacklisted", "snake_name": "expect_column_values_ip_is_not_blacklisted", "short_description": "Expect IP address to not be on blacklists.", "docstring": "Expect IP address to not be on blacklists."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.ip_is_not_blacklisted.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.ip_is_not_blacklisted.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 1, "num_failed": 1, "failing_names": ["basic_positive_test"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect IP address to not be on blacklists.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "Only 1 / 2 tests for pandas are passing", "passed": false}, {"message": "  - Failing: basic_positive_test", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 1.5}, "expect_column_values_password_is_not_leaked": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_password_is_not_leaked.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["pwnedpasswords"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["pwnedpasswords"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesPasswordIsNotLeaked", "snake_name": "expect_column_values_password_is_not_leaked", "short_description": "Expect column values password not leaked (according to haveibeenpwned's API).", "docstring": "Expect column values password not leaked (according to haveibeenpwned's API)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.password_is_not_leaked.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.password_is_not_leaked.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values password not leaked (according to haveibeenpwned's API).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_a_non_bot_user_agent": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_a_non_bot_user_agent.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["user_agents"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental"], "contributors": ["@ktshannon"], "requirements": ["user_agents"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeANonBotUserAgent", "snake_name": "expect_column_values_to_be_a_non_bot_user_agent", "short_description": "Expect column values to be non-bot user agents.", "docstring": "Expect column values to be non-bot user agents."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.equal_non_bot_user_agent.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.equal_non_bot_user_agent.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 1, "num_failed": 1, "failing_names": ["negative_test_with_mostly"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be non-bot user agents.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "Only 1 / 2 tests for pandas are passing", "passed": false}, {"message": "  - Failing: negative_test_with_mostly", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 1.5}, "expect_column_values_to_be_ascii": {"updated_at": "2023-04-19 09:29:12 -0700 7 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_ascii.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental", "hackathon-20200123"], "contributors": ["@jsteinberg4", "@vraimondi04", "@talagluck", "@lodeous", "@rexboyce", "@bragleg"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeAscii", "snake_name": "expect_column_values_to_be_ascii", "short_description": "Expect the set of column values to be ASCII characters.", "docstring": "Expect the set of column values to be ASCII characters.\n\nexpect_column_values_to_be_ascii is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The provided column name\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.are_ascii.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.are_ascii.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the set of column values to be ASCII characters.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 12.0}, "expect_column_values_to_be_daytime": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_daytime.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["ephem"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["ephem"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeDaytime", "snake_name": "expect_column_values_to_be_daytime", "short_description": "Expect the provided timestamp is daytime at the given GPS coordinate (latitude, longitude).", "docstring": "Expect the provided timestamp is daytime at the given GPS coordinate (latitude, longitude)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.daytime.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.daytime.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the provided timestamp is daytime at the given GPS coordinate (latitude, longitude).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_fibonacci_number": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_fibonacci_number.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeFibonacciNumber", "snake_name": "expect_column_values_to_be_fibonacci_number", "short_description": "Expect column values to be Fibonacci numbers.", "docstring": "Expect column values to be Fibonacci numbers."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_fibonacci_number.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_fibonacci_number.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be Fibonacci numbers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_gtin_base_unit": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_gtin_base_unit.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["gtin"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["gtin"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeGtinBaseUnit", "snake_name": "expect_column_values_to_be_gtin_base_unit", "short_description": "Expect column values to be GTIN base unit.", "docstring": "Expect column values to be GTIN base unit."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.gtin_base_unit.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.gtin_base_unit.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be GTIN base unit.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_gtin_variable_measure_trade_item": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_gtin_variable_measure_trade_item.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["gtin"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["gtin"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeGtinVariableMeasureTradeItem", "snake_name": "expect_column_values_to_be_gtin_variable_measure_trade_item", "short_description": "Expect column values to be GTIN variable measure trade item.", "docstring": "Expect column values to be GTIN variable measure trade item."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.gtin_variable_measure_trade_item.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.gtin_variable_measure_trade_item.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be GTIN variable measure trade item.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_icd_ten_category_or_subcategory": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_icd_ten_category_or_subcategory.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["simple_icd_10"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "semantic-type", "experimental", "typed-entities"], "contributors": ["@andyjessen"], "requirements": ["simple_icd_10"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeIcdTenCategoryOrSubcategory", "snake_name": "expect_column_values_to_be_icd_ten_category_or_subcategory", "short_description": "Expect column values to consist only of ICD-10 categories or subcategories.", "docstring": "Expect column values to consist only of ICD-10 categories or subcategories."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_valid_icd_ten_category_or_subcategory.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_valid_icd_ten_category_or_subcategory.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to consist only of ICD-10 categories or subcategories.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 5.0}, "expect_column_values_to_be_iso_languages": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_iso_languages.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["pycountry"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["pycountry"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeIsoLanguages", "snake_name": "expect_column_values_to_be_iso_languages", "short_description": "Expect value to be valid ISO 639-3 languages.", "docstring": "Expect value to be valid ISO 639-3 languages."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_iso_languages.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_iso_languages.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect value to be valid ISO 639-3 languages.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_not_holiday": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_not_holiday.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["holidays"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["holidays"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeNotHoliday", "snake_name": "expect_column_values_to_be_not_holiday", "short_description": "Expect the provided dates are not holiday in the given country (in parameter).", "docstring": "Expect the provided dates are not holiday in the given country (in parameter)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.to_be_not_holiday.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.to_be_not_holiday.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the provided dates are not holiday in the given country (in parameter).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_prime_number": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_prime_number.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["sympy"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["sympy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBePrimeNumber", "snake_name": "expect_column_values_to_be_prime_number", "short_description": "Expect column values to be prime numbers.", "docstring": "Expect column values to be prime numbers."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.prime_number.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.prime_number.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be prime numbers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_private_ip_v4": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_private_ip_v4.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBePrivateIpV4", "snake_name": "expect_column_values_to_be_private_ip_v4", "short_description": "Expect column values to be private IPv4 addresses.", "docstring": "Expect column values to be private IPv4 addresses."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_ipv4_private.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_ipv4_private.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be private IPv4 addresses.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_private_ip_v6": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_private_ip_v6.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBePrivateIpV6", "snake_name": "expect_column_values_to_be_private_ip_v6", "short_description": "Expect column values to be private IP v6 addresses.", "docstring": "Expect column values to be private IP v6 addresses."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_ipv6_private.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_ipv6_private.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be private IP v6 addresses.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_private_ipv4_class": {"updated_at": "2023-02-02 21:45:27 -0500 10 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_private_ipv4_class.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBePrivateIpv4Class", "snake_name": "expect_column_values_to_be_private_ipv4_class", "short_description": "Expect column values to be private IPv4 addresses in the given IP class (A, B, C).", "docstring": "Expect column values to be private IPv4 addresses in the given IP class (A, B, C)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.private_ip_class.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.private_ip_class.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be private IPv4 addresses in the given IP class (A, B, C).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_secure_passwords": {"updated_at": "2023-02-02 21:45:27 -0500 10 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_secure_passwords.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "column map expectation"], "contributors": ["@spencerhardwick", "@aworld1", "@carolli014"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeSecurePasswords", "snake_name": "expect_column_values_to_be_secure_passwords", "short_description": "Expect column entries to be secure passwords, as defined by expectation parameters.", "docstring": "Expect column entries to be secure passwords, as defined by expectation parameters.\n\nexpect_column_values_to_be_secure_passwords is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- min_length (int): minimum length\n- min_uppercase (int): minimum number of uppercase letters\n- min_lowercase (int): minimum number of lowercase letters\n- min_special (int): minimum number of special characters (not letters and not digits)\n- min_digits (int): minimum numbers of digits\n- max_consec_numbers (int): max number of consecutive numbers\n- max_consec_letters (int): max number of consecutive letters\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.secure_password.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.secure_password.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column entries to be secure passwords, as defined by expectation parameters.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_slug": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_slug.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeSlug", "snake_name": "expect_column_values_to_be_slug", "short_description": "Expect value to be valid slug.", "docstring": "Expect value to be valid slug."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_slug.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_slug.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect value to be valid slug.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_arxiv_id": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_arxiv_id.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["arxiv"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": ["arxiv"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidArxivId", "snake_name": "expect_column_values_to_be_valid_arxiv_id", "short_description": "Expect column values to be valid arXiv identifiers.", "docstring": "Expect column values to be valid arXiv identifiers."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_arxiv_id.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_arxiv_id.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid arXiv identifiers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_barcode": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_barcode.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["barcodenumber"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["barcodenumber"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidBarcode", "snake_name": "expect_column_values_to_be_valid_barcode", "short_description": "Expect the provided barcodes are valid (barcode type passed in parameter).", "docstring": "Expect the provided barcodes are valid (barcode type passed in parameter).\n\nBarcode types: code39, ean, ean8, ean13, gtin, gtin14, gs1_datamatrix, isbn, isbn10, isbn13, upc\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_barcode.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_barcode.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the provided barcodes are valid (barcode type passed in parameter).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_base32": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_base32.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidBase32", "snake_name": "expect_column_values_to_be_valid_base32", "short_description": "Expect column values to be valid base32 codes.", "docstring": "Expect column values to be valid base32 codes."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_base32.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_base32.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid base32 codes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_base64": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_base64.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidBase64", "snake_name": "expect_column_values_to_be_valid_base64", "short_description": "Expect column values to be valid base64 codes.", "docstring": "Expect column values to be valid base64 codes."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_base64.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_base64.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid base64 codes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_bch_address": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_bch_address.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["coinaddrvalidator"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["coinaddrvalidator"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidBchAddress", "snake_name": "expect_column_values_to_be_valid_bch_address", "short_description": "Expect column values to be valid Bitcoin Cash addresses.", "docstring": "Expect column values to be valid Bitcoin Cash addresses."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_bch_address.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_bch_address.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid Bitcoin Cash addresses.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_bic": {"updated_at": "2023-04-19 09:29:12 -0700 7 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_bic.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["schwifty"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip", "@mkopec87"], "requirements": ["schwifty"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidBic", "snake_name": "expect_column_values_to_be_valid_bic", "short_description": "Expect column values to be valid BIC (Business Identifier Code).", "docstring": "Expect column values to be valid BIC (Business Identifier Code)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_bic.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_bic.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid BIC (Business Identifier Code).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_bitcoin_address": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_bitcoin_address.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["coinaddrvalidator"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["coinaddrvalidator"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidBitcoinAddress", "snake_name": "expect_column_values_to_be_valid_bitcoin_address", "short_description": "Expect column values to be valid Bitcoin addresses.", "docstring": "Expect column values to be valid Bitcoin addresses."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_bitcoin_address.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_bitcoin_address.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid Bitcoin addresses.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_city_name": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_city_name.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["geonamescache"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["geonamescache"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidCityName", "snake_name": "expect_column_values_to_be_valid_city_name", "short_description": "Expect values in this column to be valid city names.", "docstring": "Expect values in this column to be valid city names.\n\nSee https://github.com/yaph/geonamescache for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_city_name.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_city_name.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid city names.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_country": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_country.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["geonamescache"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["geonamescache"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidCountry", "snake_name": "expect_column_values_to_be_valid_country", "short_description": "Expect values in this column to be valid country names.", "docstring": "Expect values in this column to be valid country names.\nSee https://github.com/yaph/geonamescache for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_country.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_country.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid country names.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_country_fip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_country_fip.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["geonamescache"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["geonamescache"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidCountryFip", "snake_name": "expect_column_values_to_be_valid_country_fip", "short_description": "Expect values in this column to be valid country fip code.", "docstring": "Expect values in this column to be valid country fip code.\n\nSee https://github.com/yaph/geonamescache for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_country_fip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_country_fip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid country fip code.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_crypto_ticker": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_crypto_ticker.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["cryptocompare"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": ["cryptocompare"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidCryptoTicker", "snake_name": "expect_column_values_to_be_valid_crypto_ticker", "short_description": "Expect column values to be valid cryptocurrency tickers.", "docstring": "Expect column values to be valid cryptocurrency tickers."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_crypto_ticker.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_crypto_ticker.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid cryptocurrency tickers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_currency_code": {"updated_at": "2023-07-26 15:04:46 -0400 4 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_currency_code.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["py-moneyed"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["hackathon", "currency", "type-entities", "semantic-types"], "contributors": ["@lucasasmith@calvingdu"], "requirements": ["py-moneyed"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidCurrencyCode", "snake_name": "expect_column_values_to_be_valid_currency_code", "short_description": "Expect values in this column to be valid currency codes (three capital letters).", "docstring": "Expect values in this column to be valid currency codes (three capital letters).\n\nSee ISO-4217 for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.currency_code.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.currency_code.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 0, "num_failed": 2, "failing_names": ["positive_test_with_currency_codes", "negative_test_with_currency_codes"]}, {"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid currency codes (three capital letters).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}, {"message": "Only 0 / 2 tests for spark are passing", "passed": false}, {"message": "  - Failing: positive_test_with_currency_codes, negative_test_with_currency_codes", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 3.0}, "expect_column_values_to_be_valid_dash_address": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_dash_address.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["coinaddrvalidator"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["coinaddrvalidator"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidDashAddress", "snake_name": "expect_column_values_to_be_valid_dash_address", "short_description": "Expect column values to be valid Dashcoin addresses.", "docstring": "Expect column values to be valid Dashcoin addresses."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_dash_address.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_dash_address.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid Dashcoin addresses.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_date": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_date.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidDate", "snake_name": "expect_column_values_to_be_valid_date", "short_description": "Expect column values to be valid dates.", "docstring": "Expect column values to be valid dates."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_date.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_date.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid dates.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for trino are passing", "passed": true}, {"message": "All 2 tests for mssql are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for trino are passing", "passed": true}, {"message": "All 2 tests for mssql are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 29.0}, "expect_column_values_to_be_valid_doge_address": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_doge_address.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["coinaddrvalidator"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["coinaddrvalidator"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidDogeAddress", "snake_name": "expect_column_values_to_be_valid_doge_address", "short_description": "Expect column values to be valid Dogecoin addresses.", "docstring": "Expect column values to be valid Dogecoin addresses."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_doge_address.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_doge_address.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid Dogecoin addresses.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_doi": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_doi.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidDoi", "snake_name": "expect_column_values_to_be_valid_doi", "short_description": "Expect column values to be valid DOI format.", "docstring": "Expect column values to be valid DOI format."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_doi.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_doi.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid DOI format.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_dot_address": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_dot_address.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["coinaddrvalidator"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["coinaddrvalidator"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidDotAddress", "snake_name": "expect_column_values_to_be_valid_dot_address", "short_description": "Expect column values to be valid Polkadot addresses.", "docstring": "Expect column values to be valid Polkadot addresses."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_dot_address.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_dot_address.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid Polkadot addresses.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_dow_ticker": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_dow_ticker.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["yahoo_fin"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": ["yahoo_fin"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidDowTicker", "snake_name": "expect_column_values_to_be_valid_dow_ticker", "short_description": "Expect column values to be valid Dow Jones tickers.", "docstring": "Expect column values to be valid Dow Jones tickers."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_dow_ticker.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_dow_ticker.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid Dow Jones tickers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_ean": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_ean.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["python-stdnum"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["python-stdnum"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidEan", "snake_name": "expect_column_values_to_be_valid_ean", "short_description": "Expect column values to be valid EAN (International Article Number).", "docstring": "Expect column values to be valid EAN (International Article Number)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_ean.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_ean.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid EAN (International Article Number).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_eth_address": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_eth_address.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["cryptoaddress"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": ["cryptoaddress"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidEthAddress", "snake_name": "expect_column_values_to_be_valid_eth_address", "short_description": "Expect column values to be valid ETH addresses.", "docstring": "Expect column values to be valid ETH addresses."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_eth_address.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_eth_address.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid ETH addresses.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_ethereum_address": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_ethereum_address.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["coinaddrvalidator"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["coinaddrvalidator"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidEthereumAddress", "snake_name": "expect_column_values_to_be_valid_ethereum_address", "short_description": "Expect column values to be valid Ethereum addresses.", "docstring": "Expect column values to be valid Ethereum addresses."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_eth_address.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_eth_address.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid Ethereum addresses.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_formatted_vat": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_formatted_vat.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["pyvat"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["pyvat"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidFormattedVat", "snake_name": "expect_column_values_to_be_valid_formatted_vat", "short_description": "Expect column values to be valid formatted VAT (Value Added Tax).", "docstring": "Expect column values to be valid formatted VAT (Value Added Tax)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_formatted_vat.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_formatted_vat.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid formatted VAT (Value Added Tax).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_hashtag": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_hashtag.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidHashtag", "snake_name": "expect_column_values_to_be_valid_hashtag", "short_description": "Expect column values to be valid #hashtags.", "docstring": "Expect column values to be valid #hashtags."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_hashtag.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_hashtag.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid #hashtags.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_hex_color": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_hex_color.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidHexColor", "snake_name": "expect_column_values_to_be_valid_hex_color", "short_description": "Expect column values to be valid hexadecimal color codes.", "docstring": "Expect column values to be valid hexadecimal color codes."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_hexcolor.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_hexcolor.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid hexadecimal color codes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_http_method": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_http_method.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidHttpMethod", "snake_name": "expect_column_values_to_be_valid_http_method", "short_description": "Expect column values to be valid HTTP methods.", "docstring": "Expect column values to be valid HTTP methods."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_http_method.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_http_method.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid HTTP methods.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_http_methods": {"updated_at": "2023-01-12 14:13:11 -0600 10 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_http_methods.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib SetBasedColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["type-entities", "hackathon", "set-based"], "contributors": ["@zachlindsey"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidHTTPMethods", "snake_name": "expect_column_values_to_be_valid_http_methods", "short_description": "Expect column values to be valid HTTP methods.", "docstring": "Expect column values to be valid HTTP methods.\n\nGET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_http_methods_set.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_http_methods_set.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid HTTP methods.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for trino are passing", "passed": true}, {"message": "All 2 tests for mssql are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for trino are passing", "passed": true}, {"message": "All 2 tests for mssql are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 33.0}, "expect_column_values_to_be_valid_http_status_code": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_http_status_code.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidHttpStatusCode", "snake_name": "expect_column_values_to_be_valid_http_status_code", "short_description": "Expect column values to be valid HTTP status codes.", "docstring": "Expect column values to be valid HTTP status codes."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_http_status_code.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_http_status_code.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid HTTP status codes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_http_status_name": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_http_status_name.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidHttpStatusName", "snake_name": "expect_column_values_to_be_valid_http_status_name", "short_description": "Expect column values to conform to valid HTTP status names.", "docstring": "Expect column values to conform to valid HTTP status names."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_http_status_name.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_http_status_name.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to conform to valid HTTP status names.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_iana_timezone": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_iana_timezone.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["pytz"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["type-entities", "hackathon", "timezone"], "contributors": ["@lucasasmith"], "requirements": ["pytz"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidIanaTimezone", "snake_name": "expect_column_values_to_be_valid_iana_timezone", "short_description": "Expect values in this column to be valid IANA timezone strings.", "docstring": "Expect values in this column to be valid IANA timezone strings.\n\nA full list of valid timezones can be viewed by pytz.all_timezones. See https://www.iana.org/time-zones for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.iana_timezone.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.iana_timezone.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid IANA timezone strings.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 5.0}, "expect_column_values_to_be_valid_iban": {"updated_at": "2023-04-19 09:29:12 -0700 7 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_iban.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["schwifty"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall", "@mkopec87"], "requirements": ["schwifty"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidIban", "snake_name": "expect_column_values_to_be_valid_iban", "short_description": "Expect column values to be valid IBAN format.", "docstring": "Expect column values to be valid IBAN format."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_iban.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_iban.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 0, "num_failed": 2, "failing_names": ["basic_positive_test", "basic_negative_test"]}, {"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid IBAN format.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}, {"message": "Only 0 / 2 tests for spark are passing", "passed": false}, {"message": "  - Failing: basic_positive_test, basic_negative_test", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 3.0}, "expect_column_values_to_be_valid_imdb_id": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_imdb_id.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidImdbId", "snake_name": "expect_column_values_to_be_valid_imdb_id", "short_description": "Expect column values to conform to valid IMDB ID format.", "docstring": "Expect column values to conform to valid IMDB ID format."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_imdb_id.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_imdb_id.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to conform to valid IMDB ID format.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_imei": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_imei.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["python-stdnum"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["python-stdnum"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidImei", "snake_name": "expect_column_values_to_be_valid_imei", "short_description": "Expect column values to be valid IMEI (International Mobile Equipment Identity).", "docstring": "Expect column values to be valid IMEI (International Mobile Equipment Identity)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_imei.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_imei.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid IMEI (International Mobile Equipment Identity).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_imsi": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_imsi.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["python-stdnum"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["python-stdnum"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidImsi", "snake_name": "expect_column_values_to_be_valid_imsi", "short_description": "Expect column values to be valid IMSI (International Mobile Subscriber Identity).", "docstring": "Expect column values to be valid IMSI (International Mobile Subscriber Identity)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_imsi.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_imsi.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid IMSI (International Mobile Subscriber Identity).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_ipv4": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_ipv4.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidIpv4", "snake_name": "expect_column_values_to_be_valid_ipv4", "short_description": "Expect column values to be valid IPv4 addresses.", "docstring": "Expect column values to be valid IPv4 addresses."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_ipv4.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_ipv4.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid IPv4 addresses.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_ipv6": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_ipv6.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidIpv6", "snake_name": "expect_column_values_to_be_valid_ipv6", "short_description": "Expect column values to be valid IPv6 addresses.", "docstring": "Expect column values to be valid IPv6 addresses."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_ipv6.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_ipv6.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 1, "num_failed": 1, "failing_names": ["basic_positive_test"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid IPv6 addresses.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "Only 1 / 2 tests for pandas are passing", "passed": false}, {"message": "  - Failing: basic_positive_test", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 1.5}, "expect_column_values_to_be_valid_isan": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_isan.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["python-stdnum"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["python-stdnum"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidIsan", "snake_name": "expect_column_values_to_be_valid_isan", "short_description": "Expect column values to be valid ISAN (International Standard Audiovisual Number).", "docstring": "Expect column values to be valid ISAN (International Standard Audiovisual Number)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_isan.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_isan.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid ISAN (International Standard Audiovisual Number).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_isbn10": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_isbn10.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["isbnlib"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": ["isbnlib"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidIsbn10", "snake_name": "expect_column_values_to_be_valid_isbn10", "short_description": "Expect column values to be valid ISBN10 format.", "docstring": "Expect column values to be valid ISBN10 format."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_isbn10.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_isbn10.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid ISBN10 format.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_isbn13": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_isbn13.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["isbnlib"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": ["isbnlib"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidIsbn13", "snake_name": "expect_column_values_to_be_valid_isbn13", "short_description": "Expect column values to conform to the valid ISBN13 format.", "docstring": "Expect column values to conform to the valid ISBN13 format."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_isbn13.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_isbn13.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to conform to the valid ISBN13 format.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_isin": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_isin.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["python-stdnum"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["python-stdnum"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidIsin", "snake_name": "expect_column_values_to_be_valid_isin", "short_description": "Expect column values to be valid ISIN (International Securities Identification Number).", "docstring": "Expect column values to be valid ISIN (International Securities Identification Number)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_isin.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_isin.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid ISIN (International Securities Identification Number).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_ismn": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_ismn.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["python-stdnum"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["python-stdnum"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidIsmn", "snake_name": "expect_column_values_to_be_valid_ismn", "short_description": "Expect column values to be valid ISMN (International Standard Music Number).", "docstring": "Expect column values to be valid ISMN (International Standard Music Number)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_ismn.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_ismn.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid ISMN (International Standard Music Number).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_iso_country": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_iso_country.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["pycountry"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": ["pycountry"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidIsoCountry", "snake_name": "expect_column_values_to_be_valid_iso_country", "short_description": "Expect column values to be valid country codes according to ISO 3166.", "docstring": "Expect column values to be valid country codes according to ISO 3166."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_iso_country.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_iso_country.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid country codes according to ISO 3166.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_leap_year": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_leap_year.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidLeapYear", "snake_name": "expect_column_values_to_be_valid_leap_year", "short_description": "Expect column values to be a valid leap year.", "docstring": "Expect column values to be a valid leap year."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_leap_year.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_leap_year.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be a valid leap year.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_ltc_address": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_ltc_address.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["coinaddrvalidator"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["coinaddrvalidator"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidLtcAddress", "snake_name": "expect_column_values_to_be_valid_ltc_address", "short_description": "Expect column values to be valid Litecoin addresses.", "docstring": "Expect column values to be valid Litecoin addresses."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_ltc_address.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_ltc_address.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid Litecoin addresses.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_mac": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_mac.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidMac", "snake_name": "expect_column_values_to_be_valid_mac", "short_description": "Expect column values to be valid MAC addresses.", "docstring": "Expect column values to be valid MAC addresses."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_mac.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_mac.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid MAC addresses.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_mbti": {"updated_at": "2023-08-29 15:27:34 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_mbti.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidMbti", "snake_name": "expect_column_values_to_be_valid_mbti", "short_description": "Expect column values to conform to the valid Myers-Briggs Type Indicator (MBTI).", "docstring": "Expect column values to conform to the valid Myers-Briggs Type Indicator (MBTI)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_mbti.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_mbti.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to conform to the valid Myers-Briggs Type Indicator (MBTI).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_md5": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_md5.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidMd5", "snake_name": "expect_column_values_to_be_valid_md5", "short_description": "Expect column values to be valid MD5 hashes.", "docstring": "Expect column values to be valid MD5 hashes."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_md5.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_md5.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid MD5 hashes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_meid": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_meid.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["python-stdnum"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["python-stdnum"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidMeid", "snake_name": "expect_column_values_to_be_valid_meid", "short_description": "Expect column values to be valid MEID (Mobile Equipment Identifier).", "docstring": "Expect column values to be valid MEID (Mobile Equipment Identifier)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_meid.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_meid.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid MEID (Mobile Equipment Identifier).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_mic": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_mic.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["pandas"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["pandas"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidMic", "snake_name": "expect_column_values_to_be_valid_mic", "short_description": "Expect column values to be valid MIC code (ISO10383).", "docstring": "Expect column values to be valid MIC code (ISO10383)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_mic.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_mic.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid MIC code (ISO10383).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_mic_match_country_code": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_mic_match_country_code.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["pandas"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["pandas"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidMicMatchCountryCode", "snake_name": "expect_column_values_to_be_valid_mic_match_country_code", "short_description": "Expect the provided MIC (Market Identifier Code) according to country which code (ISO3166) passed in the parameters.", "docstring": "Expect the provided MIC (Market Identifier Code) according to country which code (ISO3166) passed in the parameters."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_mic_match_country_code.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_mic_match_country_code.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the provided MIC (Market Identifier Code) according to country which code (ISO3166) passed in the parameters.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_mime": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_mime.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidMIME", "snake_name": "expect_column_values_to_be_valid_mime", "short_description": "Expect column values to be valid MIME types.", "docstring": "Expect column values to be valid MIME types."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_mime.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_mime.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid MIME types.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_nasdaq_ticker": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_nasdaq_ticker.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["yahoo_fin"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": ["yahoo_fin"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidNasdaqTicker", "snake_name": "expect_column_values_to_be_valid_nasdaq_ticker", "short_description": "Expect column values to be valid Nasdaq tickers.", "docstring": "Expect column values to be valid Nasdaq tickers."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_nasdaq_ticker.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_nasdaq_ticker.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid Nasdaq tickers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_open_library_id": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_open_library_id.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidOpenLibraryId", "snake_name": "expect_column_values_to_be_valid_open_library_id", "short_description": "Expect column values to conform to the valid Open Library ID format.", "docstring": "Expect column values to conform to the valid Open Library ID format."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_open_library_id.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_open_library_id.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to conform to the valid Open Library ID format.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_orcid": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_orcid.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidOrcid", "snake_name": "expect_column_values_to_be_valid_orcid", "short_description": "Expect column values to conform to valid ORCID format.", "docstring": "Expect column values to conform to valid ORCID format."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_orcid.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_orcid.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to conform to valid ORCID format.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_phonenumber": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_phonenumber.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["phonenumbers"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": ["phonenumbers"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidPhonenumber", "snake_name": "expect_column_values_to_be_valid_phonenumber", "short_description": "Expect column values to be valid phone numbers.", "docstring": "Expect column values to be valid phone numbers."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_phonenumber.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_phonenumber.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid phone numbers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_powerful_number": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_powerful_number.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["primefac"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": ["primefac"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidPowerfulNumber", "snake_name": "expect_column_values_to_be_valid_powerful_number", "short_description": "Expect column values to be valid powerful numbers.", "docstring": "Expect column values to be valid powerful numbers."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_powerful_number.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_powerful_number.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid powerful numbers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_price": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_price.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["price_parser"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": ["price_parser"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidPrice", "snake_name": "expect_column_values_to_be_valid_price", "short_description": "Expect column values to conform to valid price formats.", "docstring": "Expect column values to conform to valid price formats."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_price.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_price.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to conform to valid price formats.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_pronic_number": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_pronic_number.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidPronicNumber", "snake_name": "expect_column_values_to_be_valid_pronic_number", "short_description": "Expect column values to be valid pronic numbers.", "docstring": "Expect column values to be valid pronic numbers."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_pronic_number.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_pronic_number.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid pronic numbers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_pubmed_id": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_pubmed_id.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidPubmedId", "snake_name": "expect_column_values_to_be_valid_pubmed_id", "short_description": "Expect column values to conform to the valid PubMed ID format.", "docstring": "Expect column values to conform to the valid PubMed ID format."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_pubmed_id.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_pubmed_id.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to conform to the valid PubMed ID format.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_roman_numeral": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_roman_numeral.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidRomanNumeral", "snake_name": "expect_column_values_to_be_valid_roman_numeral", "short_description": "Expect column values to be valid Roman Numerals.", "docstring": "Expect column values to be valid Roman Numerals."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_roman_numeral.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_roman_numeral.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid Roman Numerals.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_semiprime": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_semiprime.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["primefac"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": ["primefac"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidSemiprime", "snake_name": "expect_column_values_to_be_valid_semiprime", "short_description": "Expect column values to be valid semiprime codes.", "docstring": "Expect column values to be valid semiprime codes."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_semiprime.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_semiprime.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid semiprime codes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_sha1": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_sha1.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidSha1", "snake_name": "expect_column_values_to_be_valid_sha1", "short_description": "Expect column values to be valid SHA1 hashes.", "docstring": "Expect column values to be valid SHA1 hashes."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_sha1.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_sha1.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid SHA1 hashes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_sp500_ticker": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_sp500_ticker.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["yahoo_fin"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": ["yahoo_fin"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidSp500Ticker", "snake_name": "expect_column_values_to_be_valid_sp500_ticker", "short_description": "Expect column values to be valid S&P 500 tickers.", "docstring": "Expect column values to be valid S&P 500 tickers."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_sp500_ticker.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_sp500_ticker.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 1, "num_failed": 1, "failing_names": ["basic_positive_test"]}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid S&P 500 tickers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "Only 1 / 2 tests for pandas are passing", "passed": false}, {"message": "  - Failing: basic_positive_test", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 1.5}, "expect_column_values_to_be_valid_sphenic_number": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_sphenic_number.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["primefac"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": ["primefac"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidSphenicNumber", "snake_name": "expect_column_values_to_be_valid_sphenic_number", "short_description": "Expect column values to be valid sphenic numbers.", "docstring": "Expect column values to be valid sphenic numbers."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_sphenic_number.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_sphenic_number.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid sphenic numbers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_square_free_number": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_square_free_number.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidSquareFreeNumber", "snake_name": "expect_column_values_to_be_valid_square_free_number", "short_description": "Expect column values to be valid square-free numbers.", "docstring": "Expect column values to be valid square-free numbers."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_square_free_number.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_square_free_number.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid square-free numbers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_ssn": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_ssn.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidSsn", "snake_name": "expect_column_values_to_be_valid_ssn", "short_description": "Expect column values to conform to the valid Social Security Number format.", "docstring": "Expect column values to conform to the valid Social Security Number format."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_ssn.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_ssn.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to conform to the valid Social Security Number format.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_stellar_address": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_stellar_address.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["coinaddrvalidator"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["coinaddrvalidator"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidStellarAddress", "snake_name": "expect_column_values_to_be_valid_stellar_address", "short_description": "Expect column values to be valid Stellar addresses.", "docstring": "Expect column values to be valid Stellar addresses."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_stellar_address.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_stellar_address.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid Stellar addresses.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_tcp_port": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_tcp_port.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidTcpPort", "snake_name": "expect_column_values_to_be_valid_tcp_port", "short_description": "Expect column values to be valid TCP port numbers.", "docstring": "Expect column values to be valid TCP port numbers."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_tcp_port.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_tcp_port.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid TCP port numbers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_temperature": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_temperature.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidTemperature", "snake_name": "expect_column_values_to_be_valid_temperature", "short_description": "Expect column values to be valid temperatures.", "docstring": "Expect column values to be valid temperatures."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_temperature.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_temperature.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid temperatures.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_tld": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_tld.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["requests"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["requests"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidTld", "snake_name": "expect_column_values_to_be_valid_tld", "short_description": "Expect value to be valid TLD (top level domain name) according to most recent official IANA list (http://data.iana.org/TLD/tlds-alpha-by-domain.txt).", "docstring": "Expect value to be valid TLD (top level domain name) according to most recent official IANA list (http://data.iana.org/TLD/tlds-alpha-by-domain.txt)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_tld.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_tld.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect value to be valid TLD (top level domain name) according to most recent official IANA list (http://data.iana.org/TLD/tlds-alpha-by-domain.txt).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_udp_port": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_udp_port.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon", "typed-entities"], "contributors": ["@voidforall"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidUdpPort", "snake_name": "expect_column_values_to_be_valid_udp_port", "short_description": "Expect column values to be valid UDP port numbers.", "docstring": "Expect column values to be valid UDP port numbers."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_udp_port.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_udp_port.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid UDP port numbers.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_urls": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_urls.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental", "hackathon"], "contributors": ["@ckathleen"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidUrls", "snake_name": "expect_column_values_to_be_valid_urls", "short_description": "Expect the column to be a valid url.  Maps row values to regex to check if value is a valid url.", "docstring": "Expect the column to be a valid url. Maps row values to regex to check if value is a valid url."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_urls.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.to_be_valid_urls.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column to be a valid url.  Maps row values to regex to check if value is a valid url.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_us_county_fip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_us_county_fip.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["geonamescache"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["geonamescache"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidUSCountyFip", "snake_name": "expect_column_values_to_be_valid_us_county_fip", "short_description": "Expect values in this column to be valid us county fip codes.", "docstring": "Expect values in this column to be valid us county fip codes.\n\nSee https://github.com/yaph/geonamescache for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_us_county_fip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_us_county_fip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid us county fip codes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_us_county_name": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_us_county_name.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["geonamescache"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["geonamescache"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidUSCountyName", "snake_name": "expect_column_values_to_be_valid_us_county_name", "short_description": "Expect values in this column to be valid us county names.", "docstring": "Expect values in this column to be valid us county names.\n\nSee https://github.com/yaph/geonamescache for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_us_county_name.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_us_county_name.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid us county names.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_us_state": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_us_state.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["us"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["us"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidUSState", "snake_name": "expect_column_values_to_be_valid_us_state", "short_description": "Expect values in this column to be valid state abbreviations.", "docstring": "Expect values in this column to be valid state abbreviations.\n\nSee https://pypi.org/project/us/ for more information. DC statehood is a perennial issue in data science, and the owners of the us repo addressed it differently than we have: https://github.com/unitedstates/python-us/issues/50. dc_statehood defaults to True, though can be overriden by end users\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_us_state.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_us_state.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid state abbreviations.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_us_state_abbreviation": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_us_state_abbreviation.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["us"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["us"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidUSStateAbbreviation", "snake_name": "expect_column_values_to_be_valid_us_state_abbreviation", "short_description": "Expect values in this column to be valid state abbreviations.", "docstring": "Expect values in this column to be valid state abbreviations.\n\nSee https://pypi.org/project/us/ for more information. DC statehood is a perennial issue in data science, and the owners of the us repo addressed it differently than we have: https://github.com/unitedstates/python-us/issues/50. dc_statehood defaults to True, though can be overriden by end users\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_state_abbreviation.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_state_abbreviation.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid state abbreviations.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_us_state_or_territory": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_us_state_or_territory.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["us"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["us"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidUSStateOrTerritory", "snake_name": "expect_column_values_to_be_valid_us_state_or_territory", "short_description": "Expect values in this column to be valid state abbreviations.", "docstring": "Expect values in this column to be valid state abbreviations.\nSee https://pypi.org/project/us/ for more information.\nDC statehood is a perennial issue in data science, and the owners of the us repo addressed it differently than we have: https://github.com/unitedstates/python-us/issues/50\ndc_statehood defaults to True, though can be overriden by end users\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_us_state_or_territory.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_us_state_or_territory.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid state abbreviations.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_us_state_or_territory_abbreviation": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_us_state_or_territory_abbreviation.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["us"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["us"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidUSStateOrTerritoryAbbreviation", "snake_name": "expect_column_values_to_be_valid_us_state_or_territory_abbreviation", "short_description": "Expect values in this column to be valid state or territory abbreviations.", "docstring": "Expect values in this column to be valid state or territory abbreviations.\nSee https://pypi.org/project/us/ for more information.\nDC statehood is a perennial issue in data science, and the owners of the us repo addressed it differently than we have: https://github.com/unitedstates/python-us/issues/50\ndc_statehood defaults to True, though can be overriden by end users\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_state_or_territory_abbreviation.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_state_or_territory_abbreviation.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid state or territory abbreviations.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_uuid": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_uuid.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["typed-entities"], "contributors": ["@joshua-stauffer", "@asafla"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidUUID", "snake_name": "expect_column_values_to_be_valid_uuid", "short_description": "Expect column values to conform to valid UUID format.", "docstring": "Expect column values to conform to valid UUID format."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_uuid.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_uuid.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 0, "num_failed": 2, "failing_names": ["basic_positive_test", "basic_negative_test"]}, {"backend": "mssql", "num_passed": 0, "num_failed": 2, "failing_names": ["basic_positive_test", "basic_negative_test"]}, {"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to conform to valid UUID format.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}, {"message": "Only 0 / 2 tests for trino are passing", "passed": false}, {"message": "  - Failing: basic_positive_test, basic_negative_test", "passed": false}, {"message": "Only 0 / 2 tests for mssql are passing", "passed": false}, {"message": "  - Failing: basic_positive_test, basic_negative_test", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 19.0}, "expect_column_values_to_be_valid_vies_vat": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_vies_vat.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["pyvat"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["pyvat"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidViesVat", "snake_name": "expect_column_values_to_be_valid_vies_vat", "short_description": "Expect column values to be valid VAT (Value Added Tax) according to VIES (VAT Information Exchange System).", "docstring": "Expect column values to be valid VAT (Value Added Tax) according to VIES (VAT Information Exchange System)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_vies_vat.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_vies_vat.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid VAT (Value Added Tax) according to VIES (VAT Information Exchange System).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_wikipedia_articles": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_valid_wikipedia_articles.py", "package": "great_expectations_semantic_types_expectations", "requirements": ["requests"], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental"], "contributors": ["@annaliuu", "@wangzhongyi0510"], "requirements": ["requests"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidWikipediaArticles", "snake_name": "expect_column_values_to_be_valid_wikipedia_articles", "short_description": "Expect column values to be valid Wikipedia article titles/slugs.", "docstring": "Expect column values to be valid Wikipedia article titles/slugs.\n\nIt simply plugs the column value into the Wikipedia URL and checks whether the HTTP status code is 200. This Expectation can be used as a template for other (or a more generic) \"does this website exist\" type checks, e.g. for things like user handles, dictionary entries, etc.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_wikipedia_articles.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_wikipedia_articles.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be valid Wikipedia article titles/slugs.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_vectors": {"updated_at": "2023-02-02 21:45:27 -0500 10 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_vectors.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["experimental", "datatypes", "column map expectation"], "contributors": ["@manyshapes"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeVectors", "snake_name": "expect_column_values_to_be_vectors", "short_description": "Expect column values to be vectors.", "docstring": "Expect column values to be vectors."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.is_vector.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.is_vector.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be vectors.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_weekday": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_be_weekday.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeWeekday", "snake_name": "expect_column_values_to_be_weekday", "short_description": "Expect column values to be weekdays.", "docstring": "Expect column values to be weekdays."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.weekday.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.weekday.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be weekdays.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_contain_valid_email": {"updated_at": "2023-02-02 21:45:27 -0500 10 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_contain_valid_email.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "column map expectation"], "contributors": ["@aworld1", "@enagola", "@spencerhardwick", "@vinodkri1", "@degulati", "@ljohnston931", "@rexboyce", "@lodeous", "@sophiarawlings", "@vtdangg"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToContainValidEmail", "snake_name": "expect_column_values_to_contain_valid_email", "short_description": "Expect values in given column to be valid email addresses.", "docstring": "Expect values in given column to be valid email addresses."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_email.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_email.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 8, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in given column to be valid email addresses.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 8 tests for spark are passing", "passed": true}, {"message": "All 8 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 8 tests for spark are passing", "passed": true}, {"message": "All 8 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 20.0}, "expect_column_values_to_have_valid_icd10_code_format": {"updated_at": "2023-01-12 14:13:11 -0600 10 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_to_have_valid_icd10_code_format.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib RegexBasedColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["typed-entities", "hackathon"], "contributors": ["@zachlindsey", "@mkopec87"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToHaveValidICD10CodeFormat", "snake_name": "expect_column_values_to_have_valid_icd10_code_format", "short_description": "Expect column values to have valid ICD10 code format.", "docstring": "Expect column values to have valid ICD10 code format.\n\nChecks if each value matches a regex for ICD10 codes. Does NOT ensure the given code actually exists in any version of the ICD10.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_icd10_codes_regex.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_icd10_codes_regex.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to have valid ICD10 code format.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for trino are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for spark are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for trino are passing", "passed": true}, {"message": "All 2 tests for pandas are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 21.0}, "expect_column_values_url_has_got_valid_cert": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_url_has_got_valid_cert.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesUrlHasGotValidCert", "snake_name": "expect_column_values_url_has_got_valid_cert", "short_description": "Expect provided url has got valid cert. (NotBefore < now < NotAfter).", "docstring": "Expect provided url has got valid cert. (NotBefore < now < NotAfter)."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_cert.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_cert.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect provided url has got valid cert. (NotBefore < now < NotAfter).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_url_hostname_match_with_cert": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_url_hostname_match_with_cert.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesUrlHostnameMatchWithCert", "snake_name": "expect_column_values_url_hostname_match_with_cert", "short_description": "Expect provided url's hostname match with cert.", "docstring": "Expect provided url's hostname match with cert."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_cert.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_cert.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect provided url's hostname match with cert.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_url_is_available": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_semantic_types_expectations/great_expectations_semantic_types_expectations/expectations/expect_column_values_url_is_available.py", "package": "great_expectations_semantic_types_expectations", "requirements": [], "import_module_args": ["great_expectations_semantic_types_expectations.expectations"], "sys_path": "../../contrib/great_expectations_semantic_types_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesUrlIsAvailable", "snake_name": "expect_column_values_url_is_available", "short_description": "Expect column values's URL is available.", "docstring": "Expect column values's URL is available."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.url_is_available.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.url_is_available.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values's URL is available.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_us_zipcode_within_mile_radius_of_given_zipcode": {"updated_at": "2023-01-04 20:52:17 -0500 11 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_us_zipcode_within_mile_radius_of_given_zipcode.py", "package": "great_expectations_zipcode_expectations", "requirements": ["uszipcode", "sqlalchemy"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["experimental", "hackathon-20200123"], "contributors": ["@sethdmay", "@maximetokman", "@talagluck", "@mmi333"], "requirements": ["uszipcode", "sqlalchemy"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeUSZipcodeWithinMileRadiusOfGivenZipcode", "snake_name": "expect_column_values_to_be_us_zipcode_within_mile_radius_of_given_zipcode", "short_description": "Expect column values to be US zip codes within a specified number of miles of a given zipcode.", "docstring": "Expect column values to be US zip codes within a specified number of miles of a given zipcode."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.us_zipcode_within_radius_of_given_zipcode.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.us_zipcode_within_radius_of_given_zipcode.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column values to be US zip codes within a specified number of miles of a given zipcode.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 7.0}, "expect_column_values_to_be_valid_alabama_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_alabama_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidAlabamaZip", "snake_name": "expect_column_values_to_be_valid_alabama_zip", "short_description": "Expect values in this column to be valid Alabama zipcodes.", "docstring": "Expect values in this column to be valid Alabama zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_alabama_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_alabama_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Alabama zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_alaska_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_alaska_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidAlaskaZip", "snake_name": "expect_column_values_to_be_valid_alaska_zip", "short_description": "Expect values in this column to be valid Alaska zipcodes.", "docstring": "Expect values in this column to be valid Alaska zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_alaska_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_alaska_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Alaska zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_arizona_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_arizona_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidArizonaZip", "snake_name": "expect_column_values_to_be_valid_arizona_zip", "short_description": "Expect values in this column to be valid Arizona zipcodes.", "docstring": "Expect values in this column to be valid Arizona zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.validarizonazip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.validarizonazip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Arizona zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_arkansas_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_arkansas_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidArkansasZip", "snake_name": "expect_column_values_to_be_valid_arkansas_zip", "short_description": "Expect values in this column to be valid Arkansas zipcodes.", "docstring": "Expect values in this column to be valid Arkansas zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_arkansas_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_arkansas_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Arkansas zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_california_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_california_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidCaliforniaZip", "snake_name": "expect_column_values_to_be_valid_california_zip", "short_description": "Expect values in this column to be valid California zipcodes.", "docstring": "Expect values in this column to be valid California zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_california_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_california_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid California zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_colorado_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_colorado_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidColoradoZip", "snake_name": "expect_column_values_to_be_valid_colorado_zip", "short_description": "Expect values in this column to be valid Colorado zipcodes.", "docstring": "Expect values in this column to be valid Colorado zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_colorado_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_colorado_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Colorado zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_connecticut_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_connecticut_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidConnecticutZip", "snake_name": "expect_column_values_to_be_valid_connecticut_zip", "short_description": "Expect values in this column to be valid Connecticut zipcodes.", "docstring": "Expect values in this column to be valid Connecticut zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_connecticut_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_connecticut_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Connecticut zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_delaware_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_delaware_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidDelawareZip", "snake_name": "expect_column_values_to_be_valid_delaware_zip", "short_description": "Expect values in this column to be valid Deleware zipcodes.", "docstring": "Expect values in this column to be valid Deleware zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_delaware_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_delaware_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Deleware zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_florida_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_florida_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidFloridaZip", "snake_name": "expect_column_values_to_be_valid_florida_zip", "short_description": "Expect values in this column to be valid Florida zipcodes.", "docstring": "Expect values in this column to be valid Florida zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_florida_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_florida_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Florida zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_general_zipcode": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_general_zipcode.py", "package": "great_expectations_zipcode_expectations", "requirements": ["pgeocode"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon-22", "experimental", "typed-entities"], "contributors": ["@szecsip"], "requirements": ["pgeocode"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidGeneralZipcode", "snake_name": "expect_column_values_to_be_valid_general_zipcode", "short_description": "Expect the provided zipcode in the country which code (alpha-2) passed in the parameters.", "docstring": "Expect the provided zipcode in the country which code (alpha-2) passed in the parameters."}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_general_zipcode.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_general_zipcode.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the provided zipcode in the country which code (alpha-2) passed in the parameters.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_georgia_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_georgia_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidGeorgiaZip", "snake_name": "expect_column_values_to_be_valid_georgia_zip", "short_description": "Expect values in this column to be valid Georgia zipcodes.", "docstring": "Expect values in this column to be valid Georgia zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_georgia_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_georgia_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Georgia zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_hawaii_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_hawaii_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidHawaiiZip", "snake_name": "expect_column_values_to_be_valid_hawaii_zip", "short_description": "Expect values in this column to be valid Hawaii zipcodes.", "docstring": "Expect values in this column to be valid Hawaii zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_hawaii_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_hawaii_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Hawaii zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_idaho_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_idaho_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidIdahoZip", "snake_name": "expect_column_values_to_be_valid_idaho_zip", "short_description": "Expect values in this column to be valid Idaho zipcodes.", "docstring": "Expect values in this column to be valid Idaho zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_idaho_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_idaho_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Idaho zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_illinois_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_illinois_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidIllinoisZip", "snake_name": "expect_column_values_to_be_valid_illinois_zip", "short_description": "Expect values in this column to be valid Illinois zipcodes.", "docstring": "Expect values in this column to be valid Illinois zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_illinois_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_illinois_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Illinois zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_indiana_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_indiana_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidIndianaZip", "snake_name": "expect_column_values_to_be_valid_indiana_zip", "short_description": "Expect values in this column to be valid Indiana zipcodes.", "docstring": "Expect values in this column to be valid Indiana zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_indiana_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_indiana_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Indiana zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_iowa_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_iowa_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidIowaZip", "snake_name": "expect_column_values_to_be_valid_iowa_zip", "short_description": "Expect values in this column to be valid Iowa zipcodes.", "docstring": "Expect values in this column to be valid Iowa zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_iowa_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_iowa_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Iowa zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_kansas_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_kansas_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidKansasZip", "snake_name": "expect_column_values_to_be_valid_kansas_zip", "short_description": "Expect values in this column to be valid Kansas zipcodes.", "docstring": "Expect values in this column to be valid Kansas zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_kansas_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_kansas_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Kansas zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_kentucky_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_kentucky_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidKentuckyZip", "snake_name": "expect_column_values_to_be_valid_kentucky_zip", "short_description": "Expect values in this column to be valid Kentucky zipcodes.", "docstring": "Expect values in this column to be valid Kentucky zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_kentucky_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_kentucky_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Kentucky zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_louisiana_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_louisiana_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidLouisianaZip", "snake_name": "expect_column_values_to_be_valid_louisiana_zip", "short_description": "Expect values in this column to be valid Louisiana zipcodes.", "docstring": "Expect values in this column to be valid Louisiana zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_louisiana_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_louisiana_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Louisiana zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_maine_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_maine_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidMaineZip", "snake_name": "expect_column_values_to_be_valid_maine_zip", "short_description": "Expect values in this column to be valid Maine zipcodes.", "docstring": "Expect values in this column to be valid Maine zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_maine_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_maine_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Maine zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_maryland_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_maryland_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidMarylandZip", "snake_name": "expect_column_values_to_be_valid_maryland_zip", "short_description": "Expect values in this column to be valid Maryland zipcodes.", "docstring": "Expect values in this column to be valid Maryland zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_maryland_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_maryland_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Maryland zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_massachusetts_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_massachusetts_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidMassachusettsZip", "snake_name": "expect_column_values_to_be_valid_massachusetts_zip", "short_description": "Expect values in this column to be valid Massachusetts zipcodes.", "docstring": "Expect values in this column to be valid Massachusetts zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_massachusetts_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_massachusetts_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Massachusetts zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_michigan_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_michigan_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidMichiganZip", "snake_name": "expect_column_values_to_be_valid_michigan_zip", "short_description": "Expect values in this column to be valid Michigan zipcodes.", "docstring": "Expect values in this column to be valid Michigan zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_michigan_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_michigan_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Michigan zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_minnesota_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_minnesota_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidMinnesotaZip", "snake_name": "expect_column_values_to_be_valid_minnesota_zip", "short_description": "Expect values in this column to be valid Minnesota zipcodes.", "docstring": "Expect values in this column to be valid Minnesota zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_minnesota_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_minnesota_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Minnesota zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_missouri_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_missouri_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidMissouriZip", "snake_name": "expect_column_values_to_be_valid_missouri_zip", "short_description": "Expect values in this column to be valid Missouri zipcodes.", "docstring": "Expect values in this column to be valid Missouri zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_missouri_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_missouri_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Missouri zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_montana_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_montana_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidMontanaZip", "snake_name": "expect_column_values_to_be_valid_montana_zip", "short_description": "Expect values in this column to be valid Montana zipcodes.", "docstring": "Expect values in this column to be valid Montana zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_montana_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_montana_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Montana zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_nebraska_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_nebraska_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidNebraskaZip", "snake_name": "expect_column_values_to_be_valid_nebraska_zip", "short_description": "Expect values in this column to be valid Nebraska zipcodes.", "docstring": "Expect values in this column to be valid Nebraska zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_nebraska_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_nebraska_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Nebraska zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_nevada_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_nevada_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidNevadaZip", "snake_name": "expect_column_values_to_be_valid_nevada_zip", "short_description": "Expect values in this column to be valid Nevada zipcodes.", "docstring": "Expect values in this column to be valid Nevada zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_nevada_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_nevada_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Nevada zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_new_hampshire_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_new_hampshire_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidNewHampshireZip", "snake_name": "expect_column_values_to_be_valid_new_hampshire_zip", "short_description": "Expect values in this column to be valid New Hampshire zipcodes.", "docstring": "Expect values in this column to be valid New Hampshire zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_new_hampshire_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_new_hampshire_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid New Hampshire zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_new_jersey_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_new_jersey_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidNewJerseyZip", "snake_name": "expect_column_values_to_be_valid_new_jersey_zip", "short_description": "Expect values in this column to be valid New Jersey zipcodes.", "docstring": "Expect values in this column to be valid New Jersey zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_new_jersey_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_new_jersey_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid New Jersey zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_new_mexico_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_new_mexico_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidNewMexicoZip", "snake_name": "expect_column_values_to_be_valid_new_mexico_zip", "short_description": "Expect values in this column to be valid New Mexico zipcodes.", "docstring": "Expect values in this column to be valid New Mexico zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_new_mexico_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_new_mexico_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid New Mexico zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_new_york_state_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_new_york_state_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidNewYorkStateZip", "snake_name": "expect_column_values_to_be_valid_new_york_state_zip", "short_description": "Expect values in this column to be valid New York state zipcodes.", "docstring": "Expect values in this column to be valid New York state zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_new_york_state_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_new_york_state_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid New York state zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_north_carolina_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_north_carolina_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidNorthCarolinaZip", "snake_name": "expect_column_values_to_be_valid_north_carolina_zip", "short_description": "Expect values in this column to be valid North Carolina zipcodes.", "docstring": "Expect values in this column to be valid North Carolina zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_north_carolina_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_north_carolina_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid North Carolina zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_north_dakota_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_north_dakota_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidNorthDakotaZip", "snake_name": "expect_column_values_to_be_valid_north_dakota_zip", "short_description": "Expect values in this column to be valid North Dakota zipcodes.", "docstring": "Expect values in this column to be valid North Dakota zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_north_dakota_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_north_dakota_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid North Dakota zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_ohio_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_ohio_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidOhioZip", "snake_name": "expect_column_values_to_be_valid_ohio_zip", "short_description": "Expect values in this column to be valid Ohio zipcodes.", "docstring": "Expect values in this column to be valid Ohio zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_ohio_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_ohio_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Ohio zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_oklahoma_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_oklahoma_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidOklahomaZip", "snake_name": "expect_column_values_to_be_valid_oklahoma_zip", "short_description": "Expect values in this column to be valid Oklahoma zipcodes.", "docstring": "Expect values in this column to be valid Oklahoma zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_oklahoma_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_oklahoma_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Oklahoma zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_oregon_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_oregon_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidOregonZip", "snake_name": "expect_column_values_to_be_valid_oregon_zip", "short_description": "Expect values in this column to be valid Oregon zipcodes.", "docstring": "Expect values in this column to be valid Oregon zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_oregon_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_oregon_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Oregon zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_pennsylvania_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_pennsylvania_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidPennsylvaniaZip", "snake_name": "expect_column_values_to_be_valid_pennsylvania_zip", "short_description": "Expect values in this column to be valid Pennsylvania zipcodes.", "docstring": "Expect values in this column to be valid Pennsylvania zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_pennsylvania_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_pennsylvania_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Pennsylvania zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_rhode_island_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_rhode_island_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidRhodeIslandZip", "snake_name": "expect_column_values_to_be_valid_rhode_island_zip", "short_description": "Expect values in this column to be valid Rhode Island zipcodes.", "docstring": "Expect values in this column to be valid Rhode Island zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_rhode_island_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_rhode_island_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Rhode Island zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_south_carolina_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_south_carolina_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidSouthCarolinaZip", "snake_name": "expect_column_values_to_be_valid_south_carolina_zip", "short_description": "Expect values in this column to be valid South Carolina zipcodes.", "docstring": "Expect values in this column to be valid South Carolina zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_south_carolina_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_south_carolina_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid South Carolina zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_south_dakota_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_south_dakota_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidSouthDakotaZip", "snake_name": "expect_column_values_to_be_valid_south_dakota_zip", "short_description": "Expect values in this column to be valid South Dakota zipcodes.", "docstring": "Expect values in this column to be valid South Dakota zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_south_dakota_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_south_dakota_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid South Dakota zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_tennessee_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_tennessee_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidTennesseeZip", "snake_name": "expect_column_values_to_be_valid_tennessee_zip", "short_description": "Expect values in this column to be valid Tennessee zipcodes.", "docstring": "Expect values in this column to be valid Tennessee zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_tennessee_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_tennessee_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Tennessee zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_texas_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_texas_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidTexasZip", "snake_name": "expect_column_values_to_be_valid_texas_zip", "short_description": "Expect values in this column to be valid Texas zipcodes.", "docstring": "Expect values in this column to be valid Texas zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_texas_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_texas_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Texas zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_utah_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_utah_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidUtahZip", "snake_name": "expect_column_values_to_be_valid_utah_zip", "short_description": "Expect values in this column to be valid Utah zipcodes.", "docstring": "Expect values in this column to be valid Utah zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_utah_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_utah_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Utah zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_vermont_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_vermont_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidVermontZip", "snake_name": "expect_column_values_to_be_valid_vermont_zip", "short_description": "Expect values in this column to be valid Vermont zipcodes.", "docstring": "Expect values in this column to be valid Vermont zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_vermont_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_vermont_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Vermont zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_virginia_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_virginia_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidVirginiaZip", "snake_name": "expect_column_values_to_be_valid_virginia_zip", "short_description": "Expect values in this column to be valid Washington D.C. zipcodes.", "docstring": "Expect values in this column to be valid Washington D.C. zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_virginia_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_virginia_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Washington D.C. zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_washington_dc_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_washington_dc_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidWashingtonDCZip", "snake_name": "expect_column_values_to_be_valid_washington_dc_zip", "short_description": "Expect values in this column to be valid Washington D.C. zipcodes.", "docstring": "Expect values in this column to be valid Washington D.C. zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_dc_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_dc_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Washington D.C. zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_washington_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_washington_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidWashingtonZip", "snake_name": "expect_column_values_to_be_valid_washington_zip", "short_description": "Expect values in this column to be valid Washington zipcodes.", "docstring": "Expect values in this column to be valid Washington zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_washington_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_washington_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Washington zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_west_virginia_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_west_virginia_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidWestVirginiaZip", "snake_name": "expect_column_values_to_be_valid_west_virginia_zip", "short_description": "Expect values in this column to be valid West Virginia zipcodes.", "docstring": "Expect values in this column to be valid West Virginia zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_west_virginia_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_west_virginia_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid West Virginia zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_wisconsin_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_wisconsin_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidWisconsinZip", "snake_name": "expect_column_values_to_be_valid_wisconsin_zip", "short_description": "Expect values in this column to be valid Wisconsin zipcodes.", "docstring": "Expect values in this column to be valid Wisconsin zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_wisconsin_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_wisconsin_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Wisconsin zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_wyoming_zip": {"updated_at": "2023-08-15 11:08:04 -0400 3 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_wyoming_zip.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidWyomingZip", "snake_name": "expect_column_values_to_be_valid_wyoming_zip", "short_description": "Expect values in this column to be valid Wyoming zipcodes.", "docstring": "Expect values in this column to be valid Wyoming zipcodes.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_wyoming_zip.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_wyoming_zip.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid Wyoming zipcodes.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_zip5": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_zip5.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidZip5", "snake_name": "expect_column_values_to_be_valid_zip5", "short_description": "Expect values in this column to be valid zip5 string types.", "docstring": "Expect values in this column to be valid zip5 string types.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_zip5.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_zip5.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid zip5 string types.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_column_values_to_be_valid_zip9": {"updated_at": "2023-05-22 11:08:40 -0400 6 months ago", "created_at": "2022-09-30 12:33:05 -0600 1 year, 2 months ago", "path": "contrib/great_expectations_zipcode_expectations/great_expectations_zipcode_expectations/expectations/expect_column_values_to_be_valid_zip9.py", "package": "great_expectations_zipcode_expectations", "requirements": ["zipcodes"], "import_module_args": ["great_expectations_zipcode_expectations.expectations"], "sys_path": "../../contrib/great_expectations_zipcode_expectations", "exp_type": "Contrib ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": ["hackathon", "typed-entities"], "contributors": ["@luismdiaz01", "@derekma73"], "requirements": ["zipcodes"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeValidZip9", "snake_name": "expect_column_values_to_be_valid_zip9", "short_description": "Expect values in this column to be valid zip9 string types.", "docstring": "Expect values in this column to be valid zip9 string types.\n\nSee https://pypi.org/project/zipcodes/ for more information.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.valid_zip9.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.valid_zip9.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect values in this column to be valid zip9 string types.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 4.0}, "expect_batch_row_count_to_match_prophet_date_model": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2023-02-24 20:40:35 -0700 9 months ago", "path": "contrib/time_series_expectations/time_series_expectations/expectations/expect_batch_row_count_to_match_prophet_date_model.py", "package": "time_series_expectations", "requirements": ["prophet"], "import_module_args": ["time_series_expectations.expectations"], "sys_path": "../../contrib/time_series_expectations", "exp_type": "Contrib BatchExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": [], "contributors": ["@abegong"], "requirements": ["prophet"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectBatchRowCountToMatchProphetDateModel", "snake_name": "expect_batch_row_count_to_match_prophet_date_model", "short_description": "Expect the number of rows in a batch to match the predictions of a prophet model for a given date.", "docstring": "Expect the number of rows in a batch to match the predictions of a prophet model for a given date.\n\nexpect_batch_row_count_to_match_prophet_date_model is a [BatchExpectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_table_expectations)\n\n#### Args:\n\n#### date (str):\nA string representing the date to compare the batch row count to\n\n#### model_json (str):\nA string containing a JSON-serialized Prophet model\n\n#### Keyword Args:\n\n#### Other Parameters:\n\n#### result_format (str or None):\n- Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY.\n- For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n\n#### include_config (boolean):\nIf True, then include the expectation config as part of the result object.\n\n#### catch_exceptions (boolean or None):\nIf True, then catch exceptions and include them as part of the result object.\n- For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n\n#### meta (dict or None):\nA JSON-serializable dictionary (nesting allowed) that will be included in the output without\n- modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n- * Prophet is an open source forecasting library created at facebook. For more information, please see the [project github page](https://github.com/facebook/prophet).\n\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "table.row_count", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the number of rows in a batch to match the predictions of a prophet model for a given date.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_column_max_to_match_prophet_date_model": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2023-02-24 20:40:35 -0700 9 months ago", "path": "contrib/time_series_expectations/time_series_expectations/expectations/expect_column_max_to_match_prophet_date_model.py", "package": "time_series_expectations", "requirements": ["prophet"], "import_module_args": ["time_series_expectations.expectations"], "sys_path": "../../contrib/time_series_expectations", "exp_type": "Contrib ColumnAggregateTimeSeriesExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": [], "contributors": ["@abegong"], "requirements": ["prophet"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnMaxToMatchProphetDateModel", "snake_name": "expect_column_max_to_match_prophet_date_model", "short_description": "Expect the column maximum to match the predictions of a prophet model for a given date.", "docstring": "Expect the column maximum to match the predictions of a prophet model for a given date.\n\nexpect_column_max_to_match_prophet_date_model is a ColumnAggregateTimeSeriesExpectation.\n\n#### Args:\n\n#### column (str):\nThe name of the column to calculate the max of\n\n#### date (str):\nA string representing the date to compare the max to\n\n#### model_json (str):\nA string containing a JSON-serialized Prophet model\n\n#### Keyword Args:\n\n#### Other Parameters:\n\n#### result_format (str or None):\n- Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY.\n- For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n\n#### include_config (boolean):\nIf True, then include the expectation config as part of the result object.\n\n#### catch_exceptions (boolean or None):\nIf True, then catch exceptions and include them as part of the result object.\n- For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n\n#### meta (dict or None):\nA JSON-serializable dictionary (nesting allowed) that will be included in the output without\n- modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n- * Prophet is an open source forecasting library created at facebook. For more information, please see the [project github page](https://github.com/facebook/prophet).\n* I apologize for the dangling prepositions in the Arg docstrings for this Expectation.\n\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.max", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column maximum to match the predictions of a prophet model for a given date.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "No validate_configuration method defined on subclass", "passed": false}], "passed": false, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_column_pair_values_to_match_prophet_date_model": {"updated_at": "2023-07-20 13:06:00 -0500 4 months ago", "created_at": "2023-02-24 20:40:35 -0700 9 months ago", "path": "contrib/time_series_expectations/time_series_expectations/expectations/expect_column_pair_values_to_match_prophet_date_model.py", "package": "time_series_expectations", "requirements": ["prophet"], "import_module_args": ["time_series_expectations.expectations"], "sys_path": "../../contrib/time_series_expectations", "exp_type": "Contrib ColumnPairMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "BETA", "tags": [], "contributors": ["@abegong"], "requirements": ["prophet"], "library_metadata_passed_checks": true, "has_full_test_suite": false, "manually_reviewed_code": false, "problems": []}, "description": {"camel_name": "ExpectColumnPairValuesToMatchProphetDateModel", "snake_name": "expect_column_pair_values_to_match_prophet_date_model", "short_description": "Expect the values in column A to match the predictions of a prophet model based on the timestamp in column B.", "docstring": "Expect the values in column A to match the predictions of a prophet model based on the timestamp in column B.\n\nexpect_column_pair_values_to_match_prophet_date_model is a [ColumnPairMapExpectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_pair_map_expectations)\n\n#### Args:\n\n#### column_A (str):\nThe name of the timestamp column\n\n#### column_B (str):\nThe name of the column containing time series values\n\n#### model_json (str):\nA string containing a JSON-serialized Prophet model\n\n#### Keyword Args:\n\n#### mostly (None or a float between 0 and 1):\nSuccessful if at least mostly fraction of values match the expectation.\n- For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n\n#### result_format (str or None):\n- Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY.\n- For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n\n#### include_config (boolean):\nIf True, then include the expectation config as part of the result object.\n\n#### catch_exceptions (boolean or None):\nIf True, then catch exceptions and include them as part of the result object.\n- For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n\n#### meta (dict or None):\nA JSON-serializable dictionary (nesting allowed) that will be included in the output without\n- modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n- * Prophet is an open source forecasting library created at facebook. For more information, please see the [project github page](https://github.com/facebook/prophet).\n\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_pair_values.match_prophet_forecast.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_pair_values.match_prophet_forecast.filtered_row_count", "has_question_renderer": false}, {"name": "column_pair_values.match_prophet_forecast.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the values in column A to match the predictions of a prophet model based on the timestamp in column B.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for spark are passing", "passed": true}, {"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": false, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": false, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for spark are passing", "passed": true}, {"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 10.0}, "expect_column_distinct_values_to_be_in_set": {"updated_at": "2023-10-03 15:00:33 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_distinct_values_to_be_in_set.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column aggregate expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnDistinctValuesToBeInSet", "snake_name": "expect_column_distinct_values_to_be_in_set", "short_description": "Expect the set of distinct column values to be contained by a given set.", "docstring": "Expect the set of distinct column values to be contained by a given set.\n\nexpect_column_distinct_values_to_be_in_set is a [Column Aggregate Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_aggregate_expectations).\n\nThe success value for this expectation will match that of [expect_column_values_to_be_in_set](https://greatexpectations.io/expectations/expect_column_values_to_be_in_set).\n\n#### For example:\n```\n# my_df.my_col = [1,2,2,3,3,3]\n>>> my_df.expect_column_distinct_values_to_be_in_set(\n        \"my_col\",\n        [2, 3, 4]\n    )\n{\n    \"success\": false\n    \"result\": {\n        \"observed_value\": [1,2,3],\n        \"details\": {\n            \"value_counts\": [\n                {\n                    \"value\": 1,\n                    \"count\": 1\n                },\n                {\n                    \"value\": 2,\n                    \"count\": 1\n                },\n                {\n                    \"value\": 3,\n                    \"count\": 1\n                }\n            ]\n        }\n    }\n}\n```\n\n#### Args:\n- column (str): The column name.\n- value_set (set-like): A set of objects used for comparison.\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_distinct_values_to_contain_set](https://greatexpectations.io/expectations/expect_column_distinct_values_to_contain_set)\n- [expect_column_distinct_values_to_equal_set](https://greatexpectations.io/expectations/expect_column_distinct_values_to_equal_set)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.value_counts", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 10, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the set of distinct column values to be contained by a given set.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 10 tests for redshift are passing", "passed": true}, {"message": "All 10 tests for spark are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 10 tests for snowflake are passing", "passed": true}, {"message": "All 10 tests for mysql are passing", "passed": true}, {"message": "All 10 tests for trino are passing", "passed": true}, {"message": "All 10 tests for mssql are passing", "passed": true}, {"message": "All 10 tests for pandas are passing", "passed": true}, {"message": "All 10 tests for bigquery are passing", "passed": true}, {"message": "All 10 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 10 tests for redshift are passing", "passed": true}, {"message": "All 10 tests for spark are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 10 tests for snowflake are passing", "passed": true}, {"message": "All 10 tests for mysql are passing", "passed": true}, {"message": "All 10 tests for trino are passing", "passed": true}, {"message": "All 10 tests for mssql are passing", "passed": true}, {"message": "All 10 tests for pandas are passing", "passed": true}, {"message": "All 10 tests for bigquery are passing", "passed": true}, {"message": "All 10 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 113.0}, "expect_column_distinct_values_to_contain_set": {"updated_at": "2023-10-03 15:00:33 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_distinct_values_to_contain_set.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column aggregate expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnDistinctValuesToContainSet", "snake_name": "expect_column_distinct_values_to_contain_set", "short_description": "Expect the set of distinct column values to contain a given set.", "docstring": "Expect the set of distinct column values to contain a given set.\n\nexpect_column_distinct_values_to_contain_set is a [Column Aggregate Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_aggregate_expectations).\n\n#### Args:\n- column (str): The column name.\n- value_set (set-like): A set of objects used for comparison.\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_distinct_values_to_be_in_set](https://greatexpectations.io/expectations/expect_column_distinct_values_to_be_in_set)\n- [expect_column_distinct_values_to_equal_set](https://greatexpectations.io/expectations/expect_column_distinct_values_to_equal_set)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.value_counts", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 15, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 15, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 15, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 15, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 15, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 15, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 15, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 15, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 15, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the set of distinct column values to contain a given set.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 15 tests for redshift are passing", "passed": true}, {"message": "All 15 tests for spark are passing", "passed": true}, {"message": "All 11 tests for sqlite are passing", "passed": true}, {"message": "All 15 tests for snowflake are passing", "passed": true}, {"message": "All 15 tests for mysql are passing", "passed": true}, {"message": "All 15 tests for trino are passing", "passed": true}, {"message": "All 15 tests for mssql are passing", "passed": true}, {"message": "All 15 tests for pandas are passing", "passed": true}, {"message": "All 15 tests for bigquery are passing", "passed": true}, {"message": "All 15 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 15 tests for redshift are passing", "passed": true}, {"message": "All 15 tests for spark are passing", "passed": true}, {"message": "All 11 tests for sqlite are passing", "passed": true}, {"message": "All 15 tests for snowflake are passing", "passed": true}, {"message": "All 15 tests for mysql are passing", "passed": true}, {"message": "All 15 tests for trino are passing", "passed": true}, {"message": "All 15 tests for mssql are passing", "passed": true}, {"message": "All 15 tests for pandas are passing", "passed": true}, {"message": "All 15 tests for bigquery are passing", "passed": true}, {"message": "All 15 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 159.0}, "expect_column_distinct_values_to_equal_set": {"updated_at": "2023-10-03 15:00:33 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_distinct_values_to_equal_set.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column aggregate expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnDistinctValuesToEqualSet", "snake_name": "expect_column_distinct_values_to_equal_set", "short_description": "Expect the set of distinct column values to equal a given set.", "docstring": "Expect the set of distinct column values to equal a given set.\n\nexpect_column_distinct_values_to_equal_set is a [Column Aggregate Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_aggregate_expectations).\n\n#### Args:\n- column (str): The column name.\n- value_set (set-like): A set of objects used for comparison.\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_distinct_values_to_be_in_set](https://greatexpectations.io/expectations/expect_column_distinct_values_to_be_in_set)\n- [expect_column_distinct_values_to_contain_set](https://greatexpectations.io/expectations/expect_column_distinct_values_to_contain_set)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.value_counts", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 9, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the set of distinct column values to equal a given set.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 9 tests for redshift are passing", "passed": true}, {"message": "All 9 tests for spark are passing", "passed": true}, {"message": "All 9 tests for sqlite are passing", "passed": true}, {"message": "All 9 tests for snowflake are passing", "passed": true}, {"message": "All 9 tests for mysql are passing", "passed": true}, {"message": "All 9 tests for trino are passing", "passed": true}, {"message": "All 9 tests for mssql are passing", "passed": true}, {"message": "All 9 tests for pandas are passing", "passed": true}, {"message": "All 9 tests for bigquery are passing", "passed": true}, {"message": "All 9 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 9 tests for redshift are passing", "passed": true}, {"message": "All 9 tests for spark are passing", "passed": true}, {"message": "All 9 tests for sqlite are passing", "passed": true}, {"message": "All 9 tests for snowflake are passing", "passed": true}, {"message": "All 9 tests for mysql are passing", "passed": true}, {"message": "All 9 tests for trino are passing", "passed": true}, {"message": "All 9 tests for mssql are passing", "passed": true}, {"message": "All 9 tests for pandas are passing", "passed": true}, {"message": "All 9 tests for bigquery are passing", "passed": true}, {"message": "All 9 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 103.0}, "expect_column_kl_divergence_to_be_less_than": {"updated_at": "2023-10-25 16:01:55 -0400 3 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_kl_divergence_to_be_less_than.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column aggregate expectation", "distributional expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnKlDivergenceToBeLessThan", "snake_name": "expect_column_kl_divergence_to_be_less_than", "short_description": "Expect the Kulback-Leibler (KL) divergence (relative entropy) of the specified column with respect to the partition object to be lower than the provided threshold.", "docstring": "Expect the Kulback-Leibler (KL) divergence (relative entropy) of the specified column with respect to the partition object to be lower than the provided threshold.\n\nKL divergence compares two distributions. The higher the divergence value (relative entropy), the larger the difference between the two distributions. A relative entropy of zero indicates that the data are distributed identically, when binned according to the provided partition.\n\nIn many practical contexts, choosing a value between 0.5 and 1 will provide a useful test.\n\nThis expectation works on both categorical and continuous partitions. See notes below for details.\n\nexpect_column_kl_divergence_to_be_less_than is a [Column Aggregate Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_aggregate_expectations).\n\n#### Args:\n- column (str): The column name.\n- partition_object (dict): The expected partition object (see [partition_object](https://docs.greatexpectations.io/docs/reference/expectations/distributional_expectations/#partition-objects)).\n- threshold (float): The maximum KL divergence to for which to return success=True. If KL divergence is larger than the provided threshold, the test will return success=False.\n\n#### Keyword Args:\n- internal_weight_holdout (float between 0 and 1 or None): The amount of weight to split uniformly among zero-weighted partition bins. internal_weight_holdout provides a mechanisms to make the test less strict by assigning positive weights to values observed in the data for which the partition explicitly expected zero weight. With no internal_weight_holdout, any value observed in such a region will cause KL divergence to rise to +Infinity. Defaults to 0.\n- tail_weight_holdout (float between 0 and 1 or None): The amount of weight to add to the tails of the histogram. Tail weight holdout is split evenly between (-Infinity, min(partition_object['bins'])) and (max(partition_object['bins']), +Infinity). tail_weight_holdout provides a mechanism to make the test less strict by assigning positive weights to values observed in the data that are not present in the partition. With no tail_weight_holdout, any value observed outside the provided partition_object will cause KL divergence to rise to +Infinity. Defaults to 0.\n- bucketize_data (boolean): If True, then continuous data will be bucketized before evaluation. Setting this parameter to false allows evaluation of KL divergence with a None partition object for profiling against discrete data.\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n* observed_value field in the result object is customized for this expectation to be a float representing the true KL divergence (relative entropy) or None if the value is calculated as infinity, -infinity, or NaN\n* details.observed_partition in the result object is customized for this expectation to be a dict representing the partition observed in the data\n* details.expected_partition in the result object is customized for this expectation to be a dict representing the partition against which the data were compared, after applying specified weight holdouts\n\nIf the partition_object is categorical, this expectation will expect the values in column to also be categorical.\n\n* If the column includes values that are not present in the partition, the tail_weight_holdout will be equally split among those values, providing a mechanism to weaken the strictness of the expectation (otherwise, relative entropy would immediately go to infinity).\n* If the partition includes values that are not present in the column, the test will simply include zero weight for that value.\n\nIf the partition_object is continuous, this expectation will discretize the values in the column according to the bins specified in the partition_object, and apply the test to the resulting distribution.\n\n* The internal_weight_holdout and tail_weight_holdout parameters provide a mechanism to weaken the expectation, since an expected weight of zero would drive relative entropy to be infinite if any data are observed in that interval.\n* If internal_weight_holdout is specified, that value will be distributed equally among any intervals with weight zero in the partition_object.\n* If tail_weight_holdout is specified, that value will be appended to the tails of the bins ((-Infinity, min(bins)) and (max(bins), Infinity).\n\nIf relative entropy/kl divergence goes to infinity for any of the reasons mentioned above, the observed value will be set to None. This is because inf, -inf, Nan, are not json serializable and cause some json parsers to crash when encountered. The python None token will be serialized to null in json.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.value_counts", "has_question_renderer": false}, {"name": "column_values.nonnull.count", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 45, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 45, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 44, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 45, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 45, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 45, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 45, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 45, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 25, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 45, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the Kulback-Leibler (KL) divergence (relative entropy) of the specified column with respect to the partition object to be lower than the provided threshold.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 45 tests for redshift are passing", "passed": true}, {"message": "All 45 tests for spark are passing", "passed": true}, {"message": "All 44 tests for sqlite are passing", "passed": true}, {"message": "All 45 tests for snowflake are passing", "passed": true}, {"message": "All 45 tests for mysql are passing", "passed": true}, {"message": "All 45 tests for trino are passing", "passed": true}, {"message": "All 45 tests for mssql are passing", "passed": true}, {"message": "All 45 tests for pandas are passing", "passed": true}, {"message": "All 25 tests for bigquery are passing", "passed": true}, {"message": "All 45 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 45 tests for redshift are passing", "passed": true}, {"message": "All 45 tests for spark are passing", "passed": true}, {"message": "All 44 tests for sqlite are passing", "passed": true}, {"message": "All 45 tests for snowflake are passing", "passed": true}, {"message": "All 45 tests for mysql are passing", "passed": true}, {"message": "All 45 tests for trino are passing", "passed": true}, {"message": "All 45 tests for mssql are passing", "passed": true}, {"message": "All 45 tests for pandas are passing", "passed": true}, {"message": "All 25 tests for bigquery are passing", "passed": true}, {"message": "All 45 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 442.0}, "expect_column_max_to_be_between": {"updated_at": "2023-10-05 16:04:55 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_max_to_be_between.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column aggregate expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnMaxToBeBetween", "snake_name": "expect_column_max_to_be_between", "short_description": "Expect the column maximum to be between a minimum value and a maximum value.", "docstring": "Expect the column maximum to be between a minimum value and a maximum value.\n\nexpect_column_max_to_be_between is a [Column Aggregate Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_aggregate_expectations)\n\n#### Args:\n- column (str): The column name\n- min_value (comparable type or None): The minimum value of the acceptable range for the column maximum.\n- max_value (comparable type or None): The maximum value of the acceptable range for the column maximum.\n- strict_min (boolean): If True, the lower bound of the column maximum acceptable range must be strictly larger than min_value, default=False\n- strict_max (boolean): If True, the upper bound of the column maximum acceptable range must be strictly smaller than max_value, default=False\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n* min_value and max_value are both inclusive unless strict_min or strict_max are set to True.\n* If min_value is None, then max_value is treated as an upper bound\n* If max_value is None, then min_value is treated as a lower bound\n* observed_value field in the result object is customized for this expectation to be a list representing the actual column max\n\n#### See Also:\n- [expect_column_min_to_be_between](https://greatexpectations.io/expectations/expect_column_min_to_be_between)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.max", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 8, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column maximum to be between a minimum value and a maximum value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 8 tests for redshift are passing", "passed": true}, {"message": "All 8 tests for spark are passing", "passed": true}, {"message": "All 8 tests for sqlite are passing", "passed": true}, {"message": "All 8 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 8 tests for trino are passing", "passed": true}, {"message": "All 8 tests for mssql are passing", "passed": true}, {"message": "All 8 tests for pandas are passing", "passed": true}, {"message": "All 8 tests for bigquery are passing", "passed": true}, {"message": "All 8 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 8 tests for redshift are passing", "passed": true}, {"message": "All 8 tests for spark are passing", "passed": true}, {"message": "All 8 tests for sqlite are passing", "passed": true}, {"message": "All 8 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 8 tests for trino are passing", "passed": true}, {"message": "All 8 tests for mssql are passing", "passed": true}, {"message": "All 8 tests for pandas are passing", "passed": true}, {"message": "All 8 tests for bigquery are passing", "passed": true}, {"message": "All 8 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 93.0}, "expect_column_mean_to_be_between": {"updated_at": "2023-10-05 16:04:55 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_mean_to_be_between.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column aggregate expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnMeanToBeBetween", "snake_name": "expect_column_mean_to_be_between", "short_description": "Expect the column mean to be between a minimum value and a maximum value (inclusive).", "docstring": "Expect the column mean to be between a minimum value and a maximum value (inclusive).\n\nexpect_column_mean_to_be_between is a [Column Aggregate Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_aggregate_expectations).\n\n#### Args:\n- column (str): The column name.\n- min_value (float or None): The minimum value for the column mean.\n- max_value (float or None): The maximum value for the column mean.\n- strict_min (boolean): If True, the column mean must be strictly larger than min_value, default=False\n- strict_max (boolean): If True, the column mean must be strictly smaller than max_value, default=False\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n* min_value and max_value are both inclusive unless strict_min or strict_max are set to True.\n* If min_value is None, then max_value is treated as an upper bound.\n* If max_value is None, then min_value is treated as a lower bound.\n* observed_value field in the result object is customized for this expectation to be a float representing the true mean for the column\n\n#### See Also:\n- [expect_column_median_to_be_between](https://greatexpectations.io/expectations/expect_column_median_to_be_between)\n- [expect_column_stdev_to_be_between](https://greatexpectations.io/expectations/expect_column_stdev_to_be_between)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.mean", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 13, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 13, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 13, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 14, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 11, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column mean to be between a minimum value and a maximum value (inclusive).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 11 tests for redshift are passing", "passed": true}, {"message": "All 13 tests for spark are passing", "passed": true}, {"message": "All 13 tests for sqlite are passing", "passed": true}, {"message": "All 11 tests for snowflake are passing", "passed": true}, {"message": "All 13 tests for mysql are passing", "passed": true}, {"message": "All 11 tests for trino are passing", "passed": true}, {"message": "All 11 tests for mssql are passing", "passed": true}, {"message": "All 14 tests for pandas are passing", "passed": true}, {"message": "All 11 tests for bigquery are passing", "passed": true}, {"message": "All 11 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 11 tests for redshift are passing", "passed": true}, {"message": "All 13 tests for spark are passing", "passed": true}, {"message": "All 13 tests for sqlite are passing", "passed": true}, {"message": "All 11 tests for snowflake are passing", "passed": true}, {"message": "All 13 tests for mysql are passing", "passed": true}, {"message": "All 11 tests for trino are passing", "passed": true}, {"message": "All 11 tests for mssql are passing", "passed": true}, {"message": "All 14 tests for pandas are passing", "passed": true}, {"message": "All 11 tests for bigquery are passing", "passed": true}, {"message": "All 11 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 132.0}, "expect_column_median_to_be_between": {"updated_at": "2023-10-05 16:04:55 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_median_to_be_between.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column aggregate expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnMedianToBeBetween", "snake_name": "expect_column_median_to_be_between", "short_description": "Expect the column median to be between a minimum value and a maximum value.", "docstring": "Expect the column median to be between a minimum value and a maximum value.\n\nexpect_column_median_to_be_between is a [Column Aggregate Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_aggregate_expectations).\n\n#### Args:\n- column (str): The column name.\n- min_value (int or None): The minimum value for the column median.\n- max_value (int or None): The maximum value for the column median.\n- strict_min (boolean): If True, the column median must be strictly larger than min_value, default=False\n- strict_max (boolean): If True, the column median must be strictly smaller than max_value, default=False\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n* min_value and max_value are both inclusive unless strict_min or strict_max are set to True.\n* If min_value is None, then max_value is treated as an upper bound\n* If max_value is None, then min_value is treated as a lower bound\n* observed_value field in the result object is customized for this expectation to be a float representing the true median for the column\n\n#### See Also:\n- [expect_column_mean_to_be_between](https://greatexpectations.io/expectations/expect_column_mean_to_be_between)\n- [expect_column_stdev_to_be_between](https://greatexpectations.io/expectations/expect_column_stdev_to_be_between)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.median", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 10, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column median to be between a minimum value and a maximum value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 10 tests for redshift are passing", "passed": true}, {"message": "All 9 tests for spark are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 10 tests for snowflake are passing", "passed": true}, {"message": "All 10 tests for mysql are passing", "passed": true}, {"message": "All 10 tests for trino are passing", "passed": true}, {"message": "All 10 tests for mssql are passing", "passed": true}, {"message": "All 10 tests for pandas are passing", "passed": true}, {"message": "All 10 tests for bigquery are passing", "passed": true}, {"message": "All 10 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 10 tests for redshift are passing", "passed": true}, {"message": "All 9 tests for spark are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 10 tests for snowflake are passing", "passed": true}, {"message": "All 10 tests for mysql are passing", "passed": true}, {"message": "All 10 tests for trino are passing", "passed": true}, {"message": "All 10 tests for mssql are passing", "passed": true}, {"message": "All 10 tests for pandas are passing", "passed": true}, {"message": "All 10 tests for bigquery are passing", "passed": true}, {"message": "All 10 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 112.0}, "expect_column_min_to_be_between": {"updated_at": "2023-10-05 16:04:55 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_min_to_be_between.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column aggregate expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnMinToBeBetween", "snake_name": "expect_column_min_to_be_between", "short_description": "Expect the column minimum to be between a minimum value and a maximum value.", "docstring": "Expect the column minimum to be between a minimum value and a maximum value.\n\nexpect_column_min_to_be_between is a [Column Aggregate Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_aggregate_expectations).\n\n#### Args:\n- column (str): The column name\n- min_value (comparable type or None): The minimal column minimum allowed.\n- max_value (comparable type or None): The maximal column minimum allowed.\n- strict_min (boolean): If True, the minimal column minimum must be strictly larger than min_value, default=False\n- strict_max (boolean): If True, the maximal column minimum must be strictly smaller than max_value, default=False\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n* min_value and max_value are both inclusive unless strict_min or strict_max are set to True.\n* If min_value is None, then max_value is treated as an upper bound\n* If max_value is None, then min_value is treated as a lower bound\n* observed_value field in the result object is customized for this expectation to be a list representing the actual column min\n\n#### See Also:\n- [expect_column_max_to_be_between](https://greatexpectations.io/expectations/expect_column_max_to_be_between)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.min", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 8, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column minimum to be between a minimum value and a maximum value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 8 tests for redshift are passing", "passed": true}, {"message": "All 8 tests for spark are passing", "passed": true}, {"message": "All 8 tests for sqlite are passing", "passed": true}, {"message": "All 8 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 8 tests for trino are passing", "passed": true}, {"message": "All 8 tests for mssql are passing", "passed": true}, {"message": "All 8 tests for pandas are passing", "passed": true}, {"message": "All 8 tests for bigquery are passing", "passed": true}, {"message": "All 8 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 8 tests for redshift are passing", "passed": true}, {"message": "All 8 tests for spark are passing", "passed": true}, {"message": "All 8 tests for sqlite are passing", "passed": true}, {"message": "All 8 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 8 tests for trino are passing", "passed": true}, {"message": "All 8 tests for mssql are passing", "passed": true}, {"message": "All 8 tests for pandas are passing", "passed": true}, {"message": "All 8 tests for bigquery are passing", "passed": true}, {"message": "All 8 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 93.0}, "expect_column_most_common_value_to_be_in_set": {"updated_at": "2023-08-29 15:27:34 -0400 3 months ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_most_common_value_to_be_in_set.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column aggregate expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnMostCommonValueToBeInSet", "snake_name": "expect_column_most_common_value_to_be_in_set", "short_description": "Expect the most common value to be within the designated value set.", "docstring": "Expect the most common value to be within the designated value set.\n\nexpect_column_most_common_value_to_be_in_set is a [Column Aggregate Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_aggregate_expectations).\n\n#### Args:\n- column (str): The column name\n- value_set (set-like): A list of potential values to match\n\n#### Keyword Args:\n- ties_okay (boolean or None): If True, then the expectation will still succeed if values outside the designated set are as common (but not more common) than designated values\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n* observed_value field in the result object is customized for this expectation to be a list representing the most common values in the column, which is often a single element... if there is a tie for most common among multiple values, observed_value will contain a single copy of each most common value\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.most_common_value", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 8, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the most common value to be within the designated value set.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 8 tests for redshift are passing", "passed": true}, {"message": "All 8 tests for spark are passing", "passed": true}, {"message": "All 8 tests for sqlite are passing", "passed": true}, {"message": "All 8 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 8 tests for trino are passing", "passed": true}, {"message": "All 8 tests for mssql are passing", "passed": true}, {"message": "All 8 tests for pandas are passing", "passed": true}, {"message": "All 8 tests for bigquery are passing", "passed": true}, {"message": "All 8 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 8 tests for redshift are passing", "passed": true}, {"message": "All 8 tests for spark are passing", "passed": true}, {"message": "All 8 tests for sqlite are passing", "passed": true}, {"message": "All 8 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 8 tests for trino are passing", "passed": true}, {"message": "All 8 tests for mssql are passing", "passed": true}, {"message": "All 8 tests for pandas are passing", "passed": true}, {"message": "All 8 tests for bigquery are passing", "passed": true}, {"message": "All 8 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 93.0}, "expect_column_pair_values_a_to_be_greater_than_b": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_pair_values_a_to_be_greater_than_b.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnPairMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["core expectation", "column pair map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnPairValuesAToBeGreaterThanB", "snake_name": "expect_column_pair_values_a_to_be_greater_than_b", "short_description": "Expect the values in column A to be greater than column B.", "docstring": "Expect the values in column A to be greater than column B.\n\nexpect_column_pair_values_a_to_be_greater_than_b is a [Column Pair Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_pair_map_expectations).\n\n#### Args:\n- column_A (str): The first column name\n- column_B (str): The second column name\n- or_equal (boolean or None): If True, then values can be equal, not strictly greater\n\n#### Keyword Args:\n- ignore_row_if (str): \"both_values_are_missing\", \"either_value_is_missing\", \"neither\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_pair_values.a_greater_than_b.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_pair_values.a_greater_than_b.filtered_row_count", "has_question_renderer": false}, {"name": "column_pair_values.a_greater_than_b.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 0, "num_failed": 1, "failing_names": ["all"]}, {"backend": "spark", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 0, "num_failed": 5, "failing_names": ["basic_positive_test", "basic_positive_test_with_missing_values_and_ignore_row_if__either_value_is_missing", "test_ties", "test_ties_with_or_equal", "test_mostly"]}, {"backend": "mysql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the values in column A to be greater than column B.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 6 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 6 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}, {"message": "Only 0 / 1 tests for redshift are passing", "passed": false}, {"message": "  - Failing: all", "passed": false}, {"message": "Only 0 / 5 tests for snowflake are passing", "passed": false}, {"message": "  - Failing: basic_positive_test, basic_positive_test_with_missing_values_and_ignore_row_if__either_value_is_missing, test_ties, test_ties_with_or_equal, test_mostly", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 45.0}, "expect_column_pair_values_to_be_equal": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_pair_values_to_be_equal.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnPairMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column pair map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnPairValuesToBeEqual", "snake_name": "expect_column_pair_values_to_be_equal", "short_description": "Expect the values in column A to be the same as column B.", "docstring": "Expect the values in column A to be the same as column B.\n\nexpect_column_pair_values_to_be_equal is a [Column Pair Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_pair_map_expectations).\n\n#### Args:\n- column_A (str): The first column name\n- column_B (str): The second column name\n\n#### Keyword Args:\n- ignore_row_if (str): \"both_values_are_missing\", \"either_value_is_missing\", \"neither\"\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_pair_values.equal.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_pair_values.equal.filtered_row_count", "has_question_renderer": false}, {"name": "column_pair_values.equal.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 9, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the values in column A to be the same as column B.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 9 tests for redshift are passing", "passed": true}, {"message": "All 9 tests for spark are passing", "passed": true}, {"message": "All 9 tests for sqlite are passing", "passed": true}, {"message": "All 9 tests for snowflake are passing", "passed": true}, {"message": "All 9 tests for mysql are passing", "passed": true}, {"message": "All 9 tests for trino are passing", "passed": true}, {"message": "All 9 tests for mssql are passing", "passed": true}, {"message": "All 12 tests for pandas are passing", "passed": true}, {"message": "All 9 tests for bigquery are passing", "passed": true}, {"message": "All 9 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 9 tests for redshift are passing", "passed": true}, {"message": "All 9 tests for spark are passing", "passed": true}, {"message": "All 9 tests for sqlite are passing", "passed": true}, {"message": "All 9 tests for snowflake are passing", "passed": true}, {"message": "All 9 tests for mysql are passing", "passed": true}, {"message": "All 9 tests for trino are passing", "passed": true}, {"message": "All 9 tests for mssql are passing", "passed": true}, {"message": "All 12 tests for pandas are passing", "passed": true}, {"message": "All 9 tests for bigquery are passing", "passed": true}, {"message": "All 9 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 106.0}, "expect_column_pair_values_to_be_in_set": {"updated_at": "2023-06-13 12:48:19 -0400 5 months ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_pair_values_to_be_in_set.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnPairMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column pair map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnPairValuesToBeInSet", "snake_name": "expect_column_pair_values_to_be_in_set", "short_description": "Expect the paired values from columns A and B to belong to a set of valid pairs.", "docstring": "Expect the paired values from columns A and B to belong to a set of valid pairs.\n\nexpect_column_pair_values_to_be_in_set is a [Column Pair Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_pair_map_expectations).\n\n#### For example:\n```\n>>> d = {'fruit': ['appple','apple','apple','banana','banana'],\n        'color': ['red','green','yellow','yellow','red']}\n>>> my_df = pd.DataFrame(data=d)\n>>> my_df.expect_column_pair_values_to_be_in_set(\n        'fruit',\n        'color',\n        [\n            ('apple','red'),\n            ('apple','green'),\n            ('apple','yellow'),\n            ('banana','yellow'),\n        ]\n)\n{\n    \"success\": false,\n    \"meta\": {},\n    \"exception_info\": {\n        \"raised_exception\": false,\n        \"exception_traceback\": null,\n        \"exception_message\": null\n    },\n    \"result\": {\n        \"element_count\": 5,\n        \"unexpected_count\": 1,\n        \"unexpected_percent\": 20.0,\n        \"partial_unexpected_list\": [\n            [\n                \"banana\",\n                \"red\"\n            ]\n        ],\n        \"missing_count\": 0,\n        \"missing_percent\": 0.0,\n        \"unexpected_percent_total\": 20.0,\n        \"unexpected_percent_nonmissing\": 20.0\n    }\n}\n```\n\n#### Args:\n- column_A (str): The first column name\n- column_B (str): The second column name\n- value_pairs_set (list of tuples): All the valid pairs to be matched\n\n#### Keyword Args:\n- ignore_row_if (str): \"both_values_are_missing\", \"either_value_is_missing\", \"neither\"\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_pair_values.in_set.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_pair_values.in_set.filtered_row_count", "has_question_renderer": false}, {"name": "column_pair_values.in_set.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the paired values from columns A and B to belong to a set of valid pairs.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for redshift are passing", "passed": true}, {"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for sqlite are passing", "passed": true}, {"message": "All 4 tests for snowflake are passing", "passed": true}, {"message": "All 4 tests for mysql are passing", "passed": true}, {"message": "All 4 tests for trino are passing", "passed": true}, {"message": "All 4 tests for mssql are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}, {"message": "All 4 tests for bigquery are passing", "passed": true}, {"message": "All 4 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for redshift are passing", "passed": true}, {"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for sqlite are passing", "passed": true}, {"message": "All 4 tests for snowflake are passing", "passed": true}, {"message": "All 4 tests for mysql are passing", "passed": true}, {"message": "All 4 tests for trino are passing", "passed": true}, {"message": "All 4 tests for mssql are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}, {"message": "All 4 tests for bigquery are passing", "passed": true}, {"message": "All 4 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 53.0}, "expect_column_proportion_of_unique_values_to_be_between": {"updated_at": "2023-07-24 12:43:31 -0400 4 months ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_proportion_of_unique_values_to_be_between.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column aggregate expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnProportionOfUniqueValuesToBeBetween", "snake_name": "expect_column_proportion_of_unique_values_to_be_between", "short_description": "Expect the proportion of unique values to be between a minimum value and a maximum value.", "docstring": "Expect the proportion of unique values to be between a minimum value and a maximum value.\n\nFor example, in a column containing [1, 2, 2, 3, 3, 3, 4, 4, 4, 4], there are 4 unique values and 10 total values for a proportion of 0.4.\n\nexpect_column_proportion_of_unique_values_to_be_between is a [Column Aggregate Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_aggregate_expectations).\n\n#### Args:\n- column (str): The column name.\n- min_value (float or None): The minimum proportion of unique values. (Proportions are on the range 0 to 1)\n- max_value (float or None): The maximum proportion of unique values. (Proportions are on the range 0 to 1)\n- strict_min (boolean): If True, the minimum proportion of unique values must be strictly larger than min_value, default=False\n- strict_max (boolean): If True, the maximum proportion of unique values must be strictly smaller than max_value, default=False\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n* min_value and max_value are both inclusive unless strict_min or strict_max are set to True.\n* If min_value is None, then max_value is treated as an upper bound\n* If max_value is None, then min_value is treated as a lower bound\n* observed_value field in the result object is customized for this expectation to be a float representing the proportion of unique values in the column\n\n#### See Also:\n- [expect_column_unique_value_count_to_be_between](https://greatexpectations.io/expectations/expect_column_unique_value_count_to_be_between)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.unique_proportion", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the proportion of unique values to be between a minimum value and a maximum value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 63.0}, "expect_column_quantile_values_to_be_between": {"updated_at": "2023-06-13 12:48:19 -0400 5 months ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_quantile_values_to_be_between.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column aggregate expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnQuantileValuesToBeBetween", "snake_name": "expect_column_quantile_values_to_be_between", "short_description": "Expect the specific provided column quantiles to be between a minimum value and a maximum value.", "docstring": "Expect the specific provided column quantiles to be between a minimum value and a maximum value.\n\nexpect_column_quantile_values_to_be_between is a [Column Aggregate Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_aggregate_expectations).\n\n#### For example:\n```\n# my_df.my_col = [1,2,2,3,3,3,4]\n>>> my_df.expect_column_quantile_values_to_be_between(\n    \"my_col\",\n    {\n        \"quantiles\": [0., 0.333, 0.6667, 1.],\n        \"value_ranges\": [[0,1], [2,3], [3,4], [4,5]]\n    }\n)\n{\n  \"success\": True,\n    \"result\": {\n      \"observed_value\": {\n        \"quantiles: [0., 0.333, 0.6667, 1.],\n        \"values\": [1, 2, 3, 4],\n      }\n      \"element_count\": 7,\n      \"missing_count\": 0,\n      \"missing_percent\": 0.0,\n      \"details\": {\n        \"success_details\": [true, true, true, true]\n      }\n    }\n  }\n}\n```\n\nexpect_column_quantile_values_to_be_between can be computationally intensive for large datasets.\n\n#### Args:\n- column (str): The column name.\n- quantile_ranges (dictionary with keys 'quantiles' and 'value_ranges'): Key 'quantiles' is an increasingly ordered list of desired quantile values (floats). Key 'value_ranges' is a list of 2-value lists that specify a lower and upper bound (inclusive) for the corresponding quantile (with [min, max] ordering). The length of the 'quantiles' list and the 'value_ranges' list must be equal.\n- allow_relative_error (boolean or string): Whether to allow relative error in quantile communications on backends that support or require it.\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n* min_value and max_value are both inclusive.\n* If min_value is None, then max_value is treated as an upper bound only\n* If max_value is None, then min_value is treated as a lower bound only\n* details.success_details field in the result object is customized for this expectation\n\n#### See Also:\n- [expect_column_min_to_be_between](https://greatexpectations.io/expectations/expect_column_min_to_be_between)\n- [expect_column_max_to_be_between](https://greatexpectations.io/expectations/expect_column_max_to_be_between)\n- [expect_column_median_to_be_between](https://greatexpectations.io/expectations/expect_column_median_to_be_between)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.quantile_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the specific provided column quantiles to be between a minimum value and a maximum value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 56.0}, "expect_column_stdev_to_be_between": {"updated_at": "2023-06-13 12:48:19 -0400 5 months ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_stdev_to_be_between.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column aggregate expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnStdevToBeBetween", "snake_name": "expect_column_stdev_to_be_between", "short_description": "Expect the column standard deviation to be between a minimum value and a maximum value.", "docstring": "Expect the column standard deviation to be between a minimum value and a maximum value.\n\nUses sample standard deviation (normalized by N-1).\n\nexpect_column_stdev_to_be_between is a [Column Aggregate Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_aggregate_expectations).\n\n#### Args:\n- column (str): The column name.\n- min_value (float or None): The minimum value for the column standard deviation.\n- max_value (float or None): The maximum value for the column standard deviation.\n- strict_min (boolean): If True, the column standard deviation must be strictly larger than min_value, default=False\n- strict_max (boolean): If True, the column standard deviation must be strictly smaller than max_value, default=False\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n* min_value and max_value are both inclusive unless strict_min or strict_max are set to True.\n* If min_value is None, then max_value is treated as an upper bound\n* If max_value is None, then min_value is treated as a lower bound\n* observed_value field in the result object is customized for this expectation to be a float representing the true standard deviation for the column\n\n#### See Also:\n- [expect_column_mean_to_be_between](https://greatexpectations.io/expectations/expect_column_mean_to_be_between)\n- [expect_column_median_to_be_between](https://greatexpectations.io/expectations/expect_column_median_to_be_between)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.standard_deviation", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 10, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column standard deviation to be between a minimum value and a maximum value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 10 tests for redshift are passing", "passed": true}, {"message": "All 9 tests for spark are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 9 tests for snowflake are passing", "passed": true}, {"message": "All 10 tests for mysql are passing", "passed": true}, {"message": "All 10 tests for trino are passing", "passed": true}, {"message": "All 10 tests for mssql are passing", "passed": true}, {"message": "All 10 tests for pandas are passing", "passed": true}, {"message": "All 9 tests for bigquery are passing", "passed": true}, {"message": "All 10 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 10 tests for redshift are passing", "passed": true}, {"message": "All 9 tests for spark are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 9 tests for snowflake are passing", "passed": true}, {"message": "All 10 tests for mysql are passing", "passed": true}, {"message": "All 10 tests for trino are passing", "passed": true}, {"message": "All 10 tests for mssql are passing", "passed": true}, {"message": "All 10 tests for pandas are passing", "passed": true}, {"message": "All 9 tests for bigquery are passing", "passed": true}, {"message": "All 10 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 110.0}, "expect_column_sum_to_be_between": {"updated_at": "2023-10-05 16:04:55 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_sum_to_be_between.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["core expectation", "column aggregate expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnSumToBeBetween", "snake_name": "expect_column_sum_to_be_between", "short_description": "Expect the column to sum to be between a minimum value and a maximum value.", "docstring": "Expect the column to sum to be between a minimum value and a maximum value.\n\nexpect_column_sum_to_be_between is a [Column Aggregate Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_aggregate_expectations).\n\n#### Args:\n- column (str): The column name\n- min_value (comparable type or None): The minimal sum allowed.\n- max_value (comparable type or None): The maximal sum allowed.\n- strict_min (boolean): If True, the minimal sum must be strictly larger than min_value, default=False\n- strict_max (boolean): If True, the maximal sum must be strictly smaller than max_value, default=False\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n* min_value and max_value are both inclusive unless strict_min or strict_max are set to True.\n* If min_value is None, then max_value is treated as an upper bound\n* If max_value is None, then min_value is treated as a lower bound\n* observed_value field in the result object is customized for this expectation to be a list representing the actual column sum\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.sum", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 0, "num_failed": 1, "failing_names": ["all"]}, {"backend": "postgresql", "num_passed": 7, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column to sum to be between a minimum value and a maximum value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 7 tests for redshift are passing", "passed": true}, {"message": "All 7 tests for spark are passing", "passed": true}, {"message": "All 7 tests for sqlite are passing", "passed": true}, {"message": "All 7 tests for snowflake are passing", "passed": true}, {"message": "All 7 tests for mysql are passing", "passed": true}, {"message": "All 7 tests for trino are passing", "passed": true}, {"message": "All 7 tests for mssql are passing", "passed": true}, {"message": "All 7 tests for pandas are passing", "passed": true}, {"message": "All 7 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 7 tests for redshift are passing", "passed": true}, {"message": "All 7 tests for spark are passing", "passed": true}, {"message": "All 7 tests for sqlite are passing", "passed": true}, {"message": "All 7 tests for snowflake are passing", "passed": true}, {"message": "All 7 tests for mysql are passing", "passed": true}, {"message": "All 7 tests for trino are passing", "passed": true}, {"message": "All 7 tests for mssql are passing", "passed": true}, {"message": "All 7 tests for pandas are passing", "passed": true}, {"message": "All 7 tests for postgresql are passing", "passed": true}, {"message": "Only 0 / 1 tests for bigquery are passing", "passed": false}, {"message": "  - Failing: all", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 74.5}, "expect_column_to_exist": {"updated_at": "2023-10-05 16:04:55 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_to_exist.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core BatchExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "table expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnToExist", "snake_name": "expect_column_to_exist", "short_description": "Expect the specified column to exist.", "docstring": "Expect the specified column to exist.\n\nexpect_column_to_exist is a [Batch Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_batch_expectations).\n\n#### Args:\n- column (str): The column name.\n\n#### Other Parameters:\n- column_index (int or None): If not None, checks the order of the columns. The expectation will fail if the column is not in location column_index (zero-indexed).\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "table.columns", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the specified column to exist.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for redshift are passing", "passed": true}, {"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for sqlite are passing", "passed": true}, {"message": "All 4 tests for snowflake are passing", "passed": true}, {"message": "All 4 tests for mysql are passing", "passed": true}, {"message": "All 4 tests for trino are passing", "passed": true}, {"message": "All 4 tests for mssql are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}, {"message": "All 4 tests for bigquery are passing", "passed": true}, {"message": "All 4 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for redshift are passing", "passed": true}, {"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 4 tests for sqlite are passing", "passed": true}, {"message": "All 4 tests for snowflake are passing", "passed": true}, {"message": "All 4 tests for mysql are passing", "passed": true}, {"message": "All 4 tests for trino are passing", "passed": true}, {"message": "All 4 tests for mssql are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}, {"message": "All 4 tests for bigquery are passing", "passed": true}, {"message": "All 4 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 53.0}, "expect_column_unique_value_count_to_be_between": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_unique_value_count_to_be_between.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnAggregateExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column aggregate expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnUniqueValueCountToBeBetween", "snake_name": "expect_column_unique_value_count_to_be_between", "short_description": "Expect the number of unique values to be between a minimum value and a maximum value.", "docstring": "Expect the number of unique values to be between a minimum value and a maximum value.\n\nexpect_column_unique_value_count_to_be_between is a [Column Aggregate Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_aggregate_expectations).\n\n#### Args:\n- column (str): The column name.\n- min_value (int or None): The minimum number of unique values allowed.\n- max_value (int or None): The maximum number of unique values allowed.\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n* min_value and max_value are both inclusive.\n* If min_value is None, then max_value is treated as an upper bound\n* If max_value is None, then min_value is treated as a lower bound\n* observed_value field in the result object is customized for this expectation to be an int representing the number of unique values the column\n\n#### See Also:\n- [expect_column_proportion_of_unique_values_to_be_between](https://greatexpectations.io/expectations/expect_column_proportion_of_unique_values_to_be_between)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column.distinct_values.count", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the number of unique values to be between a minimum value and a maximum value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 63.0}, "expect_column_value_lengths_to_be_between": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_value_lengths_to_be_between.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValueLengthsToBeBetween", "snake_name": "expect_column_value_lengths_to_be_between", "short_description": "Expect the column entries to be strings with length between a minimum value and a maximum value (inclusive).", "docstring": "Expect the column entries to be strings with length between a minimum value and a maximum value (inclusive).\n\nThis expectation only works for string-type values. Invoking it on ints or floats will raise a TypeError.\n\nexpect_column_value_lengths_to_be_between is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n- min_value (int or None): The minimum value for a column entry length.\n- max_value (int or None): The maximum value for a column entry length.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n* min_value and max_value are both inclusive.\n* If min_value is None, then max_value is treated as an upper bound, and the number of acceptable rows has no minimum.\n* If max_value is None, then min_value is treated as a lower bound, and the number of acceptable rows has no maximum.\n\n#### See Also:\n- [expect_column_value_lengths_to_equal](https://greatexpectations.io/expectations/expect_column_value_lengths_to_equal)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.value_length.between.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.value_length.between.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 14, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 11, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column entries to be strings with length between a minimum value and a maximum value (inclusive).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 11 tests for redshift are passing", "passed": true}, {"message": "All 11 tests for spark are passing", "passed": true}, {"message": "All 11 tests for sqlite are passing", "passed": true}, {"message": "All 11 tests for snowflake are passing", "passed": true}, {"message": "All 11 tests for mysql are passing", "passed": true}, {"message": "All 11 tests for trino are passing", "passed": true}, {"message": "All 11 tests for mssql are passing", "passed": true}, {"message": "All 14 tests for pandas are passing", "passed": true}, {"message": "All 11 tests for bigquery are passing", "passed": true}, {"message": "All 11 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 11 tests for redshift are passing", "passed": true}, {"message": "All 11 tests for spark are passing", "passed": true}, {"message": "All 11 tests for sqlite are passing", "passed": true}, {"message": "All 11 tests for snowflake are passing", "passed": true}, {"message": "All 11 tests for mysql are passing", "passed": true}, {"message": "All 11 tests for trino are passing", "passed": true}, {"message": "All 11 tests for mssql are passing", "passed": true}, {"message": "All 14 tests for pandas are passing", "passed": true}, {"message": "All 11 tests for bigquery are passing", "passed": true}, {"message": "All 11 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 126.0}, "expect_column_value_lengths_to_equal": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_value_lengths_to_equal.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValueLengthsToEqual", "snake_name": "expect_column_value_lengths_to_equal", "short_description": "Expect the column entries to be strings with length equal to the provided value.", "docstring": "Expect the column entries to be strings with length equal to the provided value.\n\nThis expectation only works for string-type values. Invoking it on ints or floats will raise a TypeError.\n\nexpect_column_values_to_be_between is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n- value (int or None): The expected value for a column entry length.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_value_lengths_to_be_between](https://greatexpectations.io/expectations/expect_column_value_lengths_to_be_between)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.value_length.equals.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.value_length.equals.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 6, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column entries to be strings with length equal to the provided value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 8 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 6 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 8 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 6 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 67.0}, "expect_column_value_z_scores_to_be_less_than": {"updated_at": "2023-08-21 10:57:45 -0400 3 months ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_value_z_scores_to_be_less_than.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValueZScoresToBeLessThan", "snake_name": "expect_column_value_z_scores_to_be_less_than", "short_description": "Expect the Z-scores of a column's values to be less than a given threshold.", "docstring": "Expect the Z-scores of a column's values to be less than a given threshold.\n\nexpect_column_values_to_be_of_type is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations) for typed-column backends, and also for PandasExecutionEngine where the column dtype and provided type_ are unambiguous constraints (any dtype except 'object' or dtype of 'object' with type_ specified as 'object').\n\n#### Args:\n- column (str): The column name of a numerical column.\n- threshold (number): A maximum Z-score threshold. All column Z-scores that are lower than this threshold will evaluate successfully.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n- double_sided (boolean): A True or False value indicating whether to evaluate double sidedly. Examples... (double_sided = True, threshold = 2) -> Z scores in non-inclusive interval(-2,2) | (double_sided = False, threshold = 2) -> Z scores in non-inclusive interval (-infinity,2)\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the Expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.z_score.under_threshold.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.z_score.under_threshold.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the Z-scores of a column's values to be less than a given threshold.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 63.0}, "expect_column_values_to_be_between": {"updated_at": "2023-10-03 15:00:33 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_be_between.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeBetween", "snake_name": "expect_column_values_to_be_between", "short_description": "Expect the column entries to be between a minimum value and a maximum value (inclusive).", "docstring": "Expect the column entries to be between a minimum value and a maximum value (inclusive).\n\nexpect_column_values_to_be_between is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations)\n\n#### Args:\n- column (str): The column name.\n- min_value (comparable type or None): The minimum value for a column entry.\n- max_value (comparable type or None): The maximum value for a column entry.\n- strict_min (boolean): If True, values must be strictly larger than min_value, default=False\n- strict_max (boolean): If True, values must be strictly smaller than max_value, default=False\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n* min_value and max_value are both inclusive unless strict_min or strict_max are set to True.\n* If min_value is None, then max_value is treated as an upper bound, and there is no minimum value checked.\n* If max_value is None, then min_value is treated as a lower bound, and there is no maximum value checked.\n\n#### See Also:\n- [expect_column_value_lengths_to_be_between](https://greatexpectations.io/expectations/expect_column_value_lengths_to_be_between)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.between.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.between.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 29, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 30, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 29, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 28, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 29, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 25, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 29, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 35, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 0, "num_failed": 1, "failing_names": ["all"]}, {"backend": "postgresql", "num_passed": 29, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column entries to be between a minimum value and a maximum value (inclusive).\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 29 tests for redshift are passing", "passed": true}, {"message": "All 30 tests for spark are passing", "passed": true}, {"message": "All 29 tests for sqlite are passing", "passed": true}, {"message": "All 28 tests for snowflake are passing", "passed": true}, {"message": "All 29 tests for mysql are passing", "passed": true}, {"message": "All 25 tests for trino are passing", "passed": true}, {"message": "All 29 tests for mssql are passing", "passed": true}, {"message": "All 35 tests for pandas are passing", "passed": true}, {"message": "All 29 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 29 tests for redshift are passing", "passed": true}, {"message": "All 30 tests for spark are passing", "passed": true}, {"message": "All 29 tests for sqlite are passing", "passed": true}, {"message": "All 28 tests for snowflake are passing", "passed": true}, {"message": "All 29 tests for mysql are passing", "passed": true}, {"message": "All 25 tests for trino are passing", "passed": true}, {"message": "All 29 tests for mssql are passing", "passed": true}, {"message": "All 35 tests for pandas are passing", "passed": true}, {"message": "All 29 tests for postgresql are passing", "passed": true}, {"message": "Only 0 / 1 tests for bigquery are passing", "passed": false}, {"message": "  - Failing: all", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 274.5}, "expect_column_values_to_be_dateutil_parseable": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_be_dateutil_parseable.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeDateutilParseable", "snake_name": "expect_column_values_to_be_dateutil_parseable", "short_description": "Expect the column entries to be parsable using dateutil.", "docstring": "Expect the column entries to be parsable using dateutil.\n\nexpect_column_values_to_be_dateutil_parseable is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations)\n\n#### Args:\n- column (str): The column name.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.dateutil_parseable.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.dateutil_parseable.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine"], "backend_test_result_counts": [{"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column entries to be parsable using dateutil.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 6.0}, "expect_column_values_to_be_decreasing": {"updated_at": "2023-10-03 15:00:33 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_be_decreasing.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeDecreasing", "snake_name": "expect_column_values_to_be_decreasing", "short_description": "Expect the column values to be decreasing.", "docstring": "Expect the column values to be decreasing.\n\nBy default, this expectation only works for numeric or datetime data. When 'parse_strings_as_datetimes=True', it can also parse strings to datetimes.\n\nIf 'strictly=True', then this expectation is only satisfied if each consecutive value is strictly decreasing--equal values are treated as failures.\n\nexpect_column_values_to_be_decreasing is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations)\n\n#### Args:\n- column (str): The column name.\n\n#### Keyword Args:\n- strictly (Boolean or None): If True, values must be strictly greater than previous values\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_be_increasing](https://greatexpectations.io/expectations/expect_column_values_to_be_increasing)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.decreasing.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.decreasing.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column values to be decreasing.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 14.0}, "expect_column_values_to_be_in_set": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_be_in_set.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeInSet", "snake_name": "expect_column_values_to_be_in_set", "short_description": "Expect each column value to be in a given set.", "docstring": "Expect each column value to be in a given set.\n\n#### For example:\n```\n# my_df.my_col = [1,2,2,3,3,3]\n>>> my_df.expect_column_values_to_be_in_set(\n        \"my_col\",\n        [2,3]\n    )\n{\n    \"success\": false\n    \"result\": {\n        \"unexpected_count\": 1\n        \"unexpected_percent\": 16.66666666666666666,\n        \"unexpected_percent_nonmissing\": 16.66666666666666666,\n        \"partial_unexpected_list\": [\n            1\n        ],\n    },\n}\n```\n\nexpect_column_values_to_be_in_set is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n- value_set (set-like): A set of objects used for comparison.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n- parse_strings_as_datetimes (boolean or None) : If True values provided in value_set will be parsed as datetimes before making comparisons.\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_not_be_in_set](https://greatexpectations.io/expectations/expect_column_values_to_not_be_in_set)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.in_set.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.in_set.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 15, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 11, "num_failed": 1, "failing_names": ["all"]}, {"backend": "postgresql", "num_passed": 12, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect each column value to be in a given set.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 12 tests for redshift are passing", "passed": true}, {"message": "All 12 tests for spark are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 12 tests for snowflake are passing", "passed": true}, {"message": "All 12 tests for mysql are passing", "passed": true}, {"message": "All 12 tests for trino are passing", "passed": true}, {"message": "All 12 tests for mssql are passing", "passed": true}, {"message": "All 15 tests for pandas are passing", "passed": true}, {"message": "All 12 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 12 tests for redshift are passing", "passed": true}, {"message": "All 12 tests for spark are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 12 tests for snowflake are passing", "passed": true}, {"message": "All 12 tests for mysql are passing", "passed": true}, {"message": "All 12 tests for trino are passing", "passed": true}, {"message": "All 12 tests for mssql are passing", "passed": true}, {"message": "All 15 tests for pandas are passing", "passed": true}, {"message": "All 12 tests for postgresql are passing", "passed": true}, {"message": "Only 11 / 12 tests for bigquery are passing", "passed": false}, {"message": "  - Failing: all", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 131.5}, "expect_column_values_to_be_in_type_list": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_be_in_type_list.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeInTypeList", "snake_name": "expect_column_values_to_be_in_type_list", "short_description": "Expect a column to contain values from a specified type list.", "docstring": "Expect a column to contain values from a specified type list.\n\nexpect_column_values_to_be_in_type_list is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations) for typed-column backends, and also for PandasDataset where the column dtype provides an unambiguous constraints (any dtype except 'object').\n\nFor PandasDataset columns with dtype of 'object' expect_column_values_to_be_in_type_list will independently check each row's type.\n\n#### Args:\n- column (str): The column name.\n- type_list (str): A list of strings representing the data type that each column should have as entries. Valid types are defined by the current backend implementation and are dynamically loaded. For example, valid types for PandasDataset include any numpy dtype values (such as 'int64') or native python types (such as 'int'), whereas valid types for a SqlAlchemyDataset include types named by the current driver such as 'INTEGER' in most SQL dialects and 'TEXT' in dialects such as postgresql. Valid types for SparkDFDataset include 'StringType', 'BooleanType' and other pyspark-defined type names.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See also:\n- [expect_column_values_to_be_of_type](https://greatexpectations.io/expectations/expect_column_values_to_be_of_type)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "table.column_types", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 0, "num_failed": 1, "failing_names": ["all"]}, {"backend": "postgresql", "num_passed": 7, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a column to contain values from a specified type list.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 7 tests for redshift are passing", "passed": true}, {"message": "All 7 tests for spark are passing", "passed": true}, {"message": "All 7 tests for sqlite are passing", "passed": true}, {"message": "All 6 tests for snowflake are passing", "passed": true}, {"message": "All 7 tests for mysql are passing", "passed": true}, {"message": "All 6 tests for trino are passing", "passed": true}, {"message": "All 7 tests for mssql are passing", "passed": true}, {"message": "All 9 tests for pandas are passing", "passed": true}, {"message": "All 7 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 7 tests for redshift are passing", "passed": true}, {"message": "All 7 tests for spark are passing", "passed": true}, {"message": "All 7 tests for sqlite are passing", "passed": true}, {"message": "All 6 tests for snowflake are passing", "passed": true}, {"message": "All 7 tests for mysql are passing", "passed": true}, {"message": "All 6 tests for trino are passing", "passed": true}, {"message": "All 7 tests for mssql are passing", "passed": true}, {"message": "All 9 tests for pandas are passing", "passed": true}, {"message": "All 7 tests for postgresql are passing", "passed": true}, {"message": "Only 0 / 1 tests for bigquery are passing", "passed": false}, {"message": "  - Failing: all", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 74.5}, "expect_column_values_to_be_increasing": {"updated_at": "2023-10-03 15:00:33 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_be_increasing.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeIncreasing", "snake_name": "expect_column_values_to_be_increasing", "short_description": "Expect the column values to be increasing.", "docstring": "Expect the column values to be increasing.\n\nBy default, this expectation only works for numeric or datetime data. When 'parse_strings_as_datetimes=True', it can also parse strings to datetimes.\n\nIf 'strictly=True', then this expectation is only satisfied if each consecutive value is strictly increasing--equal values are treated as failures.\n\nexpect_column_values_to_be_increasing is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n\n#### Keyword Args:\n- strictly (Boolean or None): If True, values must be strictly greater than previous values\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without\n- modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_be_decreasing](https://greatexpectations.io/expectations/expect_column_values_to_be_decreasing)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.increasing.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.increasing.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 7, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column values to be increasing.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 6 tests for spark are passing", "passed": true}, {"message": "All 7 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 6 tests for spark are passing", "passed": true}, {"message": "All 7 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 17.0}, "expect_column_values_to_be_json_parseable": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_be_json_parseable.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeJsonParseable", "snake_name": "expect_column_values_to_be_json_parseable", "short_description": "Expect the column entries to be data written in JavaScript Object Notation.", "docstring": "Expect the column entries to be data written in JavaScript Object Notation.\n\nexpect_column_values_to_be_json_parseable is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_match_json_schema](https://greatexpectations.io/expectations/expect_column_values_to_match_json_schema)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.json_parseable.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.json_parseable.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column entries to be data written in JavaScript Object Notation.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 14.0}, "expect_column_values_to_be_null": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_be_null.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeNull", "snake_name": "expect_column_values_to_be_null", "short_description": "Expect the column values to be null.", "docstring": "Expect the column values to be null.\n\nexpect_column_values_to_be_null is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_not_be_null](https://greatexpectations.io/expectations/expect_column_values_to_not_be_null)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.null.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.null.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 6, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column values to be null.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 6 tests for redshift are passing", "passed": true}, {"message": "All 6 tests for spark are passing", "passed": true}, {"message": "All 6 tests for sqlite are passing", "passed": true}, {"message": "All 6 tests for snowflake are passing", "passed": true}, {"message": "All 6 tests for mysql are passing", "passed": true}, {"message": "All 6 tests for trino are passing", "passed": true}, {"message": "All 6 tests for mssql are passing", "passed": true}, {"message": "All 6 tests for pandas are passing", "passed": true}, {"message": "All 6 tests for bigquery are passing", "passed": true}, {"message": "All 6 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 6 tests for redshift are passing", "passed": true}, {"message": "All 6 tests for spark are passing", "passed": true}, {"message": "All 6 tests for sqlite are passing", "passed": true}, {"message": "All 6 tests for snowflake are passing", "passed": true}, {"message": "All 6 tests for mysql are passing", "passed": true}, {"message": "All 6 tests for trino are passing", "passed": true}, {"message": "All 6 tests for mssql are passing", "passed": true}, {"message": "All 6 tests for pandas are passing", "passed": true}, {"message": "All 6 tests for bigquery are passing", "passed": true}, {"message": "All 6 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 73.0}, "expect_column_values_to_be_of_type": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_be_of_type.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeOfType", "snake_name": "expect_column_values_to_be_of_type", "short_description": "Expect a column to contain values of a specified data type.", "docstring": "Expect a column to contain values of a specified data type.\n\nexpect_column_values_to_be_of_type is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations) for typed-column backends, and also for PandasDataset where the column dtype and provided type_ are unambiguous constraints (any dtype except 'object' or dtype of 'object' with type_ specified as 'object').\n\nFor PandasDataset columns with dtype of 'object' expect_column_values_to_be_of_type will\nindependently check each row's type.\n\n#### Args:\n- column (str): The column name.\n- type\\_ (str): A string representing the data type that each column should have as entries. Valid types are defined by the current backend implementation and are dynamically loaded. For example, valid types for PandasDataset include any numpy dtype values (such as 'int64') or native python types (such as 'int'), whereas valid types for a SqlAlchemyDataset include types named by the current driver such as 'INTEGER' in most SQL dialects and 'TEXT' in dialects such as postgresql. Valid types for SparkDFDataset include 'StringType', 'BooleanType' and other pyspark-defined type names. Note that the strings representing these types are sometimes case-sensitive. For instance, with a Pandas backend `timestamp` will be unrecognized and\nfail the expectation, while `Timestamp` would pass with valid data.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See also:\n- [expect_column_values_to_be_in_type_list](https://greatexpectations.io/expectations/expect_column_values_to_be_in_type_list)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "table.column_types", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 1, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 1, "num_failed": 3, "failing_names": ["basic_sqlalchemy_int_positive_test", "positive_test_sql_varchar", "negative_test_sqlalchemy_floats_are_not_boolean"]}, {"backend": "mssql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect a column to contain values of a specified data type.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 1 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 12 tests for pandas are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 1 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 12 tests for pandas are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}, {"message": "Only 1 / 4 tests for trino are passing", "passed": false}, {"message": "  - Failing: basic_sqlalchemy_int_positive_test, positive_test_sql_varchar, negative_test_sqlalchemy_floats_are_not_boolean", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 51.5}, "expect_column_values_to_be_unique": {"updated_at": "2023-10-05 16:04:55 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_be_unique.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "EXPERIMENTAL", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToBeUnique", "snake_name": "expect_column_values_to_be_unique", "short_description": "Expect each column value to be unique.", "docstring": "Expect each column value to be unique.\n\nThis expectation detects duplicates. All duplicated values are counted as exceptions.\n\nFor example, [1, 2, 3, 3, 3] will return [3, 3, 3] in result.exceptions_list, with unexpected_percent = 60.0.\n\nexpect_column_values_to_be_unique is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations)\n\n#### Args:\n- column (str): The column name.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.unique.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.unique.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 0, "num_failed": 1, "failing_names": ["all"]}, {"backend": "postgresql", "num_passed": 8, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect each column value to be unique.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 8 tests for redshift are passing", "passed": true}, {"message": "All 11 tests for spark are passing", "passed": true}, {"message": "All 8 tests for sqlite are passing", "passed": true}, {"message": "All 8 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 7 tests for trino are passing", "passed": true}, {"message": "All 8 tests for mssql are passing", "passed": true}, {"message": "All 9 tests for pandas are passing", "passed": true}, {"message": "All 8 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 8 tests for redshift are passing", "passed": true}, {"message": "All 11 tests for spark are passing", "passed": true}, {"message": "All 8 tests for sqlite are passing", "passed": true}, {"message": "All 8 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 7 tests for trino are passing", "passed": true}, {"message": "All 8 tests for mssql are passing", "passed": true}, {"message": "All 9 tests for pandas are passing", "passed": true}, {"message": "All 8 tests for postgresql are passing", "passed": true}, {"message": "Only 0 / 1 tests for bigquery are passing", "passed": false}, {"message": "  - Failing: all", "passed": false}], "passed": false, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 86.5}, "expect_column_values_to_match_json_schema": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_match_json_schema.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToMatchJsonSchema", "snake_name": "expect_column_values_to_match_json_schema", "short_description": "Expect the column entries to be JSON objects matching a given JSON schema.", "docstring": "Expect the column entries to be JSON objects matching a given JSON schema.\n\nexpect_column_values_to_match_json_schema is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n- json_schema (str): The JSON schema (in string form) to match\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_be_json_parseable](https://greatexpectations.io/expectations/expect_column_values_to_be_json_parseable)\n- [The JSON-schema docs](https://json-schema.org)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_json_schema.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_json_schema.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 3, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column entries to be JSON objects matching a given JSON schema.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 3 tests for spark are passing", "passed": true}, {"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 3 tests for spark are passing", "passed": true}, {"message": "All 3 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 10.0}, "expect_column_values_to_match_like_pattern": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_match_like_pattern.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToMatchLikePattern", "snake_name": "expect_column_values_to_match_like_pattern", "short_description": "Expect the column entries to be strings that match a given like pattern expression.", "docstring": "Expect the column entries to be strings that match a given like pattern expression.\n\nexpect_column_values_to_match_like_pattern is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n- like_pattern (str): The like pattern expression the column entries should match.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_match_regex](https://greatexpectations.io/expectations/expect_column_values_to_match_regex)\n- [expect_column_values_to_match_regex_list](https://greatexpectations.io/expectations/expect_column_values_to_match_regex_list)\n- [expect_column_values_to_not_match_regex](https://greatexpectations.io/expectations/expect_column_values_to_not_match_regex)\n- [expect_column_values_to_not_match_regex_list](https://greatexpectations.io/expectations/expect_column_values_to_not_match_regex_list)\n- [expect_column_values_to_match_like_pattern_list](https://greatexpectations.io/expectations/expect_column_values_to_match_like_pattern_list)\n- [expect_column_values_to_not_match_like_pattern](https://greatexpectations.io/expectations/expect_column_values_to_not_match_like_pattern)\n- [expect_column_values_to_not_match_like_pattern_list](https://greatexpectations.io/expectations/expect_column_values_to_not_match_like_pattern_list)\n "}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_like_pattern.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_like_pattern.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 10, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column entries to be strings that match a given like pattern expression.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 10 tests for redshift are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 10 tests for snowflake are passing", "passed": true}, {"message": "All 10 tests for mysql are passing", "passed": true}, {"message": "All 10 tests for trino are passing", "passed": true}, {"message": "All 10 tests for mssql are passing", "passed": true}, {"message": "All 9 tests for bigquery are passing", "passed": true}, {"message": "All 10 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 10 tests for redshift are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 10 tests for snowflake are passing", "passed": true}, {"message": "All 10 tests for mysql are passing", "passed": true}, {"message": "All 10 tests for trino are passing", "passed": true}, {"message": "All 10 tests for mssql are passing", "passed": true}, {"message": "All 9 tests for bigquery are passing", "passed": true}, {"message": "All 10 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 88.0}, "expect_column_values_to_match_like_pattern_list": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_match_like_pattern_list.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToMatchLikePatternList", "snake_name": "expect_column_values_to_match_like_pattern_list", "short_description": "Expect the column entries to be strings that match any of a provided list of like pattern expressions.", "docstring": "Expect the column entries to be strings that match any of a provided list of like pattern expressions.\n\nexpect_column_values_to_match_like_pattern_list is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n- like_pattern_list (List[str]): The list of like pattern expressions the column entries should match.\n\n#### Keyword Args:\n- match_on (string): \"any\" or \"all\". Use \"any\" if the value should match at least one like pattern in the list. Use \"all\" if it should match each like pattern in the list.\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_match_regex](https://greatexpectations.io/expectations/expect_column_values_to_match_regex)\n- [expect_column_values_to_match_regex_list](https://greatexpectations.io/expectations/expect_column_values_to_match_regex_list)\n- [expect_column_values_to_not_match_regex](https://greatexpectations.io/expectations/expect_column_values_to_not_match_regex)\n- [expect_column_values_to_not_match_regex_list](https://greatexpectations.io/expectations/expect_column_values_to_not_match_regex_list)\n- [expect_column_values_to_match_like_pattern](https://greatexpectations.io/expectations/expect_column_values_to_match_like_pattern)\n- [expect_column_values_to_not_match_like_pattern](https://greatexpectations.io/expectations/expect_column_values_to_not_match_like_pattern)\n- [expect_column_values_to_not_match_like_pattern_list](https://greatexpectations.io/expectations/expect_column_values_to_not_match_like_pattern_list)\n "}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_like_pattern_list.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_like_pattern_list.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 6, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column entries to be strings that match any of a provided list of like pattern expressions.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 6 tests for redshift are passing", "passed": true}, {"message": "All 6 tests for sqlite are passing", "passed": true}, {"message": "All 6 tests for snowflake are passing", "passed": true}, {"message": "All 6 tests for mysql are passing", "passed": true}, {"message": "All 6 tests for trino are passing", "passed": true}, {"message": "All 6 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 6 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 6 tests for redshift are passing", "passed": true}, {"message": "All 6 tests for sqlite are passing", "passed": true}, {"message": "All 6 tests for snowflake are passing", "passed": true}, {"message": "All 6 tests for mysql are passing", "passed": true}, {"message": "All 6 tests for trino are passing", "passed": true}, {"message": "All 6 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 6 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 56.0}, "expect_column_values_to_match_regex": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_match_regex.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToMatchRegex", "snake_name": "expect_column_values_to_match_regex", "short_description": "Expect the column entries to be strings that match a given regular expression.", "docstring": "Expect the column entries to be strings that match a given regular expression.\n\nValid matches can be found anywhere in the string, for example \"[at]+\" will identify the following strings as expected: \"cat\", \"hat\", \"aa\", \"a\", and \"t\", and the following strings as unexpected: \"fish\", \"dog\".\n\nexpect_column_values_to_match_regex is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n- regex (str): The regular expression the column entries should match.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_match_regex_list](https://greatexpectations.io/expectations/expect_column_values_to_match_regex_list)\n- [expect_column_values_to_not_match_regex](https://greatexpectations.io/expectations/expect_column_values_to_not_match_regex)\n- [expect_column_values_to_not_match_regex_list](https://greatexpectations.io/expectations/expect_column_values_to_not_match_regex_list)\n- [expect_column_values_to_match_like_pattern](https://greatexpectations.io/expectations/expect_column_values_to_match_like_pattern)\n- [expect_column_values_to_match_like_pattern_list](https://greatexpectations.io/expectations/expect_column_values_to_match_like_pattern_list)\n- [expect_column_values_to_not_match_like_pattern](https://greatexpectations.io/expectations/expect_column_values_to_not_match_like_pattern)\n- [expect_column_values_to_not_match_like_pattern_list](https://greatexpectations.io/expectations/expect_column_values_to_not_match_like_pattern_list)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_regex.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_regex.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 13, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 12, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column entries to be strings that match a given regular expression.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 12 tests for redshift are passing", "passed": true}, {"message": "All 12 tests for spark are passing", "passed": true}, {"message": "All 10 tests for snowflake are passing", "passed": true}, {"message": "All 11 tests for mysql are passing", "passed": true}, {"message": "All 12 tests for trino are passing", "passed": true}, {"message": "All 13 tests for pandas are passing", "passed": true}, {"message": "All 11 tests for bigquery are passing", "passed": true}, {"message": "All 12 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 12 tests for redshift are passing", "passed": true}, {"message": "All 12 tests for spark are passing", "passed": true}, {"message": "All 10 tests for snowflake are passing", "passed": true}, {"message": "All 11 tests for mysql are passing", "passed": true}, {"message": "All 12 tests for trino are passing", "passed": true}, {"message": "All 13 tests for pandas are passing", "passed": true}, {"message": "All 11 tests for bigquery are passing", "passed": true}, {"message": "All 12 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 104.0}, "expect_column_values_to_match_regex_list": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_match_regex_list.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToMatchRegexList", "snake_name": "expect_column_values_to_match_regex_list", "short_description": "Expect the column entries to be strings that can be matched to either any of or all of a list of regular expressions.", "docstring": "Expect the column entries to be strings that can be matched to either any of or all of a list of regular expressions.\n\nMatches can be anywhere in the string.\n\nexpect_column_values_to_match_regex_list is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n- regex_list (list): The list of regular expressions which the column entries should match\n\n#### Keyword Args:\n- match_on (string): \"any\" or \"all\". Use \"any\" if the value should match at least one regular expression in the list. Use \"all\" if it should match each regular expression in the list.\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n\n#### See Also:\n- [expect_column_values_to_match_regex](https://greatexpectations.io/expectations/expect_column_values_to_match_regex)\n- [expect_column_values_to_not_match_regex](https://greatexpectations.io/expectations/expect_column_values_to_not_match_regex)\n- [expect_column_values_to_not_match_regex_list](https://greatexpectations.io/expectations/expect_column_values_to_not_match_regex_list)\n- [expect_column_values_to_match_like_pattern](https://greatexpectations.io/expectations/expect_column_values_to_match_like_pattern)\n- [expect_column_values_to_match_like_pattern_list](https://greatexpectations.io/expectations/expect_column_values_to_match_like_pattern_list)\n- [expect_column_values_to_not_match_like_pattern](https://greatexpectations.io/expectations/expect_column_values_to_not_match_like_pattern)\n- [expect_column_values_to_not_match_like_pattern_list](https://greatexpectations.io/expectations/expect_column_values_to_not_match_like_pattern_list)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_regex_list.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_regex_list.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 6, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column entries to be strings that can be matched to either any of or all of a list of regular expressions.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 6 tests for redshift are passing", "passed": true}, {"message": "All 6 tests for spark are passing", "passed": true}, {"message": "All 6 tests for snowflake are passing", "passed": true}, {"message": "All 6 tests for mysql are passing", "passed": true}, {"message": "All 6 tests for trino are passing", "passed": true}, {"message": "All 6 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 6 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 6 tests for redshift are passing", "passed": true}, {"message": "All 6 tests for spark are passing", "passed": true}, {"message": "All 6 tests for snowflake are passing", "passed": true}, {"message": "All 6 tests for mysql are passing", "passed": true}, {"message": "All 6 tests for trino are passing", "passed": true}, {"message": "All 6 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 6 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 58.0}, "expect_column_values_to_match_strftime_format": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_match_strftime_format.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToMatchStrftimeFormat", "snake_name": "expect_column_values_to_match_strftime_format", "short_description": "Expect the column entries to be strings representing a date or time with a given format.", "docstring": "Expect the column entries to be strings representing a date or time with a given format.\n\nexpect_column_values_to_match_strftime_format is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n- strftime_format (str): A strftime format string to use for matching\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": false, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.match_strftime_format.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.match_strftime_format.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine"], "backend_test_result_counts": [{"backend": "spark", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 9, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column entries to be strings representing a date or time with a given format.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 10 tests for spark are passing", "passed": true}, {"message": "All 9 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 10 tests for spark are passing", "passed": true}, {"message": "All 9 tests for pandas are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 23.0}, "expect_column_values_to_not_be_in_set": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_not_be_in_set.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToNotBeInSet", "snake_name": "expect_column_values_to_not_be_in_set", "short_description": "Expect column entries to not be in the set.", "docstring": "Expect column entries to not be in the set.\n\n#### For example:\n```\n# my_df.my_col = [1,2,2,3,3,3]\n>>> my_df.expect_column_values_to_not_be_in_set(\n        \"my_col\",\n        [1,2]\n    )\n{\n    \"success\": false\n    \"result\": {\n        \"unexpected_count\": 3\n        \"unexpected_percent\": 50.0,\n        \"unexpected_percent_nonmissing\": 50.0,\n        \"partial_unexpected_list\": [\n            1, 2, 2\n        ],\n    },\n}\n```\n\nexpect_column_values_to_not_be_in_set is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n- value_set (set-like): A set of objects used for comparison.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_be_in_set](https://greatexpectations.io/expectations/expect_column_values_to_be_in_set)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.not_in_set.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.not_in_set.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 9, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect column entries to not be in the set.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 9 tests for redshift are passing", "passed": true}, {"message": "All 9 tests for spark are passing", "passed": true}, {"message": "All 9 tests for sqlite are passing", "passed": true}, {"message": "All 9 tests for snowflake are passing", "passed": true}, {"message": "All 9 tests for mysql are passing", "passed": true}, {"message": "All 9 tests for trino are passing", "passed": true}, {"message": "All 9 tests for mssql are passing", "passed": true}, {"message": "All 10 tests for pandas are passing", "passed": true}, {"message": "All 9 tests for bigquery are passing", "passed": true}, {"message": "All 9 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 9 tests for redshift are passing", "passed": true}, {"message": "All 9 tests for spark are passing", "passed": true}, {"message": "All 9 tests for sqlite are passing", "passed": true}, {"message": "All 9 tests for snowflake are passing", "passed": true}, {"message": "All 9 tests for mysql are passing", "passed": true}, {"message": "All 9 tests for trino are passing", "passed": true}, {"message": "All 9 tests for mssql are passing", "passed": true}, {"message": "All 10 tests for pandas are passing", "passed": true}, {"message": "All 9 tests for bigquery are passing", "passed": true}, {"message": "All 9 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 104.0}, "expect_column_values_to_not_be_null": {"updated_at": "2023-10-05 16:04:55 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_not_be_null.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToNotBeNull", "snake_name": "expect_column_values_to_not_be_null", "short_description": "Expect the column values to not be null.", "docstring": "Expect the column values to not be null.\n\nTo be counted as an exception, values must be explicitly null or missing, such as a NULL in PostgreSQL or an\nnp.NaN in pandas. Empty strings don't count as null unless they have been coerced to a null type.\n\nexpect_column_values_to_not_be_null is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_be_null](https://greatexpectations.io/expectations/expect_column_values_to_be_null)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.nonnull.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 7, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 7, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column values to not be null.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 7 tests for redshift are passing", "passed": true}, {"message": "All 7 tests for spark are passing", "passed": true}, {"message": "All 7 tests for sqlite are passing", "passed": true}, {"message": "All 7 tests for snowflake are passing", "passed": true}, {"message": "All 7 tests for mysql are passing", "passed": true}, {"message": "All 7 tests for trino are passing", "passed": true}, {"message": "All 7 tests for mssql are passing", "passed": true}, {"message": "All 7 tests for pandas are passing", "passed": true}, {"message": "All 7 tests for bigquery are passing", "passed": true}, {"message": "All 7 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 7 tests for redshift are passing", "passed": true}, {"message": "All 7 tests for spark are passing", "passed": true}, {"message": "All 7 tests for sqlite are passing", "passed": true}, {"message": "All 7 tests for snowflake are passing", "passed": true}, {"message": "All 7 tests for mysql are passing", "passed": true}, {"message": "All 7 tests for trino are passing", "passed": true}, {"message": "All 7 tests for mssql are passing", "passed": true}, {"message": "All 7 tests for pandas are passing", "passed": true}, {"message": "All 7 tests for bigquery are passing", "passed": true}, {"message": "All 7 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 83.0}, "expect_column_values_to_not_match_like_pattern": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_not_match_like_pattern.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToNotMatchLikePattern", "snake_name": "expect_column_values_to_not_match_like_pattern", "short_description": "Expect the column entries to be strings that do NOT match a given like pattern expression.", "docstring": "Expect the column entries to be strings that do NOT match a given like pattern expression.\n\nexpect_column_values_to_not_match_like_pattern is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n- like_pattern (str): The like pattern expression the column entries should NOT match.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_match_regex](https://greatexpectations.io/expectations/expect_column_values_to_match_regex)\n- [expect_column_values_to_match_regex_list](https://greatexpectations.io/expectations/expect_column_values_to_match_regex_list)\n- [expect_column_values_to_not_match_regex](https://greatexpectations.io/expectations/expect_column_values_to_not_match_regex)\n- [expect_column_values_to_not_match_regex_list](https://greatexpectations.io/expectations/expect_column_values_to_not_match_regex_list)\n- [expect_column_values_to_match_like_pattern](https://greatexpectations.io/expectations/expect_column_values_to_match_like_pattern)\n- [expect_column_values_to_match_like_pattern_list](https://greatexpectations.io/expectations/expect_column_values_to_match_like_pattern_list)\n- [expect_column_values_to_not_match_like_pattern_list](https://greatexpectations.io/expectations/expect_column_values_to_not_match_like_pattern_list)\n "}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.not_match_like_pattern.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.not_match_like_pattern.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 8, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column entries to be strings that do NOT match a given like pattern expression.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 8 tests for redshift are passing", "passed": true}, {"message": "All 8 tests for sqlite are passing", "passed": true}, {"message": "All 8 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 8 tests for trino are passing", "passed": true}, {"message": "All 8 tests for mssql are passing", "passed": true}, {"message": "All 8 tests for bigquery are passing", "passed": true}, {"message": "All 8 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 8 tests for redshift are passing", "passed": true}, {"message": "All 8 tests for sqlite are passing", "passed": true}, {"message": "All 8 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 8 tests for trino are passing", "passed": true}, {"message": "All 8 tests for mssql are passing", "passed": true}, {"message": "All 8 tests for bigquery are passing", "passed": true}, {"message": "All 8 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 73.0}, "expect_column_values_to_not_match_like_pattern_list": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_not_match_like_pattern_list.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToNotMatchLikePatternList", "snake_name": "expect_column_values_to_not_match_like_pattern_list", "short_description": "Expect the column entries to be strings that do NOT match any of a provided list of like pattern expressions.", "docstring": "Expect the column entries to be strings that do NOT match any of a provided list of like pattern expressions.\n\nexpect_column_values_to_not_match_like_pattern_list is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n- like_pattern_list (List[str]): The list of like pattern expressions the column entries should NOT match.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_match_regex](https://greatexpectations.io/expectations/expect_column_values_to_match_regex)\n- [expect_column_values_to_match_regex_list](https://greatexpectations.io/expectations/expect_column_values_to_match_regex_list)\n- [expect_column_values_to_not_match_regex](https://greatexpectations.io/expectations/expect_column_values_to_not_match_regex)\n- [expect_column_values_to_not_match_regex_list](https://greatexpectations.io/expectations/expect_column_values_to_not_match_regex_list)\n- [expect_column_values_to_match_like_pattern](https://greatexpectations.io/expectations/expect_column_values_to_match_like_pattern)\n- [expect_column_values_to_match_like_pattern_list](https://greatexpectations.io/expectations/expect_column_values_to_match_like_pattern_list)\n- [expect_column_values_to_not_match_like_pattern](https://greatexpectations.io/expectations/expect_column_values_to_not_match_like_pattern)\n "}, "execution_engines": {"PandasExecutionEngine": false, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": false}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.not_match_like_pattern_list.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.not_match_like_pattern_list.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column entries to be strings that do NOT match any of a provided list of like pattern expressions.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for redshift are passing", "passed": true}, {"message": "All 4 tests for sqlite are passing", "passed": true}, {"message": "All 4 tests for snowflake are passing", "passed": true}, {"message": "All 4 tests for mysql are passing", "passed": true}, {"message": "All 4 tests for trino are passing", "passed": true}, {"message": "All 4 tests for mssql are passing", "passed": true}, {"message": "All 4 tests for bigquery are passing", "passed": true}, {"message": "All 4 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for redshift are passing", "passed": true}, {"message": "All 4 tests for sqlite are passing", "passed": true}, {"message": "All 4 tests for snowflake are passing", "passed": true}, {"message": "All 4 tests for mysql are passing", "passed": true}, {"message": "All 4 tests for trino are passing", "passed": true}, {"message": "All 4 tests for mssql are passing", "passed": true}, {"message": "All 4 tests for bigquery are passing", "passed": true}, {"message": "All 4 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 41.0}, "expect_column_values_to_not_match_regex": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_not_match_regex.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToNotMatchRegex", "snake_name": "expect_column_values_to_not_match_regex", "short_description": "Expect the column entries to be strings that do NOT match a given regular expression.", "docstring": "Expect the column entries to be strings that do NOT match a given regular expression.\n\nThe regex must not match any portion of the provided string. For example, \"[at]+\" would identify the following strings as expected: \"fish\", \"dog\", and the following as unexpected: \"cat\", \"hat\".\n\nexpect_column_values_to_not_match_regex is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n- regex (str): The regular expression the column entries should NOT match.\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_match_regex](https://greatexpectations.io/expectations/expect_column_values_to_match_regex)\n- [expect_column_values_to_match_regex_list](https://greatexpectations.io/expectations/expect_column_values_to_match_regex_list)\n- [expect_column_values_to_not_match_regex_list](https://greatexpectations.io/expectations/expect_column_values_to_not_match_regex_list)\n- [expect_column_values_to_match_like_pattern](https://greatexpectations.io/expectations/expect_column_values_to_match_like_pattern)\n- [expect_column_values_to_match_like_pattern_list](https://greatexpectations.io/expectations/expect_column_values_to_match_like_pattern_list)\n- [expect_column_values_to_not_match_like_pattern](https://greatexpectations.io/expectations/expect_column_values_to_not_match_like_pattern)\n- [expect_column_values_to_not_match_like_pattern_list](https://greatexpectations.io/expectations/expect_column_values_to_not_match_like_pattern_list)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.not_match_regex.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.not_match_regex.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 9, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column entries to be strings that do NOT match a given regular expression.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 9 tests for redshift are passing", "passed": true}, {"message": "All 9 tests for spark are passing", "passed": true}, {"message": "All 4 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 9 tests for trino are passing", "passed": true}, {"message": "All 9 tests for pandas are passing", "passed": true}, {"message": "All 9 tests for bigquery are passing", "passed": true}, {"message": "All 9 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 9 tests for redshift are passing", "passed": true}, {"message": "All 9 tests for spark are passing", "passed": true}, {"message": "All 4 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 9 tests for trino are passing", "passed": true}, {"message": "All 9 tests for pandas are passing", "passed": true}, {"message": "All 9 tests for bigquery are passing", "passed": true}, {"message": "All 9 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 77.0}, "expect_column_values_to_not_match_regex_list": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_column_values_to_not_match_regex_list.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core ColumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "column map expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectColumnValuesToNotMatchRegexList", "snake_name": "expect_column_values_to_not_match_regex_list", "short_description": "Expect the column entries to be strings that do not match any of a list of regular expressions. Matches can be anywhere in the string.", "docstring": "Expect the column entries to be strings that do not match any of a list of regular expressions. Matches can be anywhere in the string.\n\nexpect_column_values_to_not_match_regex_list is a [Column Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_column_map_expectations).\n\n#### Args:\n- column (str): The column name.\n- regex_list (list): The list of regular expressions which the column entries should not match\n\n#### Keyword Args:\n- mostly (None or a float between 0 and 1): Successful if at least mostly fraction of values match the expectation. For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly).\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_column_values_to_match_regex](https://greatexpectations.io/expectations/expect_column_values_to_match_regex)\n- [expect_column_values_to_match_regex_list](https://greatexpectations.io/expectations/expect_column_values_to_match_regex_list)\n- [expect_column_values_to_not_match_regex](https://greatexpectations.io/expectations/expect_column_values_to_not_match_regex)\n- [expect_column_values_to_match_like_pattern](https://greatexpectations.io/expectations/expect_column_values_to_match_like_pattern)\n- [expect_column_values_to_match_like_pattern_list](https://greatexpectations.io/expectations/expect_column_values_to_match_like_pattern_list)\n- [expect_column_values_to_not_match_like_pattern](https://greatexpectations.io/expectations/expect_column_values_to_not_match_like_pattern)\n- [expect_column_values_to_not_match_like_pattern_list](https://greatexpectations.io/expectations/expect_column_values_to_not_match_like_pattern_list)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "column_values.nonnull.unexpected_count", "has_question_renderer": false}, {"name": "column_values.not_match_regex_list.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "column_values.not_match_regex_list.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 3, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 4, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 4, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the column entries to be strings that do not match any of a list of regular expressions. Matches can be anywhere in the string.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 4 tests for redshift are passing", "passed": true}, {"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 3 tests for snowflake are passing", "passed": true}, {"message": "All 4 tests for mysql are passing", "passed": true}, {"message": "All 4 tests for trino are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}, {"message": "All 4 tests for bigquery are passing", "passed": true}, {"message": "All 4 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 4 tests for redshift are passing", "passed": true}, {"message": "All 4 tests for spark are passing", "passed": true}, {"message": "All 3 tests for snowflake are passing", "passed": true}, {"message": "All 4 tests for mysql are passing", "passed": true}, {"message": "All 4 tests for trino are passing", "passed": true}, {"message": "All 4 tests for pandas are passing", "passed": true}, {"message": "All 4 tests for bigquery are passing", "passed": true}, {"message": "All 4 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 42.0}, "expect_compound_columns_to_be_unique": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_compound_columns_to_be_unique.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core MulticolumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "multi-column expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectCompoundColumnsToBeUnique", "snake_name": "expect_compound_columns_to_be_unique", "short_description": "Expect the compound columns to be unique.", "docstring": "Expect the compound columns to be unique.\n\nexpect_compound_columns_to_be_unique is a [Multicolumn Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_multicolumn_map_expectations).\n\n#### Args:\n- column_list (tuple or list): Set of columns to be checked\n\n#### Keyword Args:\n- ignore_row_if (str): \"all_values_are_missing\", \"any_value_is_missing\", \"never\"\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "compound_columns.unique.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "compound_columns.unique.filtered_row_count", "has_question_renderer": false}, {"name": "compound_columns.unique.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 9, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the compound columns to be unique.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 9 tests for redshift are passing", "passed": true}, {"message": "All 9 tests for spark are passing", "passed": true}, {"message": "All 9 tests for sqlite are passing", "passed": true}, {"message": "All 9 tests for snowflake are passing", "passed": true}, {"message": "All 9 tests for mysql are passing", "passed": true}, {"message": "All 9 tests for trino are passing", "passed": true}, {"message": "All 9 tests for mssql are passing", "passed": true}, {"message": "All 11 tests for pandas are passing", "passed": true}, {"message": "All 9 tests for bigquery are passing", "passed": true}, {"message": "All 9 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 9 tests for redshift are passing", "passed": true}, {"message": "All 9 tests for spark are passing", "passed": true}, {"message": "All 9 tests for sqlite are passing", "passed": true}, {"message": "All 9 tests for snowflake are passing", "passed": true}, {"message": "All 9 tests for mysql are passing", "passed": true}, {"message": "All 9 tests for trino are passing", "passed": true}, {"message": "All 9 tests for mssql are passing", "passed": true}, {"message": "All 11 tests for pandas are passing", "passed": true}, {"message": "All 9 tests for bigquery are passing", "passed": true}, {"message": "All 9 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 105.0}, "expect_multicolumn_sum_to_equal": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2021-02-05 15:51:54 -0500 2 years, 9 months ago", "path": "great_expectations/expectations/core/expect_multicolumn_sum_to_equal.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core MulticolumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "multi-column expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectMulticolumnSumToEqual", "snake_name": "expect_multicolumn_sum_to_equal", "short_description": "Expect that the sum of row values in a specified column list is the same for each row, and equal to a specified sum total.", "docstring": "Expect that the sum of row values in a specified column list is the same for each row, and equal to a specified sum total.\n\nexpect_multicolumn_sum_to_equal is a [Multicolumn Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_multicolumn_map_expectations).\n\n#### Args:\n- column_list (tuple or list): Set of columns to be checked\n- sum_total (int): expected sum of columns\n\n#### Keyword Args:\n- ignore_row_if (str): \"all_values_are_missing\", \"any_value_is_missing\", \"never\"\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "multicolumn_sum.equal.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "multicolumn_sum.equal.filtered_row_count", "has_question_renderer": false}, {"name": "multicolumn_sum.equal.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 11, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 10, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect that the sum of row values in a specified column list is the same for each row, and equal to a specified sum total.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 10 tests for redshift are passing", "passed": true}, {"message": "All 10 tests for spark are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 10 tests for snowflake are passing", "passed": true}, {"message": "All 10 tests for mysql are passing", "passed": true}, {"message": "All 10 tests for trino are passing", "passed": true}, {"message": "All 10 tests for mssql are passing", "passed": true}, {"message": "All 11 tests for pandas are passing", "passed": true}, {"message": "All 10 tests for bigquery are passing", "passed": true}, {"message": "All 10 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 10 tests for redshift are passing", "passed": true}, {"message": "All 10 tests for spark are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 10 tests for snowflake are passing", "passed": true}, {"message": "All 10 tests for mysql are passing", "passed": true}, {"message": "All 10 tests for trino are passing", "passed": true}, {"message": "All 10 tests for mssql are passing", "passed": true}, {"message": "All 11 tests for pandas are passing", "passed": true}, {"message": "All 10 tests for bigquery are passing", "passed": true}, {"message": "All 10 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 114.0}, "expect_select_column_values_to_be_unique_within_record": {"updated_at": "2023-09-22 16:02:39 -0700 8 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_select_column_values_to_be_unique_within_record.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core MulticolumnMapExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "multi-column expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectSelectColumnValuesToBeUniqueWithinRecord", "snake_name": "expect_select_column_values_to_be_unique_within_record", "short_description": "Expect the values for each record to be unique across the columns listed.", "docstring": "Expect the values for each record to be unique across the columns listed.\n\nNote that records can be duplicated.\n\nexpect_select_column_values_to_be_unique_within_record is a [Multicolumn Map Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_multicolumn_map_expectations).\n\n#### For example:\n```\nA B C\n1 1 2 Fail\n1 2 3 Pass\n8 2 7 Pass\n1 2 3 Pass\n4 4 4 Fail\n```\n\n#### Args:\n- column_list (tuple or list): The column names to evaluate\n\n#### Keyword Args:\n- ignore_row_if (str): \"all_values_are_missing\", \"any_value_is_missing\", \"never\"\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "select_column_values.unique.within_record.unexpected_count", "has_question_renderer": false}, {"name": "table.row_count", "has_question_renderer": false}, {"name": "select_column_values.unique.within_record.filtered_row_count", "has_question_renderer": false}, {"name": "select_column_values.unique.within_record.unexpected_values", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 9, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 10, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 10, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the values for each record to be unique across the columns listed.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 10 tests for redshift are passing", "passed": true}, {"message": "All 10 tests for spark are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 10 tests for snowflake are passing", "passed": true}, {"message": "All 10 tests for mysql are passing", "passed": true}, {"message": "All 10 tests for trino are passing", "passed": true}, {"message": "All 10 tests for mssql are passing", "passed": true}, {"message": "All 9 tests for pandas are passing", "passed": true}, {"message": "All 10 tests for bigquery are passing", "passed": true}, {"message": "All 10 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 10 tests for redshift are passing", "passed": true}, {"message": "All 10 tests for spark are passing", "passed": true}, {"message": "All 10 tests for sqlite are passing", "passed": true}, {"message": "All 10 tests for snowflake are passing", "passed": true}, {"message": "All 10 tests for mysql are passing", "passed": true}, {"message": "All 10 tests for trino are passing", "passed": true}, {"message": "All 10 tests for mssql are passing", "passed": true}, {"message": "All 9 tests for pandas are passing", "passed": true}, {"message": "All 10 tests for bigquery are passing", "passed": true}, {"message": "All 10 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 112.0}, "expect_table_column_count_to_be_between": {"updated_at": "2023-10-05 16:04:55 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_table_column_count_to_be_between.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core BatchExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "table expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectTableColumnCountToBeBetween", "snake_name": "expect_table_column_count_to_be_between", "short_description": "Expect the number of columns to be between two values.", "docstring": "Expect the number of columns to be between two values.\n\nexpect_table_column_count_to_be_between is a [Batch Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_batch_expectations).\n\n#### Keyword Args:\n- min_value (int or None): The minimum number of columns, inclusive.\n- max_value (int or None): The maximum number of columns, inclusive.\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n* min_value and max_value are both inclusive.\n* If min_value is None, then max_value is treated as an upper bound, and the number of acceptable columns has no minimum.\n* If max_value is None, then min_value is treated as a lower bound, and the number of acceptable columns has no maximum.\n\n#### See Also:\n- [expect_table_column_count_to_equal](https://greatexpectations.io/expectations/expect_table_column_count_to_equal)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "table.column_count", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 8, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the number of columns to be between two values.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 8 tests for redshift are passing", "passed": true}, {"message": "All 8 tests for spark are passing", "passed": true}, {"message": "All 8 tests for sqlite are passing", "passed": true}, {"message": "All 8 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 8 tests for trino are passing", "passed": true}, {"message": "All 8 tests for mssql are passing", "passed": true}, {"message": "All 8 tests for pandas are passing", "passed": true}, {"message": "All 8 tests for bigquery are passing", "passed": true}, {"message": "All 8 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 8 tests for redshift are passing", "passed": true}, {"message": "All 8 tests for spark are passing", "passed": true}, {"message": "All 8 tests for sqlite are passing", "passed": true}, {"message": "All 8 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 8 tests for trino are passing", "passed": true}, {"message": "All 8 tests for mssql are passing", "passed": true}, {"message": "All 8 tests for pandas are passing", "passed": true}, {"message": "All 8 tests for bigquery are passing", "passed": true}, {"message": "All 8 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 93.0}, "expect_table_column_count_to_equal": {"updated_at": "2023-07-25 15:50:41 -0500 4 months ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_table_column_count_to_equal.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core BatchExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "table expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectTableColumnCountToEqual", "snake_name": "expect_table_column_count_to_equal", "short_description": "Expect the number of columns to equal a value.", "docstring": "Expect the number of columns to equal a value.\n\nexpect_table_column_count_to_equal is a [Batch Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_batch_expectations).\n\n#### Args:\n- value (int): The expected number of columns.\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_table_column_count_to_be_between](https://greatexpectations.io/expectations/expect_table_column_count_to_be_between)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "table.column_count", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the number of columns to equal a value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 63.0}, "expect_table_columns_to_match_ordered_list": {"updated_at": "2023-08-29 15:27:34 -0400 3 months ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_table_columns_to_match_ordered_list.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core BatchExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "table expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectTableColumnsToMatchOrderedList", "snake_name": "expect_table_columns_to_match_ordered_list", "short_description": "Expect the columns to exactly match a specified list.", "docstring": "Expect the columns to exactly match a specified list.\n\nexpect_table_columns_to_match_ordered_list is a [Batch Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_batch_expectations).\n\n#### Args:\n- column_list (list of str): The column names, in the correct order.\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "table.columns", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 6, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 6, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the columns to exactly match a specified list.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 6 tests for redshift are passing", "passed": true}, {"message": "All 6 tests for spark are passing", "passed": true}, {"message": "All 6 tests for sqlite are passing", "passed": true}, {"message": "All 6 tests for snowflake are passing", "passed": true}, {"message": "All 6 tests for mysql are passing", "passed": true}, {"message": "All 6 tests for trino are passing", "passed": true}, {"message": "All 6 tests for mssql are passing", "passed": true}, {"message": "All 6 tests for pandas are passing", "passed": true}, {"message": "All 6 tests for bigquery are passing", "passed": true}, {"message": "All 6 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 6 tests for redshift are passing", "passed": true}, {"message": "All 6 tests for spark are passing", "passed": true}, {"message": "All 6 tests for sqlite are passing", "passed": true}, {"message": "All 6 tests for snowflake are passing", "passed": true}, {"message": "All 6 tests for mysql are passing", "passed": true}, {"message": "All 6 tests for trino are passing", "passed": true}, {"message": "All 6 tests for mssql are passing", "passed": true}, {"message": "All 6 tests for pandas are passing", "passed": true}, {"message": "All 6 tests for bigquery are passing", "passed": true}, {"message": "All 6 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 73.0}, "expect_table_columns_to_match_set": {"updated_at": "2023-08-29 15:27:34 -0400 3 months ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_table_columns_to_match_set.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core BatchExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "table expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectTableColumnsToMatchSet", "snake_name": "expect_table_columns_to_match_set", "short_description": "Expect the columns to match an unordered set.", "docstring": "Expect the columns to match an unordered set.\n\nexpect_table_columns_to_match_set is a [Batch Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_batch_expectations).\n\n#### Args:\n- column_set (list of str): The column names, in any order.\n- exact_match (boolean): If True, the list of columns must exactly match the observed columns. If False, observed columns must include column_set but additional columns will pass.\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "table.columns", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 12, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 12, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the columns to match an unordered set.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 12 tests for redshift are passing", "passed": true}, {"message": "All 12 tests for spark are passing", "passed": true}, {"message": "All 12 tests for sqlite are passing", "passed": true}, {"message": "All 12 tests for snowflake are passing", "passed": true}, {"message": "All 12 tests for mysql are passing", "passed": true}, {"message": "All 12 tests for trino are passing", "passed": true}, {"message": "All 12 tests for mssql are passing", "passed": true}, {"message": "All 12 tests for pandas are passing", "passed": true}, {"message": "All 12 tests for bigquery are passing", "passed": true}, {"message": "All 12 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 12 tests for redshift are passing", "passed": true}, {"message": "All 12 tests for spark are passing", "passed": true}, {"message": "All 12 tests for sqlite are passing", "passed": true}, {"message": "All 12 tests for snowflake are passing", "passed": true}, {"message": "All 12 tests for mysql are passing", "passed": true}, {"message": "All 12 tests for trino are passing", "passed": true}, {"message": "All 12 tests for mssql are passing", "passed": true}, {"message": "All 12 tests for pandas are passing", "passed": true}, {"message": "All 12 tests for bigquery are passing", "passed": true}, {"message": "All 12 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 133.0}, "expect_table_row_count_to_be_between": {"updated_at": "2023-10-05 16:04:55 -0400 6 weeks ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_table_row_count_to_be_between.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core BatchExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "table expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectTableRowCountToBeBetween", "snake_name": "expect_table_row_count_to_be_between", "short_description": "Expect the number of rows to be between two values.", "docstring": "Expect the number of rows to be between two values.\n\nexpect_table_row_count_to_be_between is a [Batch Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_batch_expectations).\n\n#### Keyword Args:\n- min_value (int or None): The minimum number of rows, inclusive.\n- max_value (int or None): The maximum number of rows, inclusive.\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### Notes:\n* min_value and max_value are both inclusive.\n* If min_value is None, then max_value is treated as an upper bound, and the number of acceptable rows has no minimum.\n* If max_value is None, then min_value is treated as a lower bound, and the number of acceptable rows has no maximum.\n\n#### See Also:\n- [expect_table_row_count_to_equal](https://greatexpectations.io/expectations/expect_table_row_count_to_equal)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "table.row_count", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 8, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 8, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the number of rows to be between two values.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 8 tests for redshift are passing", "passed": true}, {"message": "All 8 tests for spark are passing", "passed": true}, {"message": "All 8 tests for sqlite are passing", "passed": true}, {"message": "All 8 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 8 tests for trino are passing", "passed": true}, {"message": "All 8 tests for mssql are passing", "passed": true}, {"message": "All 8 tests for pandas are passing", "passed": true}, {"message": "All 8 tests for bigquery are passing", "passed": true}, {"message": "All 8 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 8 tests for redshift are passing", "passed": true}, {"message": "All 8 tests for spark are passing", "passed": true}, {"message": "All 8 tests for sqlite are passing", "passed": true}, {"message": "All 8 tests for snowflake are passing", "passed": true}, {"message": "All 8 tests for mysql are passing", "passed": true}, {"message": "All 8 tests for trino are passing", "passed": true}, {"message": "All 8 tests for mssql are passing", "passed": true}, {"message": "All 8 tests for pandas are passing", "passed": true}, {"message": "All 8 tests for bigquery are passing", "passed": true}, {"message": "All 8 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 93.0}, "expect_table_row_count_to_equal": {"updated_at": "2023-08-21 10:57:45 -0400 3 months ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_table_row_count_to_equal.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core BatchExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "table expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectTableRowCountToEqual", "snake_name": "expect_table_row_count_to_equal", "short_description": "Expect the number of rows to equal a value.", "docstring": "Expect the number of rows to equal a value.\n\nexpect_table_row_count_to_equal is a [Batch Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_batch_expectations).\n\n#### Args:\n- value (int): The expected number of rows.\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_table_row_count_to_be_between](https://greatexpectations.io/expectations/expect_table_row_count_to_be_between)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "table.row_count", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "spark", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "pandas", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 5, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 5, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the number of rows to equal a value.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Custom 'assert' statements in validate_configuration", "passed": true}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 5 tests for redshift are passing", "passed": true}, {"message": "All 5 tests for spark are passing", "passed": true}, {"message": "All 5 tests for sqlite are passing", "passed": true}, {"message": "All 5 tests for snowflake are passing", "passed": true}, {"message": "All 5 tests for mysql are passing", "passed": true}, {"message": "All 5 tests for trino are passing", "passed": true}, {"message": "All 5 tests for mssql are passing", "passed": true}, {"message": "All 5 tests for pandas are passing", "passed": true}, {"message": "All 5 tests for bigquery are passing", "passed": true}, {"message": "All 5 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 63.0}, "expect_table_row_count_to_equal_other_table": {"updated_at": "2023-07-25 15:50:41 -0500 4 months ago", "created_at": "2020-12-01 10:37:14 -0700 3 years ago", "path": "great_expectations/expectations/core/expect_table_row_count_to_equal_other_table.py", "package": "core", "requirements": [], "import_module_args": [], "sys_path": "", "exp_type": "Core BatchExpectation", "gallery_examples": [], "library_metadata": {"maturity": "PRODUCTION", "tags": ["core expectation", "table expectation", "multi-table expectation"], "contributors": ["@great_expectations"], "requirements": [], "library_metadata_passed_checks": true, "has_full_test_suite": true, "manually_reviewed_code": true, "problems": []}, "description": {"camel_name": "ExpectTableRowCountToEqualOtherTable", "snake_name": "expect_table_row_count_to_equal_other_table", "short_description": "Expect the number of rows to equal the number in another table.", "docstring": "Expect the number of rows to equal the number in another table.\n\nexpect_table_row_count_to_equal_other_table is a [Batch Expectation](https://docs.greatexpectations.io/docs/guides/expectations/creating_custom_expectations/how_to_create_custom_batch_expectations).\n\n#### Args:\n- other_table_name (str): The name of the other table.\n\n#### Other Parameters:\n- result_format (str or None): Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY. For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n- include_config (boolean): If True, then include the expectation config as part of the result object.\n- catch_exceptions (boolean or None): If True, then catch exceptions and include them as part of the result object. For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n- meta (dict or None): A JSON-serializable dictionary (nesting allowed) that will be included in the output without modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\n#### Returns:\n- An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\nExact fields vary depending on the values passed to result_format, include_config, catch_exceptions, and meta.\n\n#### See Also:\n- [expect_table_row_count_to_be_between](https://greatexpectations.io/expectations/expect_table_row_count_to_be_between)\n- [expect_table_row_count_to_equal](https://greatexpectations.io/expectations/expect_table_row_count_to_equal)\n "}, "execution_engines": {"PandasExecutionEngine": true, "SqlAlchemyExecutionEngine": true, "SparkDFExecutionEngine": true}, "renderers": [], "metrics": [{"name": "table.row_count.self", "has_question_renderer": false}, {"name": "table.row_count.other", "has_question_renderer": false}], "errors": [], "execution_engines_list": ["PandasExecutionEngine", "SparkDFExecutionEngine", "SqlAlchemyExecutionEngine"], "backend_test_result_counts": [{"backend": "redshift", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "sqlite", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "snowflake", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "mysql", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "trino", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "mssql", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "bigquery", "num_passed": 2, "num_failed": 0, "failing_names": null}, {"backend": "postgresql", "num_passed": 2, "num_failed": 0, "failing_names": null}], "maturity_checklist": {"experimental": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a valid library_metadata object"}, {"sub_messages": [{"message": "\"Expect the number of rows to equal the number in another table.\"", "passed": true}], "passed": true, "doc_url": null, "message": "Has a docstring, including a one-line short description that begins with \"Expect\" and ends with a period"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has at least one positive and negative example case, and all test cases pass"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for trino are passing", "passed": true}, {"message": "All 2 tests for mssql are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic and passes tests on at least one Execution Engine"}], "production": [{"sub_messages": [], "passed": true, "doc_url": null, "message": "Has a full suite of tests, as determined by a code owner"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has passed a manual review by a code owner for code standards and style guides"}], "beta": [{"sub_messages": [{"message": "Using default validate_configuration from template", "passed": false}], "passed": true, "doc_url": null, "message": "Has basic input validation and type checking"}, {"sub_messages": [], "passed": true, "doc_url": null, "message": "Has both statement Renderers: prescriptive and diagnostic"}, {"sub_messages": [{"message": "All 2 tests for redshift are passing", "passed": true}, {"message": "All 2 tests for sqlite are passing", "passed": true}, {"message": "All 2 tests for snowflake are passing", "passed": true}, {"message": "All 2 tests for mysql are passing", "passed": true}, {"message": "All 2 tests for trino are passing", "passed": true}, {"message": "All 2 tests for mssql are passing", "passed": true}, {"message": "All 2 tests for bigquery are passing", "passed": true}, {"message": "All 2 tests for postgresql are passing", "passed": true}], "passed": true, "doc_url": null, "message": "Has core logic that passes tests for all applicable Execution Engines and SQL dialects"}]}, "coverage_score": 27.0}}